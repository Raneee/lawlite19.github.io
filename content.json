[{"title":"RNN-循环神经网络之LSTM和GRU-04介绍及推导","date":"2017-06-21T14:45:44.000Z","path":"2017/06/21/RNN-循环神经网络之LSTM和GRU-04介绍及推导/","text":"一、说明 关于LSTM的cell结构和一些计算在之前已经介绍了，可以点击这里查看 本篇博客主要涉及一下内容： LSTM前向计算说明(之前的博客中LSTM部分实际已经提到过，这里结合图更详细说明) 二、LSTM前向计算step by step1、结构review 我们知道RNN的结构如下图 注意cell中的神经元可以有多个 LSTM就是对cell结构的改进 符号说明 LSTM的关键就是state,就是对应上面的主线数据的传递 2、前向计算step by step(1) 决定抛弃的信息 遗忘门 (forget gate layer) $\\sigma$是Sigmoid激励函数，因为它的值域是(0,1)，0代表遗忘所有信息，1代表保留所有信息 (2) 决定存储的新信息 包括两个部分 第一个是输入门 (input gate layer)，对应的是Sigmoid函数 第二个是经过tanh激励函数 (3) 更新state$C_{t-1}$成$C_t$ $f_t$是经过Sigmoid函数的，所以值域在(0,1)之间，$C_{t-1}$点乘0-1之间的数实际就是对$C_{t-1}$的一种缩放，（可以认为是记住之前信息的程度） 然后加入进来的新的信息 (4) 最后计算输出 输出门(output gate layer) 最后再放一下之前的图, 数据流向可能更清晰 三、GRU (Gated Recurrent Unit)1、结构和前向计算 如下图所示 相比LSTM，GRU结合了遗忘门和输入门 同样也合并了cell state和hidden state （就是LSTM中的c和h） GRU比LSTM更加简单 Reference https://colah.github.io/posts/2015-08-Understanding-LSTMs/ https://r2rt.com/written-memories-understanding-deriving-and-extending-the-lstm.html#dealing-with-vanishing-and-exploding-gradients http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf http://lawlite.me/2016/12/20/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95-UnderstandingTheDifficultyOfTrainingDeepFeedforwardNeuralNetworks/","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"RNN","slug":"RNN","permalink":"http://lawlite.me/tags/RNN/"},{"name":"LSTM","slug":"LSTM","permalink":"http://lawlite.me/tags/LSTM/"},{"name":"GRU","slug":"GRU","permalink":"http://lawlite.me/tags/GRU/"}]},{"title":"RNN-LSTM循环神经网络-03Tensorflow进阶实现","date":"2017-06-21T08:54:28.000Z","path":"2017/06/21/RNN-LSTM循环神经网络-03Tensorflow进阶实现/","text":"全部代码：点击这里查看 关于Tensorflow实现一个简单的二元序列的例子可以点击这里查看 关于RNN和LSTM的基础可以查看这里 这篇博客主要包含以下内容 训练一个RNN模型逐字符生成文本数据(最后的部分) 使用Tensorflow的scan函数实现dynamic_rnn动态创建的效果 使用multiple RNN创建多层的RNN 实现Dropout和Layer Normalization的功能 一、模型说明和数据处理1、模型说明 我们要使用RNN学习一个语言模型(language model)去生成字符序列 githbub上有别人实现好的 Torch中的实现：https://github.com/karpathy/char-rnn Tensorflow中的实现：https://github.com/sherjilozair/char-rnn-tensorflow 接下来我们来看如何实现2、数据处理 数据集使用莎士比亚的一段文集，点击这里查看, 实际也可以使用别的 大小写字符视为不同的字符 下载并读取数据 12345678'''下载数据并读取数据'''file_url = 'https://raw.githubusercontent.com/jcjohnson/torch-rnn/master/data/tiny-shakespeare.txt'file_name = 'tinyshakespeare.txt'if not os.path.exists(file_name): urllib.request.urlretrieve(file_url, filename=file_name)with open(file_name, 'r') as f: raw_data = f.read() print(\"数据长度\", len(raw_data)) 处理字符数据，转换为数字 使用set去重，得到所有的唯一字符 然后一个字符对应一个数字（使用字典） 然后遍历原始数据，得到所有字符对应的数字12345678'''处理字符数据，转换为数字'''vocab = set(raw_data) # 使用set去重，这里就是去除重复的字母(大小写是区分的)vocab_size = len(vocab) idx_to_vocab = dict(enumerate(vocab)) # 这里将set转为了字典，每个字符对应了一个数字0,1,2,3..........(vocab_size-1)vocab_to_idx = dict(zip(idx_to_vocab.values(), idx_to_vocab.keys())) # 这里将字典的(key, value)转换成(value, key)data = [vocab_to_idx[c] for c in raw_data] # 处理raw_data, 根据字符，得到对应的value,就是数字del raw_data 生成batch数据 Tensorflow models给出的PTB模型：https://github.com/tensorflow/models/tree/master/tutorials/rnn/ptb 12345678910'''超参数'''num_steps=200 # 学习的步数batch_size=32state_size=100 # cell的sizenum_classes = vocab_sizelearning_rate = 1e-4def gen_epochs(num_epochs, num_steps, batch_size): for i in range(num_epochs): yield reader.ptb_iterator_oldversion(data, batch_size, num_steps) ptb_iterator函数实现： 返回数据X,Y的shape=[batch_size, num_steps]1234567891011121314151617181920212223242526272829303132def ptb_iterator_oldversion(raw_data, batch_size, num_steps): \"\"\"Iterate on the raw PTB data. This generates batch_size pointers into the raw PTB data, and allows minibatch iteration along these pointers. Args: raw_data: one of the raw data outputs from ptb_raw_data. batch_size: int, the batch size. num_steps: int, the number of unrolls. Yields: Pairs of the batched data, each a matrix of shape [batch_size, num_steps]. The second element of the tuple is the same data time-shifted to the right by one. Raises: ValueError: if batch_size or num_steps are too high. \"\"\" raw_data = np.array(raw_data, dtype=np.int32) data_len = len(raw_data) batch_len = data_len // batch_size data = np.zeros([batch_size, batch_len], dtype=np.int32) for i in range(batch_size): data[i] = raw_data[batch_len * i:batch_len * (i + 1)] epoch_size = (batch_len - 1) // num_steps if epoch_size == 0: raise ValueError(\"epoch_size == 0, decrease batch_size or num_steps\") for i in range(epoch_size): x = data[:, i*num_steps:(i+1)*num_steps] y = data[:, i*num_steps+1:(i+1)*num_steps+1] yield (x, y) 二、使用tf.scan函数和dynamic_rnn1、为什么使用tf.scan和dynamic_rnn 之前我们实现的第一个例子中没有用dynamic_rnn的部分是将输入的三维数据[batch_size,num_steps, state_size]按num_steps维度进行拆分，然后每计算一步都存到list列表中，如下图 这种构建方式很耗时，在我们例子中没有体现出来，但是如果我们要学习的步数很大(num_steps，也可以说要学习的依赖关系很长），如果再使用深层的RNN，这种就不合适了 为了方便比较和dynamic_rnn的运行耗时，下面还是给出使用list 2、使用list的方式(static_rnn) 构建计算图 我这里tensorflow的版本是1.2.0，与1.0 些许不一样 和之前的例子差不多，这里不再累述12345678910111213141516171819202122232425262728293031323334353637383940414243444546'''使用list的方式'''def build_basic_rnn_graph_with_list( state_size = state_size, num_classes = num_classes, batch_size = batch_size, num_steps = num_steps, num_layers = 3, learning_rate = learning_rate): reset_graph() x = tf.placeholder(tf.int32, [batch_size, num_steps], name='x') y = tf.placeholder(tf.int32, [batch_size, num_steps], name='y') x_one_hot = tf.one_hot(x, num_classes) # (batch_size, num_steps, num_classes) '''这里按第二维拆开num_steps*(batch_size, num_classes)''' rnn_inputs = [tf.squeeze(i,squeeze_dims=[1]) for i in tf.split(x_one_hot, num_steps, 1)] cell = tf.nn.rnn_cell.BasicRNNCell(state_size) init_state = cell.zero_state(batch_size, tf.float32) '''使用static_rnn方式''' rnn_outputs, final_state = tf.contrib.rnn.static_rnn(cell=cell, inputs=rnn_inputs, initial_state=init_state) #rnn_outputs, final_state = tf.nn.rnn(cell, rnn_inputs, initial_state=init_state) # tensorflow 1.0的方式 with tf.variable_scope('softmax'): W = tf.get_variable('W', [state_size, num_classes]) b = tf.get_variable('b', [num_classes], initializer=tf.constant_initializer(0.0)) logits = [tf.matmul(rnn_output, W) + b for rnn_output in rnn_outputs] y_as_list = [tf.squeeze(i, squeeze_dims=[1]) for i in tf.split(y, num_steps, 1)] #loss_weights = [tf.ones([batch_size]) for i in range(num_steps)] losses = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y_as_list, logits=logits) #losses = tf.nn.seq2seq.sequence_loss_by_example(logits, y_as_list, loss_weights) # tensorflow 1.0的方式 total_loss = tf.reduce_mean(losses) train_step = tf.train.AdamOptimizer(learning_rate).minimize(total_loss) return dict( x = x, y = y, init_state = init_state, final_state = final_state, total_loss = total_loss, train_step = train_step ) 训练神经网络函数 和之前例子类似123456789101112131415161718192021222324252627'''训练rnn网络的函数'''def train_rnn(g, num_epochs, num_steps=num_steps, batch_size=batch_size, verbose=True, save=False): tf.set_random_seed(2345) with tf.Session() as sess: sess.run(tf.initialize_all_variables()) training_losses = [] for idx, epoch in enumerate(gen_epochs(num_epochs, num_steps, batch_size)): training_loss = 0 steps = 0 training_state = None for X, Y in epoch: steps += 1 feed_dict = &#123;g['x']: X, g['y']: Y&#125; if training_state is not None: feed_dict[g['init_state']] = training_state training_loss_, training_state, _ = sess.run([g['total_loss'], g['final_state'], g['train_step']], feed_dict=feed_dict) training_loss += training_loss_ if verbose: print('epoch: &#123;0&#125;的平均损失值：&#123;1&#125;'.format(idx, training_loss/steps)) training_losses.append(training_loss/steps) if isinstance(save, str): g['saver'].save(sess, save) return training_losses 调用执行： 123456start_time = time.time()g = build_basic_rnn_graph_with_list()print(\"构建图耗时\", time.time()-start_time)start_time = time.time()train_rnn(g, 3)print(\"训练耗时：\", time.time()-start_time) 运行结果 构建计算图耗时: 113.43532419204712 3个epoch运行耗时：1234epoch: 0的平均损失值：3.6314958388777985epoch: 1的平均损失值：3.287133811534136epoch: 2的平均损失值：3.250853428895446训练耗时： 84.2816972732544 可以看出在构建图的时候非常耗时，这里仅仅一层的cell 3、dynamic_rnn的使用 之前在我们第一个例子中实际已经使用过了，这里使用MultiRNNCell实现多层cell，具体下面再讲 构建模型： tf.nn.embedding_lookup(params, ids)函数是在params中查找ids的表示， 和在matrix中用array索引类似, 这里是在二维embeddings中找二维的ids, ids每一行中的一个数对应embeddings中的一行，所以最后是[batch_size, num_steps, state_size]，关于具体的输出可以查看这里 这里我认为就是某个字母的表示,之前上面我们的statci_rnn就是one-hot来表示的 12345678910111213141516171819202122232425262728293031323334353637383940414243'''使用dynamic_rnn方式 - 之前我们自己实现的cell和static_rnn的例子都是将得到的tensor使用list存起来，这种方式构建计算图时很慢 - dynamic可以在运行时构建计算图'''def build_multilayer_lstm_graph_with_dynamic_rnn( state_size = state_size, num_classes = num_classes, batch_size = batch_size, num_steps = num_steps, num_layers = 3, learning_rate = learning_rate ): reset_graph() x = tf.placeholder(tf.int32, [batch_size, num_steps], name='x') y = tf.placeholder(tf.int32, [batch_size, num_steps], name='y') embeddings = tf.get_variable(name='embedding_matrix', shape=[num_classes, state_size]) '''这里的输入是三维的[batch_size, num_steps, state_size] - embedding_lookup(params, ids)函数是在params中查找ids的表示， 和在matrix中用array索引类似, 这里是在二维embeddings中找二维的ids, ids每一行中的一个数对应embeddings中的一行，所以最后是[batch_size, num_steps, state_size] ''' rnn_inputs = tf.nn.embedding_lookup(params=embeddings, ids=x) cell = tf.nn.rnn_cell.LSTMCell(num_units=state_size, state_is_tuple=True) cell = tf.nn.rnn_cell.MultiRNNCell(cells=[cell]*num_layers, state_is_tuple=True) init_state = cell.zero_state(batch_size, dtype=tf.float32) '''使用dynamic_rnn方式''' rnn_outputs, final_state = tf.nn.dynamic_rnn(cell=cell, inputs=rnn_inputs, initial_state=init_state) with tf.variable_scope('softmax'): W = tf.get_variable('W', [state_size, num_classes]) b = tf.get_variable('b', [num_classes], initializer=tf.constant_initializer(0.0)) rnn_outputs = tf.reshape(rnn_outputs, [-1, state_size]) # 转成二维的矩阵 y_reshape = tf.reshape(y, [-1]) logits = tf.matmul(rnn_outputs, W) + b # 进行矩阵运算 total_loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y_reshape)) train_step = tf.train.AdamOptimizer(learning_rate).minimize(total_loss) return dict(x = x, y = y, init_state = init_state, final_state = final_state, total_loss = total_loss, train_step = train_step) 调用执行即可 123456start_time = time.time()g = build_multilayer_lstm_graph_with_dynamic_rnn()print(\"构建图耗时\", time.time()-start_time)start_time = time.time()train_rnn(g, 3)print(\"训练耗时：\", time.time()-start_time) 运行结果（注意这是3层的LSTM）： 构建计算图耗时 7.616888523101807，相比第一种static_rnn很快 训练耗时(这是3层的LSTM，所以还是挺慢的)：1234epoch: 0的平均损失值：3.604653576324726epoch: 1的平均损失值：3.3202743626188957epoch: 2的平均损失值：3.3155322650383257训练耗时： 303.5468375682831 4、tf.scan实现的方式 如果你不了解tf.scan，建议看下官方API, 还是有点复杂的。 或者Youtube上有个介绍，点击这里查看 scan是个高阶函数，一般的计算方式是：给定一个序列$[x_0, x_1,…..,x_n]$和初试状态$y_{-1}$,根据$y_t = f(x_t, y_{t-1})$ 计算得到最终序列$[y_0, y_1,……,y_n]$ 构建计算图 tf.transpose(rnn_inputs, [1,0,2]) 是将rnn_inputs的第一个和第二个维度调换，即变成[num_steps,batch_size, state_size], 在dynamic_rnn函数有个time_major参数，就是指定num_steps是否在第一个维度上，默认是false的,即不在第一维 tf.scan会将elems按照第一维拆开，所以一次就是一个step的数据（和我们static_rnn的例子类似） 参数a的结构和initializer的结构一致，所以a[1]就是对应的state，cell需要传入x和state计算 每次迭代cell返回的是一个rnn_output, shape=(batch_size,state_size)和对应的state,num_steps之后的rnn_outputs的shape就是(num_steps, batch_size, state_size) ，state同理 每次输入的x都会得到的state--&gt;(final_states)，我们只要的最后的final_state 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455'''使用scan实现dynamic_rnn的效果'''def build_multilayer_lstm_graph_with_scan( state_size = state_size, num_classes = num_classes, batch_size = batch_size, num_steps = num_steps, num_layers = 3, learning_rate = learning_rate ): reset_graph() x = tf.placeholder(tf.int32, [batch_size, num_steps], name='x') y = tf.placeholder(tf.int32, [batch_size, num_steps], name='y') embeddings = tf.get_variable(name='embedding_matrix', shape=[num_classes, state_size]) '''这里的输入是三维的[batch_size, num_steps, state_size]''' rnn_inputs = tf.nn.embedding_lookup(params=embeddings, ids=x) '''构建多层的cell, 先构建一个cell, 然后使用MultiRNNCell函数构建即可''' cell = tf.nn.rnn_cell.LSTMCell(num_units=state_size, state_is_tuple=True) cell = tf.nn.rnn_cell.MultiRNNCell(cells=[cell]*num_layers, state_is_tuple=True) init_state = cell.zero_state(batch_size, dtype=tf.float32) '''使用tf.scan方式 - tf.transpose(rnn_inputs, [1,0,2]) 是将rnn_inputs的第一个和第二个维度调换，即[num_steps,batch_size, state_size], 在dynamic_rnn函数有个time_major参数，就是指定num_steps是否在第一个维度上，默认是false的,即不在第一维 - tf.scan会将elems按照第一维拆开，所以一次就是一个step的数据（和我们static_rnn的例子类似） - a的结构和initializer的结构一致，所以a[1]就是对应的state，cell需要传入x和state计算 - 每次迭代cell返回的是一个rnn_output(batch_size,state_size)和对应的state,num_steps之后的rnn_outputs的shape就是(num_steps, batch_size, state_size) - 每次输入的x都会得到的state(final_states)，我们只要的最后的final_state ''' def testfn(a, x): return cell(x, a[1]) rnn_outputs, final_states = tf.scan(fn=testfn, elems=tf.transpose(rnn_inputs, [1,0,2]), initializer=(tf.zeros([batch_size,state_size]),init_state) ) '''或者使用lambda的方式''' #rnn_outputs, final_states = tf.scan(lambda a,x: cell(x, a[1]), tf.transpose(rnn_inputs, [1,0,2]), #initializer=(tf.zeros([batch_size, state_size]),init_state)) final_state = tuple([tf.nn.rnn_cell.LSTMStateTuple( tf.squeeze(tf.slice(c, [num_steps-1,0,0], [1,batch_size,state_size])), tf.squeeze(tf.slice(h, [num_steps-1,0,0], [1,batch_size,state_size]))) for c, h in final_states]) with tf.variable_scope('softmax'): W = tf.get_variable('W', [state_size, num_classes]) b = tf.get_variable('b', [num_classes], initializer=tf.constant_initializer(0.0)) rnn_outputs = tf.reshape(rnn_outputs, [-1, state_size]) y_reshape = tf.reshape(y, [-1]) logits = tf.matmul(rnn_outputs, W) + b total_loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y_reshape)) train_step = tf.train.AdamOptimizer(learning_rate).minimize(total_loss) return dict(x = x, y = y, init_state = init_state, final_state = final_state, total_loss = total_loss, train_step = train_step) 运行结果 构建计算图耗时: 8.685610055923462 （比dynamic_rnn稍微慢一点） 训练耗时（和dynamic_rnn耗时差不多） 使用scan的方式只比dynamic_rnn慢一点点，但是对我们来说更加灵活和清楚执行的过程。也方便我们修改代码（比如从state的t-2时刻跳过一个时刻直接到t） 1234epoch: 0的平均损失值：3.6226147892831384epoch: 1的平均损失值：3.3211338095281318epoch: 2的平均损失值：3.3158331972429123训练耗时： 303.2535448074341 三、关于多层RNN1、结构 LSTM中包含两个state,一个是c记忆单元（memory cell），另外一个是h隐藏状态(hidden state), 在Tensorflow中是以tuple元组的形式，所以才有上面构建dynamic_rnn时的参数state_is_tuple的参数，这种方式执行更快 多层的结构如下图 我们可以将其包装起来, 看起来像一个cell一样 2、代码 Tensorflow中的实现就是使用tf.nn.rnn_cell.MultiRNNCell 声明一个cell MultiRNNCell中传入[cell]*num_layers就可以了 注意如果是LSTM，定义参数state_is_tuple=True123cell = tf.nn.rnn_cell.LSTMCell(num_units=state_size, state_is_tuple=True)cell = tf.nn.rnn_cell.MultiRNNCell(cells=[cell]*num_layers, state_is_tuple=True)init_state = cell.zero_state(batch_size, dtype=tf.float32) 四、Dropout操作 应用在一层cell的输入和输出，不应用在循环的部分 1、一层的cell static_rnn中实现 声明placeholder：keep_prob = tf.placeholder(tf.float32, name=&#39;keep_prob&#39;) 输入：rnn_inputs = [tf.nn.dropout(rnn_input, keep_prob) for rnn_input in rnn_inputs] 输出：rnn_outputs = [tf.nn.dropout(rnn_output, keep_prob) for rnn_output in rnn_outputs] feed_dict中加入即可：feed_dict = {g[&#39;x&#39;]: X, g[&#39;y&#39;]: Y, g[&#39;keep_prob&#39;]: keep_prob} dynamic_rnn或者scan中实现 直接添加即可，其余类似：rnn_inputs = tf.nn.dropout(rnn_inputed, keep_prob) 2、多层cell 我们之前说使用MultiRNNCell将多层cell看作一个cell, 那么怎么实现对每层cell使用dropout呢 可以使用tf.nn.rnn_cell.DropoutWrapper来实现 方式一：cell = tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=input_keep_prob, output_keep_prob=output_drop_prob) 如果同时使用了input_keep_prob和output_keep_prob都是0.9, 那么层之间的drop_out=0.9*0.9=0.81 方式二: 对于basic cell只使用一个input_keep_prob或者output_keep_prob，对MultiRNNCell也使用一个input_keep_prob或者output_keep_prob 1234cell = tf.nn.rnn_cell.LSTMCell(num_units=state_size, state_is_tuple=True)cell = tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=keep_prob)cell = tf.nn.rnn_cell.MultiRNNCell(cells=[cell]*num_layers, state_is_tuple=True)cell = tf.nn.rnn_cell.DropoutWrapper(cell,output_keep_prob=keep_prob) 五、层标准化 (Layer Normalization)1、说明 Layer Normalization是受Batch Normalization的启发而来，针对于RNN，可以查看相关论文 Batch Normalization主要针对于传统的深度神经网络和CNN，关于Batch Normalization的操作和推导可以看我之前的博客 可以加快训练的速度，得到更好的结果等 2、代码 找到LSTMCell的源码拷贝一份修改即可 layer normalization函数 传入的tensor是二维的，对其进行batch normalization操作 tf.nn.moment是计算tensor的mean value和variance value 然后对其进行缩放(scale)和平移(shift)123456789101112131415'''layer normalization'''def ln(tensor, scope=None, epsilon=1e-5): assert(len(tensor.get_shape()) == 2) m, v = tf.nn.moments(tensor, [1], keep_dims=True) if not isinstance(scope, str): scope = '' with tf.variable_scope(scope+'layer_norm'): scale = tf.get_variable(name='scale', shape=[tensor.get_shape()[1]], initializer=tf.constant_initializer(1)) shift = tf.get_variable('shift', [tensor.get_shape()[1]], initializer=tf.constant_initializer(0)) LN_initial = (tensor - m) / tf.sqrt(v + epsilon) return LN_initial*scale + shift LSTMCell中的call方法i,j,f,o调用layer normalization操作 _linear函数中的bias设为False， 因为BN会加上shift123456789'''这里bias设置为false, 因为bn会加上shift'''lstm_matrix = _linear([inputs, m_prev], 4 * self._num_units, bias=False)i, j, f, o = array_ops.split( value=lstm_matrix, num_or_size_splits=4, axis=1)'''执行ln'''i = ln(i, scope = 'i/')j = ln(j, scope = 'j/')f = ln(f, scope = 'f/')o = ln(o, scope = 'o/') 构建计算图 可以选择RNN GRU LSTM Dropout Layer Normalization123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960'''最终的整合模型， - 普通RNN，GRU，LSTM - dropout - BN'''from LayerNormalizedLSTMCell import LayerNormalizedLSTMCell # 导入layer normalization的LSTMCell 文件def build_final_graph( cell_type = None, state_size = state_size, num_classes = num_classes, batch_size = batch_size, num_steps = num_steps, num_layers = 3, build_with_dropout = False, learning_rate = learning_rate): reset_graph() x = tf.placeholder(tf.int32, [batch_size, num_steps], name='x') y = tf.placeholder(tf.int32, [batch_size, num_steps], name='y') keep_prob = tf.placeholder(tf.float32, name='keep_prob') embeddings = tf.get_variable('embedding_matrix', [num_classes, state_size]) rnn_inputs = tf.nn.embedding_lookup(embeddings, x) if cell_type == 'GRU': cell = tf.nn.rnn_cell.GRUCell(state_size) elif cell_type == 'LSTM': cell = tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple=True) elif cell_type == 'LN_LSTM': cell = LayerNormalizedLSTMCell(state_size) # 自己修改的代码，导入对应的文件 else: cell = tf.nn.rnn_cell.BasicRNNCell(state_size) if build_with_dropout: cell = tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=keep_prob) init_state = cell.zero_state(batch_size, tf.float32) '''dynamic_rnn''' rnn_outputs, final_state = tf.nn.dynamic_rnn(cell, rnn_inputs, initial_state=init_state) with tf.variable_scope('softmax'): W = tf.get_variable('W', [state_size, num_classes]) b = tf.get_variable('b', [num_classes], initializer=tf.constant_initializer(0.0)) rnn_outputs = tf.reshape(rnn_outputs, [-1, state_size]) y_reshaped = tf.reshape(y, [-1]) logits = tf.matmul(rnn_outputs, W) + b predictions = tf.nn.softmax(logits) total_loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)) train_step = tf.train.AdamOptimizer(learning_rate).minimize(total_loss) return dict( x = x, y = y, keep_prob = keep_prob, init_state = init_state, final_state = final_state, total_loss = total_loss, train_step = train_step, preds = predictions, saver = tf.train.Saver() ) 六、生成文本1、说明 训练完成之后将计算图保存到本地磁盘，下次直接读取就可以了 我们给出第一个字符，RNN接着一个个生成字符，每次都是根据前一个字符 所以num_steps=1, batch_size=1（可以想象生成prediction的shape是(1, num_classes)中选择一个概率,–&gt; num_steps=1 ） 2、代码 构建图（直接传入参数即可）：g = build_final_graph(cell_type=&#39;LN_LSTM&#39;, num_steps=1, batch_size=1) 生成文本 读取训练好的文件 得到给出的第一个字符对应的数字 循环遍历要生成多少个字符， 每次循环生成一个字符123456789101112131415161718192021222324252627'''生成文本'''def generate_characters(g, checkpoint, num_chars, prompt='A', pick_top_chars=None): with tf.Session() as sess: sess.run(tf.global_variables_initializer()) g['saver'].restore(sess, checkpoint) # 读取文件 state = None current_char = vocab_to_idx[prompt] # 得到给出的字母对应的数字 chars = [current_char] for i in range(num_chars): # 总共生成多少数字 if state is not None: # 第一次state为None,因为计算图中定义了刚开始为0 feed_dict=&#123;g['x']: [[current_char]], g['init_state']: state&#125; # 传入当前字符 else: feed_dict=&#123;g['x']: [[current_char]]&#125; preds, state = sess.run([g['preds'],g['final_state']], feed_dict) # 得到预测结果（概率）preds的shape就是（1，num_classes） if pick_top_chars is not None: # 如果设置了概率较大的前多少个 p = np.squeeze(preds) p[np.argsort(p)[:-pick_top_chars]] = 0 # 其余的置为0 p = p / np.sum(p) # 因为下面np.random.choice函数p的概率和要求是1，处理一下 current_char = np.random.choice(vocab_size, 1, p=p)[0] # 根据概率选择一个 else: current_char = np.random.choice(vocab_size, 1, p=np.squeeze(preds))[0] chars.append(current_char) chars = map(lambda x: idx_to_vocab[x], chars) result = \"\".join(chars) print(result) return result 结果 由于训练耗时很长，这里使用LSTM训练了30个epoch，结果如下 可以自己调整参数，可能会得到更好的结果123456789101112131415161718192021222324252627282930313233ANKO: HFOFMFRone s the statlighte thithe thit.BODEN --I I's a tomir.I'tshis and on ar tald the theand this he sile be cares hat s ond tho fo hour he singe sime shind and somante tat ond treang tatsing of the an the to to fook.. Ir ard the with ane she stale..ANTE --KINEShow the ard and a beat the weringe be thing or.Bo hith tho he melan to the mute steres.The singer stis ard stis.BACE CANKONS CORESard the sids ing tho the the sackes tom theINWe stoe shit a dome thorate seomser hith.Thatthow oundTANTONT. SEAT THONTITE SERTI 1 23SHe the mathe a tomonerind is ingit ofres treacentit. Sher stard on this the tor an the candin he whor he sath heres andstha dortour tit thas stand. I'd and or a Reference https://r2rt.com/recurrent-neural-networks-in-tensorflow-ii.html https://karpathy.github.io/2015/05/21/rnn-effectiveness/ http://jmlr.org/proceedings/papers/v37/ioffe15.pdf tensorflow scan： https://www.tensorflow.org/api_docs/python/tf/scan https://www.youtube.com/watch?v=A6qJMB3stE4&amp;t=621s","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"RNN","slug":"RNN","permalink":"http://lawlite.me/tags/RNN/"},{"name":"LSTM","slug":"LSTM","permalink":"http://lawlite.me/tags/LSTM/"}]},{"title":"RNN-循环神经网络-02Tensorflow中的实现","date":"2017-06-16T12:59:28.000Z","path":"2017/06/16/RNN-循环神经网络-02Tensorflow中的实现/","text":"关于基本的RNN和LSTM的概念和BPTT算法可以查看这里 参考文章： https://r2rt.com/recurrent-neural-networks-in-tensorflow-i.html https://r2rt.com/styles-of-truncated-backpropagation.html 一、源代码实现一个binary例子1、例子描述(1) 数据描述 输入数据X是二进制的一串序列, 在t时刻，有50%的概率是1，50%的概率是0，比如：X=[1,1,0,0,1,0.....] 输出数据Y： 在时刻t，50%的概率是1，50%的概率是0； 如果$X_{t-3}$是1，则$Y_{t}$ 100%是1（增加50%）； 如果$X_{t-8}$是1，则$Y_{t}$ 25%是1（减少25%）； 所以如果$X_{t-3}$和$X_{t-8}$都是1，则$Y_{t}$ 50%+50%-25%=75%的概率是1 所以，输出数据是有两个依赖关系的 (2) 损失函数 使用cross-entropy损失函数进行训练 这里例子很简单，根据数据生成的规则，我们可以简单的计算一下不同情况下的cross-entropy值 [1] 如果rnn没有学到两个依赖关系, 则最终预测正确的概率是62.5%，cross entropy值为0.66计算如下 ${X_{t-3}}=\\{ {\\matrix{{1} \\rightarrow X_{t-8}=\\{ {\\matrix{{ 1 \\rightarrow 0.5+0.5-0.25=0.75} \\cr{ 0 \\rightarrow 0.5+0.5=1 \\quad \\quad \\quad \\quad} \\cr}} \\cr{0} \\rightarrow X_{t-8} = \\{ {\\matrix{{1 \\rightarrow 0.5-0.25=0.25 } \\quad \\quad\\cr{0 \\rightarrow 0.5 \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad} \\cr}}\\cr}}$ 所以正确预测1的概率为：(0.75+1+0.25+0.5)/4=0.625 所以cross entropy值为：-[plog(p)+(1-p)log(1-p)]=0.66 [2] 如果rnn学到第一个依赖关系，50%的情况下预测准确度为87.5%，50%的情况下预测准确度为62.5%，cross entropy值为0.52 因为X是随机生成，0/1各占50%,想象生成了很多的数，根据大数定律，50%的情况是1，对应到 [1] 中的上面的情况就是:(0.75+1)/2=0.875的概率预测正确，其余的50%就和[1]中一样了（去除学到的一个依赖，其余就是没有学到依赖）62.5% 损失值：-0.5 * (0.875 * .log(0.875) + 0.125 * log(0.125))-0.5 * (0.625 * np.log(0.625) + 0.375 * log(0.375)))=0.52 [3] 如果rnn两个依赖都学到了，则25%的情况下100%预测正确，25%的情况下50%预测正确，50%的情况向75%预测正确，cross entropy值为0.45 1/4的情况就是$X_{t-3}=1 和 X_{t-8}=0$ 100%预测正确 1/4的情况就是$X_{t-3}=0 和 X_{t-8}=0$ 50%预测正确 1/2的情况75%预测正确（0.5+0.5-0.25） 损失值：-0.50 * (0.75 * np.log(0.75) + 0.25 * np.log(0.25)) - 0.25 * (2 * 0.50 * np.log (0.50)) - 0.25 * (0) = 0.45 2、网络结构 根据时刻t的输入向量$X_t$和时刻t-1的状态向量state $S_{t-1}$计算得出当前的状态向量$S_t$和输出的结果概率向量$P_t$ Label数据是Y 所以有：$${S_t} = {tanh(W(X_t \\bigoplus S_{t-1})) + b_s}$$ $${P_t = softmax(US_t + b_p)}$$ 这里$\\bigoplus$表示向量的拼接 $W \\in R^{d \\times (2+d)}, {b_s} \\in R^d , U \\in R^{2 \\times d}, b_p \\in R^2$ d是 state 向量的长度 W是二维的矩阵，因为是将$X_t 和 S_{t-1}$拼接起来和W运算的，2对应输入的X one-hot之后，所以是2 U是最后输出预测的权值 初始化state $S_{-1}$ 为0向量 需要注意的是 cell 并不一定是只有一个neuron unit，而是有n个hidden units 下图的state size=4 3、Tensorflow中RNN BPTT实现方式1) 截断反向传播（truncated backpropagation） 假设我们训练含有1000000个数据的序列，如果全部训练的话，整个的序列都feed进RNN中，容易造成梯度消失或爆炸的问题 所以解决的方法就是truncated backpropagation，我们将序列截断来进行训练(num_steps) 2) tensorflow中的BPTT算法实现 一般截断的反向传播是：在当前时间t,往前反向传播num_steps步即可 如下图，长度为6的序列，截断步数是3 但是Tensorflow中的实现并不是这样(如下图) 它是将长度为6的序列分为了两部分，每一部分长度为3 前一部分计算得到的final state用于下一部分计算的initial state 所以tensorflow风格的反向传播并没有有效的反向传播num_steps步(对比一般的方式，依赖关系变的弱一些) 所以比如想要学习有8依赖关系的序列（我们的例子中就是），一般要设置的大于8 另外，有人做实验比较了两种方式here，发现一般的实现方式中的n步和Tensorflow中截断设置为2n的结果相似 3) 关于这个例子，tensorflow风格的实现 如下图，num_steps=5, state_size=4，就是截断反向传播的步数truncated backprop steps是5步，state_size就是cell中的神经元的个数 如果需要截断的步数增多，可以适当增加state_size来记录更多的信息 好比传统的神经网络，就是增加隐藏层的神经元个数 途中的注释是下面的列子代码中定义变量的shape, 可以对照参考 4、自己实现例子中的RNN 全部代码：https://github.com/lawlite19/Blog-Back-Up/blob/master/code/rnn/rnn_implement.py 1) 实现过程 导入包： 1234import numpy as npimport tensorflow as tffrom tensorflow.python import debug as tf_debugimport matplotlib.pyplot as plt 超参数 这里num_steps=5就是只能记忆5步, 所以只能学习到一个依赖(因为至少8步才能学到第二个依赖)，我们看结果最后的cross entropy是否在0.52左右123456'''超参数'''num_steps = 5batch_size = 200num_classes = 2state_size = 4learning_rate = 0.1 生成数据 就是按照我们描述的规则 123456789101112131415161718'''生成数据就是按照文章中提到的规则，这里生成1000000个'''def gen_data(size=1000000): X = np.array(np.random.choice(2, size=(size,))) Y = [] '''根据规则生成Y''' for i in range(size): threshold = 0.5 if X[i-3] == 1: threshold += 0.5 if X[i-8] == 1: threshold -=0.25 if np.random.rand() &gt; threshold: Y.append(0) else: Y.append(1) return X, np.array(Y) 生成batch数据，因为我们使用sgd训练 12345678910111213141516171819'''生成batch数据'''def gen_batch(raw_data, batch_size, num_step): raw_x, raw_y = raw_data data_length = len(raw_x) batch_patition_length = data_length // batch_size # -&gt;5000 data_x = np.zeros([batch_size, batch_patition_length], dtype=np.int32) # -&gt;(200, 5000) data_y = np.zeros([batch_size, batch_patition_length], dtype=np.int32) # -&gt;(200, 5000) '''填到矩阵的对应位置''' for i in range(batch_size): data_x[i] = raw_x[batch_patition_length*i:batch_patition_length*(i+1)]# 每一行取batch_patition_length个数，即5000 data_y[i] = raw_y[batch_patition_length*i:batch_patition_length*(i+1)] epoch_size = batch_patition_length // num_steps # -&gt;5000/5=1000 就是每一轮的大小 for i in range(epoch_size): # 抽取 epoch_size 个数据 x = data_x[:, i * num_steps:(i + 1) * num_steps] # -&gt;(200, 5) y = data_y[:, i * num_steps:(i + 1) * num_steps] yield (x, y) # yield 是生成器，生成器函数在生成值后会自动挂起并暂停他们的执行和状态（最后就是for循环结束后的结果，共有1000个(x, y)）def gen_epochs(n, num_steps): for i in range(n): yield gen_batch(gen_data(), batch_size, num_steps) 定义RNN的输入 这里每个数需要one-hot处理 unstack方法就是将n维的数据拆成若开个n-1的数据，axis指定根据哪个维度拆的，比如(200,5,2)三维数据，按axis=1会有5个(200,2)的二维数据1234567'''定义placeholder'''x = tf.placeholder(tf.int32, [batch_size, num_steps], name=\"x\")y = tf.placeholder(tf.int32, [batch_size, num_steps], name='y')init_state = tf.zeros([batch_size, state_size])'''RNN输入'''x_one_hot = tf.one_hot(x, num_classes)rnn_inputs = tf.unstack(x_one_hot, axis=1) 定义RNN的cell（关键步骤） 这里关于name_scope和variable_scope的用法可以查看这里12345678910'''定义RNN cell'''with tf.variable_scope('rnn_cell'): W = tf.get_variable('W', [num_classes + state_size, state_size]) b = tf.get_variable('b', [state_size], initializer=tf.constant_initializer(0.0)) def rnn_cell(rnn_input, state): with tf.variable_scope('rnn_cell', reuse=True): W = tf.get_variable('W', [num_classes+state_size, state_size]) b = tf.get_variable('b', [state_size], initializer=tf.constant_initializer(0.0)) return tf.tanh(tf.matmul(tf.concat([rnn_input, state],1),W) + b) 将cell添加到计算图中 1234567'''将rnn cell添加到计算图中'''state = init_staternn_outputs = []for rnn_input in rnn_inputs: state = rnn_cell(rnn_input, state) # state会重复使用，循环 rnn_outputs.append(state)final_state = rnn_outputs[-1] # 得到最后的state 定义预测，损失函数，和优化方法 sparse_softmax_cross_entropy_with_logits会自动one-hot1234567891011'''预测，损失，优化'''with tf.variable_scope('softmax'): W = tf.get_variable('W', [state_size, num_classes]) b = tf.get_variable('b', [num_classes], initializer=tf.constant_initializer(0.0))logits = [tf.matmul(rnn_output, W) + b for rnn_output in rnn_outputs]predictions = [tf.nn.softmax(logit) for logit in logits]y_as_list = tf.unstack(y, num=num_steps, axis=1)losses = [tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label,logits=logit) for logit, label in zip(logits, y_as_list)]total_loss = tf.reduce_mean(losses)train_step = tf.train.AdagradOptimizer(learning_rate).minimize(total_loss) 训练网络 123456789101112131415161718192021'''训练网络'''def train_rnn(num_epochs, num_steps, state_size=4, verbose=True): with tf.Session() as sess: sess.run(tf.global_variables_initializer()) #sess = tf_debug.LocalCLIDebugWrapperSession(sess) training_losses = [] for idx, epoch in enumerate(gen_epochs(num_epochs, num_steps)): training_loss = 0 training_state = np.zeros((batch_size, state_size)) # -&gt;(200, 4) if verbose: print('\\nepoch', idx) for step, (X, Y) in enumerate(epoch): tr_losses, training_loss_, training_state, _ = \\ sess.run([losses, total_loss, final_state, train_step], feed_dict=&#123;x:X, y:Y, init_state:training_state&#125;) training_loss += training_loss_ if step % 100 == 0 and step &gt; 0: if verbose: print('第 &#123;0&#125; 步的平均损失 &#123;1&#125;'.format(step, training_loss/100)) training_losses.append(training_loss/100) training_loss = 0 return training_losses 显示结果 1234training_losses = train_rnn(num_epochs=1, num_steps=num_steps, state_size=state_size)print(training_losses[0])plt.plot(training_losses)plt.show() 2) 实验结果 num_steps=5, state=4 可以看到初试的损失值大约0.66, 最后学到一个依赖关系，最终损失值0.52左右 num_step=10, state=16 学到了两个依赖，最终损失值接近0.45 5、使用Tensorflow的cell实现1) 使用static rnn方式 将我们之前自己实现的cell和添加到计算图中步骤改为如下即可 123cell = tf.contrib.rnn.BasicRNNCell(num_units=state_size)rnn_outputs, final_state = tf.contrib.rnn.static_rnn(cell=cell, inputs=rnn_inputs, initial_state=init_state) 2) 使用dynamic_rnn方式 这里仅仅替换cell就不行了，RNN输入 直接就是三维的形式12'''RNN输入'''rnn_inputs = tf.one_hot(x, num_classes) 使用dynamic_rnn 12cell = tf.contrib.rnn.BasicRNNCell(num_units=state_size)rnn_outputs, final_state = tf.nn.dynamic_rnn(cell, rnn_inputs, initial_state=init_state) 预测，损失 由于rnn_inputs是三维的，所以先转成二维的，计算结束后再转换回三维[batch_size, num_steps, num_classes]12345678910 '''因为rnn_outputs是三维的，这里需要将其转成2维的， 矩阵运算后再转换回来[batch_size, num_steps, num_classes]'''logits = tf.reshape(tf.matmul(tf.reshape(rnn_outputs, [-1, state_size]), W) +b, \\ shape=[batch_size, num_steps, num_classes])predictions = tf.nn.softmax(logits)y_as_list = tf.unstack(y, num=num_steps, axis=1)losses = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y,logits=logits)total_loss = tf.reduce_mean(losses)train_step = tf.train.AdagradOptimizer(learning_rate).minimize(total_loss) Reference https://r2rt.com/recurrent-neural-networks-in-tensorflow-i.html https://r2rt.com/styles-of-truncated-backpropagation.html https://web.stanford.edu/class/psych209a/ReadingsByDate/02_25/Williams%20Zipser95RecNets.pdf","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"RNN","slug":"RNN","permalink":"http://lawlite.me/tags/RNN/"}]},{"title":"RNN-循环神经网络和LSTM_01基础","date":"2017-06-14T15:42:32.000Z","path":"2017/06/14/RNN-循环神经网络和LSTM-01基础/","text":"一、介绍1、什么是RNN 传统的神经网络是层与层之间是全连接的，但是每层之间的神经元是没有连接的（其实是假设各个数据之间是独立的） 这种结构不善于处理序列化的问题。比如要预测句子中的下一个单词是什么，这往往与前面的单词有很大的关联，因为句子里面的单词并不是独立的。 RNN 的结构说明当前的的输出与前面的输出也有关，即隐层之间的节点不再是无连接的，而是有连接的 基本的结构如图，可以看到有个循环的结构，将其展开就是右边的结构 2、运算说明 如上图，输入单元(inputs units): $\\{ {x_0},{x_1}, \\cdots \\cdots ,{x_t},{x_{t + 1}}, \\cdots \\cdots \\}$, 输出单元(output units)为：$\\{ {o_0},{o_1}, \\cdots \\cdots ,{o_t},{o_{t + 1}}, \\cdots \\cdots \\}$, 隐藏单元(hidden units)输出集: $\\{ {s_0},{s_1}, \\cdots \\cdots ,{ost},{s_{t + 1}}, \\cdots \\cdots \\}$ 时间 t 隐层单元的输出为：${s_t} = f(U{x_t} + W{s_{t - 1}})$ f就是激励函数，一般是sigmoid,tanh, relu等 计算${s_{0}}$时，即第一个的隐藏层状态，需要用到${s_{-1}}$，但是其并不存在，在实现中一般置为0向量 （如果将上面的竖着立起来，其实很像传统的神经网络，哈哈） 时间 t 的输出为：${o_t}=Softmax(V{s_t})$ 可以认为隐藏层状态${s_t}$是网络的记忆单元. ${s_t}$包含了前面所有步的隐藏层状态。而输出层的输出${o_t}$只与当前步的${s_t}$有关。 （在实践中，为了降低网络的复杂度，往往${s_t}$只包含前面若干步而不是所有步的隐藏层状态） 在RNNs中，每输入一步，每一层都共享参数U,V,W，（因为是将循环的部分展开，天然应该相等） RNNs的关键之处在于隐藏层，隐藏层能够捕捉序列的信息。 3、应用方面 循环神经网络(Recurrent Neural Networks，RNNs)已经在众多自然语言处理(Natural Language Processing, NLP)中取得了巨大成功以及广泛应用。目前使用最广泛最成功的模型便是LSTMs(Long Short-Term Memory，长短时记忆模型)模型(1) 语言模型和文本生成 给定一个单词序列，根据前面的单词预测下面单词的可能性 也可以根据概率生成新的词 这里给出了3篇论文 Recurrent neural network based language model Extensions of Recurrent neural network based language model Generating Text with Recurrent Neural Networks(2) 机器翻译 和上面的语言模型很像，只不过是根据一段过生成另外的一段话 注意的是开始的输出是在全部输入结束后生成的 一些论文 A Recursive Recurrent Neural Network for Statistical Machine Translation Sequence to Sequence Learning with Neural Networks (3) 语音识别 论文 Towards End-to-End Speech Recognition with Recurrent Neural Networks(4) 图像描述生成 根据图像，生成一段描述图像的话 需要和CNN结合使用 二、结构1、One to One 即一个输入对应一个输出，就是上面的图2、Many to One 即多个输入对应一个输出，比如情感分析，一段话中很多次，判断这段话的情感 其中$x_{1},x_{2},\\ldots,x_{t}$表示句子中的t个词，o代表最终输出的情感标签 前向计算就是：$$f(x)=Vs_{t}=V(Ux_{t}+Ws_{t-1})=V(Ux_{t}+W(Ux_{t-1}+Ws_{t-2}))\\cdots$$3、One to Many 前向计算类似，不再给出4、Many to Many 前向计算类似，不再给出5、双向RNN（Bidirectional RNN） 比如翻译问题往往需要联系上下文内容才能正确的翻译，我们上面的结构线性传递允许“联系上文”，但是联系下文并没有，所以就有双向RNN 前向运算稍微复杂一点，以t时刻为例$o_{t} = W_t^{(os)}s_t + W_t^{(oh)}h_t \\\\\\quad = W_t^{(os)} (W_{t-1}^{(ss)} s_{t-1} + W_{t}^{(sx)} x_{t-1}) + W_t^{(oh)} (W_t^{(hh)} h_{t+1} + W_t^{(hx)}x_t)$ 6、深层的RNN 上面的结构都是只含有一层的state层，根据传统NN和CNN，深层次的结构有更加号的效果，结构如图 三、Back Propagation Through Time(BPTT)训练 关于传统神经网络BP算法可以查看这里神经网络部分的推导1、符号等说明 以下图为例 符号说明 $\\phi$………………………………………………隐藏层的激励函数 $\\varphi$………………………………………………输出层的变换函数 $L_{t} = L_{t}\\left( o_{t},y_{t} \\right)$……………………………模型的损失函数 标签数据$y_{t}$是一个 one-hot 向量 2、反向传播过程 接受完序列中所有样本后再统一计算损失，此时模型的总损失可以表示为（假设输入序列长度为n）：$$L = \\sum_{t = 1}^{n}L_{t}$$ $o_{t} = \\varphi(Vs_t) = \\varphi(V(Ux_t + Ws_{t-1}))$ 其中$s_{0} = \\mathbf{0 =}( 0,0,\\ldots,0 )^{T}$ 令：${o_{t}^* = Vs_{t}}, \\quad {s_{t}^{*} = Ux_{t} + Ws_{t - 1}}…………(1)$ (就是没有经过激励函数和变换函数前) 则：$o_{t} = \\varphi( o_{t}^*)$ $s_{t} = \\phi(s_{t}^{*})$ (1) 矩阵V的更新 对矩阵 V 的更新过程,根据(1)式可得， (和传统的神经网络一致，根据求导的链式法则): $${{{\\partial {L_t} \\over \\partial o_t^{\\ast}}} = {{\\partial L_t \\over \\partial o_t } \\ast {\\partial o_t \\over \\partial o_{t}^{\\ast} }} = {{\\partial L_t \\over \\partial o_t} \\ast \\varphi ^{'} (o_t^{\\ast})}}$$ $${{{\\partial L_t} \\over {\\partial V }}} = {{\\partial L_t \\over \\partial Vs_t} } \\ast {{\\partial Vs_t \\over \\partial V}} = {{\\partial L_t \\over \\partial o_t^\\ast}} \\times s_t^T = ({{\\partial L_t \\over \\partial o_t} \\ast \\varphi ^{'} (o_{t}^\\ast)}) \\times s_t^T$$ - 因为${L = \\sum_{t = 1}^{n}L_{t}}$，所以对矩阵V的更新对应的导数:$${{\\partial L \\over \\partial V} = {\\sum\\limits_{t=1}^n ({\\partial L_t \\over \\partial o_t} \\ast \\varphi ^{'} (o_t^\\ast)) \\times s_t^T}}$$ (2) 矩阵U和W的更新 RNN 的 BP 算法的主要难点在于它 State 之间的通信 可以采用循环的方法来计算各个梯度，t应从n开始降序循环至 1 计算时间通道上的局部梯度（同样根据链式法则）$$ {{\\partial L_t \\over \\partial s_t^{\\ast}}} = {{\\partial L_t \\over \\partial Vs_t}} \\times {{\\partial s_t^{T} V_t^{T} \\over \\partial s_t}} \\ast {{\\partial s_t \\over \\partial s_t^{\\ast}}} = V^T \\times ({{\\partial L_t \\over \\partial o_t}} * {\\varphi ^{‘} (o_t^{\\ast}))} $$ $$ {{\\partial L_t \\over \\partial s_{k-1}^\\ast}} ={{\\partial s_k^\\ast \\over \\partial s_{k-1}^\\ast}} \\times {{\\partial L_t \\over \\partial s_{k}^\\ast}} = W_T \\times ({{\\partial L_t \\over \\partial s_k^\\ast} * {\\phi ^{'} (s_{k-1}^\\ast)}}) , (k=1,……,t) ………(2)$$ 利用局部梯度计算U和W的梯度 这里累加是因为权值是共享的，所以往前推算一直用的是一样的权值$${\\partial L_t \\over \\partial U} + = {\\sum\\limits_{k=1}^t {\\partial L_t \\over \\partial s_k^\\ast} \\times {\\partial s_k^\\ast \\over \\partial U}} = {\\sum\\limits_{k=1}^t {\\partial L_t\\over \\partial s_k^\\ast}} \\times x_t^T $$$${\\partial L_t \\over \\partial W} + = {\\sum\\limits_{k=1}^t {\\partial L_t \\over \\partial s_k^\\ast} \\times {\\partial s_k^\\ast \\over \\partial W}} = {\\sum\\limits_{k=1}^t {\\partial L_t\\over \\partial s_k^\\ast}} \\times s_{t-1}^T ………………..(3)$$ 3、训练问题 从 公式(2)和(3) 中可以看出，时间维度上的权重W更新需要计算$\\phi^{‘} (s_k^{\\ast})$，即经过激励函数的导数 如果时间维度上很长，则这个梯度是累积的，所以造成梯度消失或爆炸 可以想象将结构图竖起来，就是一个深层的神经网络，所以容易出现梯度问题 关于梯度消失的问题可以查看我这里一遍博客 RNN 主要的作用就是能够记住之前的信息，但是梯度消失的问题又告诉我们不能记住太久之前的信息，改进的思路有两点 一是使用一些trick,比如合适的激励函数，初始化，BN等等 二是改进state的传递方式，比如就是下面提及的LSTM 关于为何 LSTMs 能够解决梯度消失，直观上来说就是上方时间通道是简单的线性组合 四、Long Short-Term Memory(LSTM，长短时记忆网络)1、介绍 LSTM 是一般 RNN 的升级，因为一些序列问题，我们可能需要忘记一些东西， LSTM 和普通 RNN 相比, 多出了三个控制器. (输入控制, 输出控制, 忘记控制) 在LSTM里，这个叫做cell（其实就是前面的state,只是这里更加复杂了）, 可以看作一个黑盒，这个cell结合前面cell的输出$h_{t-1}$和当前的输入$x_{t}$来决定是否记忆下来，该网络结构在对长序列依赖问题中非常有效 2、结构 一个经典的cell结构如下图 $\\phi_{1} $是sigmoid函数，$\\phi_{2}$ 是tanh函数 *表示 element wise 乘法(就是点乘)，使用X表示矩阵乘法 LSTMs 的 cell 的时间通道有两条。 上方的时间通道（$h^{\\left( {old} \\right)} \\rightarrow h^{\\left( {new} \\right)}$）仅包含了两个代数运算,这意味着它信息传递的方式会更为直接 $$h^{(new)} = h^{(old)}*r_1 + r_2$$ 位于下方的时间通道（$s^{\\left( {old} \\right)} \\rightarrow s^{\\left( {new} \\right)}$）则运用了大量的层结构,在 LSTMs 中，我们通常称这些层结构为门（Gates） 3、运算说明 Sigmoid 函数取值区间为 0-1，那么当 Sigmoid 对应的层结构输出 0 时，就对应着遗忘这个过程；当输出 1 时，自然就对应着接受这个过程。 事实上这也是 Sigmoid 层叫门的原因——它能决定“放哪些数据进来”和决定“不让哪些数据通过” 最左边的Sigmoid gate 叫做遗忘门, 控制着时间通道信息的遗忘程度 前向计算: $r_1 = \\phi_1(W_1 \\times x^*)$ 其中 $x^* \\buildrel \\Delta \\over =[x,s^{(old)}] $，表示当前输入样本和下方时间通道$s^{(old)}$连接(concat)起来 第二个 Sigmoid Gate 通常被称为输入门（Input Gate）, 控制着当前输入和下方通道信息对上方通道信息的影响 前向运算为：$g_{1} = \\phi_{1} ( W_{2} \\times x^{*} )$, 第三个 Tanh Gate 则允许网络结构驳回历史信息, 因为tanh的值域是(-1,1) 前向运算为：$g_{2} = \\phi_{2} ( W_{3} \\times x^{*} )$ $r_{2} = g_{1}*g_{2}$ 第四个 Sigmoid Gate 通常被称为输出门（Output Gate），它为输出和传向下一个 cell 的下方通道信息作出了贡献。 对应的前向传导算法为：$g_{3} = \\phi_{1}\\left( W_{4} \\times x^{*} \\right)$ 最终cell的输出为：$o = s^{\\left( \\text{new} \\right)} = \\phi_{2}\\left( h^{\\left( \\text{new} \\right)} \\right)*g_{3}$ 每个 Gate 对应的权值矩阵是不同的（$W_{1}\\sim W_{4}$），切勿以为它们会共享权值 Reference http://www.wildml.com/2015/09/recurrent-neural-networks-tutorial-part-1-introduction-to-rnns/ http://www.wildml.com/2015/09/recurrent-neural-networks-tutorial-part-2-implementing-a-language-model-rnn-with-python-numpy-and-theano/ https://zhuanlan.zhihu.com/p/26891871 https://zhuanlan.zhihu.com/p/26892413","comments":true,"tags":[{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"RNN","slug":"RNN","permalink":"http://lawlite.me/tags/RNN/"},{"name":"LSTM","slug":"LSTM","permalink":"http://lawlite.me/tags/LSTM/"}]},{"title":"Seaborn绘图","date":"2017-06-14T13:25:43.000Z","path":"2017/06/14/Seaborn绘图/","text":"全部代码：https://github.com/lawlite19/Blog-Back-Up/blob/master/code/seaborn_study.py 一、介绍与安装1、介绍 官网：http://seaborn.pydata.org/index.html Github: https://github.com/mwaskom/seaborn Seaborn 其实是在matplotlib的基础上进行了更高级的 API 封装，从而使得作图更加容易 在大多数情况下使用seaborn就能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充2、安装 直接 pip3 install seaborn即可 二、分布图1、distplot 导入包 1234567#-*- coding: utf-8 -*-import numpy as npimport pandas as pdimport matplotlib as mplimport matplotlib.pyplot as pltimport seaborn as sns#%matplotlib inline # 为了在jupyter notebook里作图，需要用到这个命令 加载 seaborn中的数据集：tips = sns.load_dataset(&#39;tips&#39;) 分布图 kde是高斯分布密度图，绘图在0-1之间 hist是否画直方图 rug在X轴上画一些分布线 fit可以制定某个分布进行拟合 label legend时的值 axlabel制定横轴的说明12345sns.distplot(tips['total_bill'], bins=None, hist=True, kde=False, rug=True, fit=None, hist_kws=None, kde_kws=None, rug_kws=None, fit_kws=None, color=None, vertical=False, norm_hist=False, axlabel=None, label=None, ax=None)sns.plt.show() 拟合分布 这里使用了gamma分布拟合123from scipy import statssns.distplot(tips.total_bill, fit=stats.gamma, kde=False)sns.plt.show() 2、kdeplot 高斯概率密度图 data2可以是二维的分布 shade是否填充 kernel核函数，还有很多核函数，比如cos, biw等 cumulative累积的作图，最后的值应该是接近1 gridsize多少个点估计 123456ax = sns.kdeplot(tips['total_bill'], data2=tips.tip, shade=False, vertical=False, kernel=\"gau\", bw=\"scott\", gridsize=100, cut=3, clip=None, legend=True, cumulative=False, shade_lowest=True, ax=None)sns.plt.show() 二、pairplot1、两两作图 iris 为例 data: DataFrame格式的数据 hue: label类别对应的column name vars: 指定feature的列名 kind: 作图的方式，可以是reg或scatter diag_kind: 对角线作图的方式，可以是hist或kde123456789iris = sns.load_dataset('iris')g = sns.pairplot(iris, hue='species', hue_order=None, palette=None, vars=list(iris.columns[0:-1]), x_vars=None, y_vars=None, kind=\"reg\", diag_kind=\"hist\", markers=['o','s','D'], size=1.5, aspect=1, dropna=True, plot_kws=None, diag_kws=None, grid_kws=None)sns.plt.show() 三、stripplot和swarmplot1、stripplot tips为例，查看每天的数据信息 x: X轴数据 y: Y轴数据 hue: 区分不同种类数据的column name data: DataFrame类型数据 jitter: 将数据分开点，防止重叠1234567tips = sns.load_dataset('tips')ax = sns.stripplot(x='day', y='total_bill', hue=None, data=tips, order=None, hue_order=None, jitter=True, split=False, orient=None, color=None, palette=None, size=5, edgecolor=\"gray\", linewidth=0, ax=None) 查看关于性别消费的信息 123456ax = sns.stripplot(x='sex', y='total_bill', hue='day', data=tips, order=None, hue_order=None, jitter=True, split=False, orient=None, color=None, palette=None, size=5, edgecolor=\"gray\", linewidth=0, ax=None) 2、swarmplot 与stripplot类似，只是数据点不会重叠 (适合小数据量) 123tips = sns.load_dataset('tips')ax = sns.swarmplot(x='sex', y='total_bill', hue='day', data=tips)sns.plt.show() 四、boxplot1、boxplot示意图 函数 x, y：指定X轴，Y轴的columns name值 hue: 指定要区分的类别12345678tips = sns.load_dataset('tips')ax = sns.boxplot(x='day', y='total_bill', hue=None, data=tips, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=.75, width=.8, fliersize=5, linewidth=None, whis=1.5, notch=False, ax=None)sns.plt.show() 可以和上面的stripplot一起用 12345678910111213tips = sns.load_dataset('tips')ax = sns.boxplot(x='day', y='total_bill', hue=None, data=tips, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=.75, width=.8, fliersize=5, linewidth=None, whis=1.5, notch=False, ax=None)sns.stripplot(x='day', y='total_bill', hue=None, data=tips, order=None, hue_order=None, jitter=True, split=False, orient=None, color=None, palette=None, size=5, edgecolor=\"gray\", linewidth=0, ax=None)sns.plt.show() 五、jointplot1、jointplot 联合作图 kind: 有scatter” | “reg” | “resid” | “kde” | “hex12345678910tips = sns.load_dataset('tips')from scipy import statsg = sns.jointplot(x='total_bill', y='tip', data=tips, kind=\"reg\", stat_func=stats.pearsonr, color=None, size=6, ratio=5, space=.2, dropna=True, xlim=None, ylim=None, joint_kws=None, marginal_kws=None, annot_kws=None)sns.plt.show() 可以在基础上再作图 plot_joint就是在联合分布上作图 plot_marginals就是在边缘分布上再作图1g = (sns.jointplot(x='total_bill', y='tip',data=tips).plot_joint(sns.kdeplot)) 六、violinplot1、小提琴图，和boxplot很像 对称的kde图 中间的白点是中位数，黑色粗线对应分位数 inner: 指定图里面用什么划分，有&quot;box&quot;, &quot;quartile&quot;, &quot;point&quot;, &quot;stick&quot;, None quartile为四分位数划分 stick很像rug，就是可以看出密度情况 scale: 缩放每个图对应的area, 取值有 &quot;area&quot;, &quot;count&quot;, &quot;width&quot; area指定每个有相同的area count会按数量缩放（数量少的就比较窄扁）123456789101112tips = sns.load_dataset('tips')ax = sns.violinplot(x='day', y='total_bill', hue='smoker', data=tips, order=None, hue_order=None, bw=\"scott\", cut=2, scale=\"area\", scale_hue=True, gridsize=100, width=.8, inner=\"quartile\", split=False, orient=None, linewidth=None, color=None, palette='muted', saturation=.75, ax=None) sns.plt.show() 七、pointplot, bar1、pointplot 点图 estimator：点的取值是，默认是np.mean123456789tips = sns.load_dataset('tips')sns.pointplot(x='time', y='total_bill', hue='smoker', data=tips, order=None, hue_order=None, estimator=np.mean, ci=95, n_boot=1000, units=None, markers=\"o\", linestyles=\"-\", dodge=False, join=True, scale=1, orient=None, color=None, palette=None, ax=None, errwidth=None, capsize=None)sns.plt.show() 2、barplot 条形图 y轴是mean value，和点图其实差不多12345678tips = sns.load_dataset('tips')sns.barplot(x='day', y='total_bill', hue='sex', data=tips, order=None, hue_order=None, estimator=np.mean, ci=95, n_boot=1000, units=None, orient=None, color=None, palette=None, saturation=.75, errcolor=\".26\", errwidth=None, capsize=None, ax=None)sns.plt.show() 3、countplot123tips = sns.load_dataset('tips')sns.countplot(x='day', hue='sex', data=tips)sns.plt.show() 八、factorplot1、可以通过这个函数绘制以上几种图 指定kind即可，有point, bar, count, box, violin, strip row和col指定绘制的行数和列数，给出一个种类类型的列名即可 1234567891011121314titanic = sns.load_dataset('titanic')sns.factorplot(x='age', y='embark_town', hue='sex', data=titanic, row='class', col='sex', col_wrap=None, estimator=np.mean, ci=95, n_boot=1000, units=None, order=None, hue_order=None, row_order=None, col_order=None, kind=\"box\", size=4, aspect=1, orient=None, color=None, palette=None, legend=True, legend_out=True, sharex=True, sharey=True, margin_titles=False, facet_kws=None)sns.plt.show() 九、heatmap1、heatmap1234flight = sns.load_dataset('flights')flights = flight.pivot('month','year','passengers')sns.heatmap(flights, annot=True, fmt='d')sns.plt.show() 十、时序绘图1、tsplot condition: 和hue差不多，指定类别 estimator: 默认为np.mean12345678gammas = sns.load_dataset('gammas')sns.tsplot(data=gammas, time='timepoint', unit='subject', condition='ROI', value='BOLD signal', err_style=\"ci_band\", ci=68, interpolate=True, color=None, estimator=np.mean, n_boot=5000, err_palette=None, err_kws=None, legend=True, ax=None)sns.plt.show() Reference Youtube: https://www.youtube.com/playlist?list=PLgJhDSE2ZLxYlhQx0UfVlnF1F7OWF-9rp Github: https://github.com/knathanieltucker/seaborn-weird-parts","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"可视化","slug":"可视化","permalink":"http://lawlite.me/tags/可视化/"}]},{"title":"Hexo+yilia主题实现文章目录和添加视频","date":"2017-04-17T07:00:21.000Z","path":"2017/04/17/Hexo-yilia主题实现文章目录和添加视频/","text":"一、说明 文章目录功能可以点击这里查看 视频页面可以点击这里查看 粗略实现，有问题可以在下方评论区留言，或者留言板留言 二、文章目录功能1、添加CSS样式 打开themes\\yilia\\source下的main.234bc0.css文件，添加如下代码： css样式我也放到了github上：https://raw.githubusercontent.com/lawlite19/Blog-Back-Up/master/css/main.234bc0.css 使用的是别人的css，可能有冗余的部分 12345678910/* 新添加的 */#container .show-toc-btn,#container .toc-article&#123;display:block&#125;.toc-article&#123;z-index:100;background:#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px&#125;.toc-article .toc-close&#123;font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc&#125;.toc-article .toc-close:hover&#123;color:#000&#125;.toc-article .toc&#123;font-size:12px;padding:0;line-height:20px&#125;.toc-article .toc .toc-number&#123;color:#333&#125;.toc-article .toc .toc-text:hover&#123;text-decoration:underline;color:#2a6496&#125;.toc-article li&#123;list-style-type:none&#125;.toc-article .toc-level-1&#123;margin:4px 0&#125;.toc-article .toc-child&#123;&#125;@-moz-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-webkit-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-o-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;.show-toc-btn&#123;display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9&#125;.show-toc-btn .btn-bg&#123;margin-top:2px;display:block;width:16px;height:14px;background:url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%&#125;.show-toc-btn .btn-text&#123;color:#999;font-size:12px&#125;.show-toc-btn:hover&#123;cursor:pointer&#125;.show-toc-btn:hover .btn-bg&#123;background-position:0 -16px&#125;.show-toc-btn:hover .btn-text&#123;font-size:12px;color:#ea8010&#125;.toc-article li ol, .toc-article li ul &#123; margin-left: 30px;&#125;.toc-article ol, .toc-article ul &#123; margin: 10px 0;&#125; 2、修改article.ejs文件 使用的是Hexo的toc函数 打开themes\\yilia\\layout\\_partial文件夹下的article.ejs文件 在&lt;/header&gt; &lt;% } %&gt;下面加入如下内容（注意位置） 123456789101112131415161718192021222324252627&lt;!-- 目录内容 --&gt;&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;p class=\"show-toc-btn\" id=\"show-toc-btn\" onclick=\"showToc();\" style=\"display:none\"&gt; &lt;span class=\"btn-bg\"&gt;&lt;/span&gt; &lt;span class=\"btn-text\"&gt;文章导航&lt;/span&gt; &lt;/p&gt; &lt;div id=\"toc-article\" class=\"toc-article\"&gt; &lt;span id=\"toc-close\" class=\"toc-close\" title=\"隐藏导航\" onclick=\"showBtn();\"&gt;×&lt;/span&gt; &lt;strong class=\"toc-title\"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; function showToc()&#123; var toc_article = document.getElementById(\"toc-article\"); var show_toc_btn = document.getElementById(\"show-toc-btn\"); toc_article.setAttribute(\"style\",\"display:block\"); show_toc_btn.setAttribute(\"style\",\"display:none\"); &#125;; function showBtn()&#123; var toc_article = document.getElementById(\"toc-article\"); var show_toc_btn = document.getElementById(\"show-toc-btn\"); toc_article.setAttribute(\"style\",\"display:none\"); show_toc_btn.setAttribute(\"style\",\"display:block\"); &#125;; &lt;/script&gt; &lt;% &#125; %&gt; &lt;!-- 目录内容结束 --&gt; 然后若想要文章显示目录，在每篇文章开头加入：toc: true 3、最终效果(1) 电脑端 (2) 手机端 三、添加视频 是在之前相册功能的基础之上，相册功能的实现点击这里查看 1、添加视频样式css 打开当前博客source\\photos文件夹下的ins.css文件 加入如下内容 123456789/* ====== video ===== */.video-container &#123;z-index: 1;position: relative;padding-bottom: 56.25%;margin: 0 auto;&#125;.video-container iframe, .video-container object, .video-container embed &#123;z-index: 1;position: absolute;top: 0;left: 7%;width: 85%;height: 85%;box-shadow: 0px 0px 20px 2px #888888;&#125; 2、添加视频 我这里添加的是优酷上面的视频 在当前博客source\\photos文件夹下建立videos.ejs文件 内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849---layout: postslug: \"photos\"title: \"相册\"noDate: \"true\"comments: \"true\"reward: \"true\"open_in_new: false---&lt;link rel=\"stylesheet\" href=\"./ins.css\"&gt;&lt;div class=\"photos-btn-wrap\"&gt; &lt;a class=\"photos-btn\" href=\"/photos\"&gt;Photos&lt;/a&gt; &lt;a class=\"photos-btn active\" href=\"/photos/videos.html\"&gt;Videos&lt;/a&gt;&lt;/div&gt;&lt;center&gt;&lt;h1&gt;指弹_女儿情&lt;/h1&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;div class=\"video-container\"&gt;&lt;iframe height=\"80%\" width=\"80%\" src=\"http://player.youku.com/embed/XMjUzMzY4OTM3Ng==\" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;h1&gt;指弹_友谊地久天长&lt;/h1&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;div class=\"video-container\"&gt;&lt;iframe height=\"80%\" width=\"80%\" src=\"http://player.youku.com/embed/XMjQ5MDExOTY2MA==\" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;h1&gt;指弹_Always with me&lt;/h1&gt;&lt;/center&gt;&lt;hr/&gt;&lt;center&gt;&lt;div class=\"video-container\"&gt;&lt;iframe height=\"80%\" width=\"80%\" src=\"http://player.youku.com/embed/XMjQ4MDQyNTQ0MA==\" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/center&gt; 3、最终效果(1) 电脑端 (2) 手机端","comments":true,"tags":[{"name":"Github","slug":"Github","permalink":"http://lawlite.me/tags/Github/"}]},{"title":"Hexo+Github实现相册功能","date":"2017-04-13T12:27:03.000Z","path":"2017/04/13/Hexo-Github实现相册功能/","text":"最终效果请看这里：http://lawlite.me/photos/ 粗略实现，有问题可以在下方评论区评论，或者留言区留言 一、说明1、关于 我使用的主题是hexo-theme-yilia，其中实现相册功能的方案是同步instagram上面的图片，但是现在instagram被禁，不能使用了 下面是通过自己的方式实现了相册功能，其中的样式还是使用该主题提供的2、方案 在github上新建一个仓库，主要用于存储图片，可以通过url访问到，也方便管理 将要放到相册的图片处理成json格式的数据，然后进行访问，这里json的格式需要配合要使用的样式，所以需要处理成特定格式的json数据，下面会给出 图片裁剪，因为相册显示的样式最好是正方形的的图片，这里使用脚本处理一下 图片压缩，相册显示的图片是压缩后的图片，提高加载的速度，打开后的图片是原图。 二、实现1、github操作 建立一个用于存储相册的仓库，我这里建立了名为Blog-Back-Up的仓库 关于git的命令行操作和配置不再给出 2、博客操作 在博客的source文件夹下建立一个photos文件夹 将样式文件放到photos文件夹下，样式文件我都放到了github上：https://github.com/lawlite19/Blog-Back-Up/tree/master/blog_photos_copy 修改ins.js文件，主要是里面的render函数 其中的url对应到你的github放图片的地址1234567891011121314151617181920212223var render = function render(res) &#123; var ulTmpl = \"\"; for (var j = 0, len2 = res.list.length; j &lt; len2; j++) &#123; var data = res.list[j].arr; var liTmpl = \"\"; for (var i = 0, len = data.link.length; i &lt; len; i++) &#123; var minSrc = 'https://raw.githubusercontent.com/lawlite19/blog-back-up/master/min_photos/' + data.link[i]; var src = 'https://raw.githubusercontent.com/lawlite19/blog-back-up/master/photos/' + data.link[i]; var type = data.type[i]; var target = src + (type === 'video' ? '.mp4' : '.jpg'); src += ''; liTmpl += '&lt;figure class=\"thumb\" itemprop=\"associatedMedia\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\"&gt;\\ &lt;a href=\"' + src + '\" itemprop=\"contentUrl\" data-size=\"1080x1080\" data-type=\"' + type + '\" data-target=\"' + src + '\"&gt;\\ &lt;img class=\"reward-img\" data-type=\"' + type + '\" data-src=\"' + minSrc + '\" src=\"/assets/img/empty.png\" itemprop=\"thumbnail\" onload=\"lzld(this)\"&gt;\\ &lt;/a&gt;\\ &lt;figcaption style=\"display:none\" itemprop=\"caption description\"&gt;' + data.text[i] + '&lt;/figcaption&gt;\\ &lt;/figure&gt;'; &#125; ulTmpl = ulTmpl + '&lt;section class=\"archives album\"&gt;&lt;h1 class=\"year\"&gt;' + data.year + '年&lt;em&gt;' + data.month + '月&lt;/em&gt;&lt;/h1&gt;\\ &lt;ul class=\"img-box-ul\"&gt;' + liTmpl + '&lt;/ul&gt;\\ &lt;/section&gt;'; &#125; 3、图片处理 python脚本文件都放在了这里：https://github.com/lawlite19/Blog-Back-Up(1) 裁剪图片 去图片的中间部分，裁剪为正方形 对应的裁剪函数1234567891011121314151617181920def cut_by_ratio(self): \"\"\"按照图片长宽进行分割 ------------ 取中间的部分，裁剪成正方形 \"\"\" im = Image.open(self.infile) (x, y) = im.size if x &gt; y: region = (int(x/2-y/2), 0, int(x/2+y/2), y) #裁切图片 crop_img = im.crop(region) #保存裁切后的图片 crop_img.save(self.outfile) elif x &lt; y: region = (0, int(y/2-x/2), x, int(y/2+x/2)) #裁切图片 crop_img = im.crop(region) #保存裁切后的图片 crop_img.save(self.outfile) (2) 压缩图片 把图片进行压缩，方便相册的加载12345678910111213141516171819202122def compress(choose, des_dir, src_dir, file_list): \"\"\"压缩算法，img.thumbnail对图片进行压缩， 参数 ----------- choose: str 选择压缩的比例，有4个选项，越大压缩后的图片越小 \"\"\" if choose == '1': scale = SIZE_normal if choose == '2': scale = SIZE_small if choose == '3': scale = SIZE_more_small if choose == '4': scale = SIZE_more_small_small for infile in file_list: img = Image.open(src_dir+infile) # size_of_file = os.path.getsize(infile) w, h = img.size img.thumbnail((int(w/scale), int(h/scale))) img.save(des_dir + infile) 4、github提交 处理完成之后需要将处理后的图片提交到github上 这里同样使用脚本的方式，需要将git命令行配置到环境变量中12345678910def git_operation(): ''' git 命令行函数，将仓库提交 ---------- 需要安装git命令行工具，并且添加到环境变量中 ''' os.system('git add --all') os.system('git commit -m \"add photos\"') os.system('git push origin master') 5、json数据处理 下面就需要将图片信息处理成json数据格式了，这里为重点 最终需要的json格式的数据如下图： 这里我采用的方式是读取图片的名字作为其中的text的内容，图片的命名如下图 最前面是日期，然后用_进行分隔 后面是图片的描述信息，注意不要包含_和.符号 实现代码： 注意代码中../lawlite19.github.io/source/photos/data.json是对应到我的博客的路径，这里根据需要改成自己博客的路径 1234567891011121314151617181920212223242526272829303132333435363738394041def handle_photo(): '''根据图片的文件名处理成需要的json格式的数据 ----------- 最后将data.json文件存到博客的source/photos文件夹下 ''' src_dir, des_dir = \"photos/\", \"min_photos/\" file_list = list_img_file(src_dir) list_info = [] for i in range(len(file_list)): filename = file_list[i] date_str, info = filename.split(\"_\") info, _ = info.split(\".\") date = datetime.strptime(date_str, \"%Y-%m-%d\") year_month = date_str[0:7] if i == 0: # 处理第一个文件 new_dict = &#123;\"date\": year_month, \"arr\":&#123;'year': date.year, 'month': date.month, 'link': [filename], 'text': [info], 'type': ['image'] &#125; &#125; list_info.append(new_dict) elif year_month != list_info[-1]['date']: # 不是最后的一个日期，就新建一个dict new_dict = &#123;\"date\": year_month, \"arr\":&#123;'year': date.year, 'month': date.month, 'link': [filename], 'text': [info], 'type': ['image'] &#125; &#125; list_info.append(new_dict) else: # 同一个日期 list_info[-1]['arr']['link'].append(filename) list_info[-1]['arr']['text'].append(info) list_info[-1]['arr']['type'].append('image') list_info.reverse() # 翻转 final_dict = &#123;\"list\": list_info&#125; with open(\"../lawlite19.github.io/source/photos/data.json\",\"w\") as fp: json.dump(final_dict, fp) 每次图片有改动都需要执行此脚本文件三、其他 你可以根据需要进行修改python脚本代码，这里一些细节可能处理的不好 留言板：http://lawlite.me/%E7%95%99%E8%A8%80%E6%9D%BF/ 效果展示 相册 留言板","comments":true,"tags":[{"name":"Github","slug":"Github","permalink":"http://lawlite.me/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"http://lawlite.me/tags/Hexo/"}]},{"title":"Hexo+Github搭建自己的博客","date":"2017-04-10T14:49:15.000Z","path":"2017/04/10/Hexo-Github搭建自己的博客/","text":"最终效果可以查看：http://lawlite.me/ 后序继续完善，有问题可以联系我或是下面评论 一、说明 关于一些基本软件的安装和配置这里不再给出 安装NodeJS：http://nodejs.cn/download/ 需要配置环境变量 安装git工具：https://git-for-windows.github.io/ 注册github账号 配置SSH-key 创建名为userName.github.io的仓库,userName是你申请的用户名 二、安装Hexo和基本使用 安装Hexo: npm install -g hexo 初始化Hexo: hexo init 生成静态页面：hexo generate 或者 hexo g 启动服务器：hexo server 或者 hexo s 注意：服务器默认是4000端口，若是安装了福昕阅读器可能端口冲突 可以制定端口：hexo s -p5000 浏览器中访问：http://localhost:4000 三、更换主题Theme及基本配置1、更换主题 默认主题是landscape，在themes文件夹下，可以使用别人开发好的主题，这里有很多，我使用的是这一个: https://github.com/litten/hexo-theme-yilia 下载之后放到themes文件夹下即可：git clone git@github.com:litten/hexo-theme-yilia.git 2、主题基本配置 配置在_config.yml文件中，基本的配置尝试一下就知道了，不在给出(1) 图片的位置： 比如打赏的支付宝二维码图片，是在当前博客的source/assets/img/下 （不是当前主题） 配置：12345678# 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 1# 打赏wordingreward_wording: '谢谢你请我吃糖果'# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: /assets/img/alipay.jpg# 微信二维码图片地址weixin: /assets/img/weixin.png (2) 百度、谷歌统计配置 申请账号：https://tongji.baidu.com/web/welcome/login 在代码获取的地方只要填入key即可 123# Miscellaneousbaidu_analytics: '454d1a5ba8ed29xxxxxxxx'google_analytics: 'UA-9700xxxxxxxx' 就可以统计网站访问情况了，如下图， 谷歌统计同理 (3) 文章评论设置 由于主题之实现了多说和disqus的第三方评论功能，这里不配置 因为多说6月份要关闭了，disqus需要翻墙访问才行，还有友言不支持https协议，因为github使用的是https协议 下面会给出使用网易云跟帖和来必力的第三方评论功能 四、博客的基本配置1、部署配置 配置到github对应的仓库中 使用hexo deploy或hexo d命令即可发布到github仓库中 浏览器输入网址https://userName.github.io即可访问（userName对应你的用户名） 1234deploy: type: git repo: git@github.com:lawlite19/lawlite19.github.io.git branch: master 2、主题配置 设置为你下载的主题：theme: yilia3、其他 加入如下配置，123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 五、进阶功能配置1、网站访问量显示(1) 效果 (2) 实现 我使用了不蒜子第三方的统计插件，网址：http://ibruce.info/2015/04/04/busuanzi/ 在themes\\yilia\\layout\\_partial下的footer.ejs中加入如下代码即可 12345678&lt;script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt;&lt;span id=\"busuanzi_container_site_pv\"&gt; 本站总访问量&lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt;次&lt;/span&gt;&lt;span id=\"busuanzi_container_site_uv\"&gt;总访客数&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;人次&lt;/span&gt; 2、实现单篇文章浏览统计和评论统计 评论数的统计是网易云跟帖中获取的，下面给出(1) 效果(2) 实现 修改themes\\yilia\\layout\\_partial文件夹下的article.ejs文件 在&lt;%- partial(&#39;post/title&#39;, {class_name: &#39;article-title&#39;}) %&gt;节点下加入： 注意这里网易云跟帖还没设置，而评论数中使用到了，这里运行会有问题，下面给出123456789101112131415&lt;!-- 显示阅读和评论数 --&gt;&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.wangYi)&#123; %&gt;&lt;br/&gt;&lt;a class=\"cloud-tie-join-count\" href=\"javascript:void(0);\" style=\"color:gray;font-size:14px;\"&gt;&lt;span class=\"icon-sort\"&gt;&lt;/span&gt;&lt;span id=\"busuanzi_container_page_pv\" style=\"color:#ef7522;font-size:14px;\"&gt; 阅读数: &lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;a class=\"cloud-tie-join-count\" href=\"javascript:void(0);\" style=\"color:#ef7522;font-size:14px;\"&gt; &lt;span class=\"icon-comment\"&gt;&lt;/span&gt; &lt;span class=\"join-text\" style=\"color:#ef7522;font-size:14px;\"&gt;评论数:&lt;/span&gt; &lt;span class=\"join-count\"&gt;0&lt;/span&gt;次&lt;/a&gt;&lt;% &#125; %&gt; 3、实现网易云跟帖评论(1) 效果 (2) 实现 注册账号：https://gentie.163.com/info.html 填写完成之后获取WEB代码 修改themes\\yilia\\layout\\_partial文件夹下的article.ejs文件 在最后加入 这里需要注意下，一个站点不同端标识文章的方式必须统一（同一站点可以采用以下方式标识文章：①URL；②Sourceid+productKey ；③URL+Sourceid+productKey，建议用②或者③），否则跟贴数据可能错乱。比如同一站点PC端采用URL，APP采用Sourceid+productKey，这种情况跟贴数据会错乱，必选采用统一方式标识。 这里使用方式② 123456789101112131415&lt;!-- 网易云跟帖 --&gt;&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.wangYi)&#123; %&gt;&lt;section class=\"duoshuo\" id=\"comments\"&gt;&lt;div id=\"cloud-tie-wrapper\" class=\"cloud-tie-wrapper\"&gt;&lt;/div&gt;&lt;script&gt; var cloudTieConfig = &#123; url: \"\", sourceId: \"&lt;%= post.path%&gt;\", productKey: \"&lt;%= config.wangYi%&gt;\", target: \"cloud-tie-wrapper\" &#125;;&lt;/script&gt;&lt;script src=\"https://img1.cache.netease.com/f2e/tie/yun/sdk/loader.js\"&gt;&lt;/script&gt;&lt;/section&gt;&lt;% &#125; %&gt; 在博客的配置文件_config.yml最后加入获取代码中的productKey 1wangYi: 06ab5cdc0b4c45efb39xxxxxxxxxxxx 发布到github上可以查看效果 六、绑定到申请的域名 可以绑定到自己申请的域名上，不用使用userName.github.io访问了，直接使用自己的域名访问1、申请域名 我在万网购买的域名，地址：https://wanwang.aliyun.com/domain/com?spm=5176.8142029.388261.137.LoKzy7 我这里是.me结尾的域名，一年13大洋2、解析域名 添加如下的解析3、配置一下 在博客的source文件夹下建立一个CNAME的文件 内容写入你的域名信息，比如我这里是lawlite.me 发布到github即可4、细节说明 之前网易云跟帖，百度统计设置的域名这里对应该过来一下七、写作的一些说明 执行命令：hexo new &quot;xxxx&quot;创建Markdown文件，在博客的source\\_posts文件夹下 比如如下例子， comments设置为true允许评论，若设置为false则不能评论 reward设置为true允许打赏，若设置为false则不能打赏，（注意对应主题的配置文件reward_type: 设置的为1） 在文章中加入&lt;!-- more --&gt;将文章截断显示在主页","comments":true,"tags":[{"name":"Github","slug":"Github","permalink":"http://lawlite.me/tags/Github/"}]},{"title":"致火影","date":"2017-03-24T13:57:12.000Z","path":"2017/03/24/致火影/","text":"致火影 ——只要有树叶飞舞的地方，火就会燃烧。 昨天就知道火影动漫也完结了，但是没有马上去看，想抽个正式点的时间。 漫画是700集完结，当时动漫到700的时候就有个打算想写点东西记录一下，但是没有动手。今天准备看时还在思考，看完一些回忆涌上，果断提笔。 初三的暑假，当时是在补课，一位小伙伴有火影的光盘，当时就借来看看。记得每天最多能看几十集，当时光盘里面应该是有300集左右。 暑假结束，步入高一，当时并不知道有漫画（毕竟高一才有的QQ），还在军训，班级里面有同学买的关于火影的海报，那时漫画里讲到鼬双重间谍的身份，以及多么爱他的弟弟佐助。后来有了个诺亚舟学习机（当然现在还在），有时周末就去网吧下载火影动漫看。现在来说有的一集看了不止10遍，当然我周围的小伙伴也有一块看的。 高一结束分班，我后面一排的一位小伙伴也看火影，每次周日下午回校，他都和我讨论，当时讨论的还有死神（死神、柯南都有看，但火影是我唯一看的完整的动漫（不算死亡笔记这种比较短的动漫））。 大三的时候火影漫画700完结（700之后的5话是番外），当时写了一段话，但没有发出来。当动漫700之后几集的片尾曲唱到：さようなら（再见）的时候，些许感慨，之后看的时候的片头曲和片尾曲很少跳过。 还记得岸本齐史（AB大叔）有说过，刚开始画火影的时候他还没有结婚，就像鸣人一样希望得到别人的注意，后来结婚，漫画里的鸣人也渐渐的有了朋友。 最后定格在鸣人雏田结婚。 16岁到24岁，谢谢鸣人，谢谢火影! ——思念你的人所在的地方就是你的归宿！ 2017年3月24日","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://lawlite.me/tags/随笔/"}]},{"title":"Keras学习","date":"2017-02-14T12:25:43.000Z","path":"2017/02/14/Keras学习/","text":"一、Keras概述1、介绍 Keras 是一个兼容 Theano 和 Tensorflow 的神经网络高级包 用他来组件一个神经网络更加快速, 几条语句就搞定 Keras 可以再在 Windows 和 MacOS 或者 Linux 上运行 网站：https://keras.io/ 2、安装Keras 需要事先安装好numpy和scipy 直接pip安装：pip install keras Keras有两个backend,就是是基于什么进行运算的，一个是Tensorflow，一个是Theano 通过修改配置文件永久修改 默认配置是Tensorflow，这里改为Theano Windows在用户的文件夹下有个配置文件：C:\\Users\\bob\\.keras文件夹下的keras.json文件 修改即可123456&#123; &quot;image_dim_ordering&quot;: &quot;tf&quot;, &quot;epsilon&quot;: 1e-07, &quot;floatx&quot;: &quot;float32&quot;, &quot;backend&quot;: &quot;theano&quot;&#125; 修改当前脚本的环境变量 123import os os.environ[&apos;KERAS_BACKEND&apos;]=&apos;tensorflow&apos; # 或者theanoimport keras 二、搭建神经网络1、一个神经网络例子 导入包 12345import kerasimport numpy as npfrom keras.models import Sequential # Sequential顺序建立from keras.layers import Dense # 全连接层import matplotlib.pyplot as plt 制造数据 12345678&apos;&apos;&apos;制造数据，并且显示&apos;&apos;&apos;X = np.linspace(-1,1,200)np.random.shuffle(X)Y = 0.5 * X + 2 + np.random.normal(0,0.05,(200,))plt.scatter(X,Y)plt.show()X_train,Y_train = X[:160],Y[:160]X_test,Y_test = X[160:],Y[160:] 建立模型 123&apos;&apos;&apos;建立模型&apos;&apos;&apos; model = Sequential() # 通过Sequential建立model model.add(Dense(output_dim=1, input_dim=1)) # model.add添加神经层，指定输入和输出维度 激活模型 12&apos;&apos;&apos;激活模型&apos;&apos;&apos; model.compile(optimizer=&apos;sgd&apos;, loss=&apos;mse&apos;) 训练模型 1234for i in range(500): cost = model.train_on_batch(X_train,Y_train) # 使用批训练 if i % 50 == 0: print(cost) 测试集的cost误差 12cost = model.evaluate(X_test, Y_test, batch_size=40)print(cost) 学到的权重和偏置 123&apos;&apos;&apos;输出学到的权重和偏置&apos;&apos;&apos; W,b = model.layers[0].get_weights() print(W,b) 预测 1Y_pred = model.predict(X_test) 2、手写数字识别例子–mnist 导入包： 1234567import kerasfrom keras.datasets import mnistfrom keras.utils import np_utilsimport numpy as npfrom keras.models import Sequential # Sequential顺序建立from keras.layers import Dense,Activation # 全连接层from keras.optimizers import RMSprop 加载并预处理数据 123456&apos;&apos;&apos;加载和预处理数据&apos;&apos;&apos;(X_train,y_train),(X_test,y_test) = mnist.load_data() # 下载数据集，windows在当前用户的对应目录下：C:\\Users\\bob\\.keras\\datasetsX_train = X_train.reshape(X_train.shape[0],-1)/255 # X_train是(60000, 28, 28)，reshape一下变成(60000,784),然后在标准化X_test = X_test.reshape(X_test.shape[0],-1)/255y_train = np_utils.to_categorical(y_train,nb_classes=10) # y_train对应的数字1，2，3....转换为0/1映射y_test = np_utils.to_categorical(y_test,nb_classes=10) 建立模型 1234567&apos;&apos;&apos;建立模型&apos;&apos;&apos;model = Sequential(layers=[ Dense(output_dim=32,input_dim=784), # 第一层，输入为784维，输出为32维 Activation(&apos;relu&apos;), # 激励函数为relu Dense(10), # 第二层，这里不需要指定输入层维度，全连接会使用上一层的输出，这里即32 Activation(&apos;softmax&apos;), # 激励函数，也是最后的预测函数使用softmax ]) 激活模型 123456&apos;&apos;&apos;定义optimizer&apos;&apos;&apos;rmsprop = RMSprop()&apos;&apos;&apos;激活模型&apos;&apos;&apos;model.compile(optimizer=rmsprop, loss=&apos;categorical_crossentropy&apos;, # 分类中使用交叉熵损失函数 metrics=[&apos;accuracy&apos;]) # 计算准确度 训练模型 1model.fit(X_train,y_train,nb_epoch=2,batch_size=100) # nb_epoch整个训练集训练次数 测试集上预测信息 1234&apos;&apos;&apos;测试集测试训练出的模型&apos;&apos;&apos;loss,accuracy = model.evaluate(X_test,y_test)print(&apos;loss:&apos;,loss)print(&apos;accuracy&apos;,accuracy) 3、卷积神经网络CNN–mnist 导入包 1234567import kerasfrom keras.datasets import mnistfrom keras.utils import np_utilsimport numpy as npfrom keras.models import Sequential # Sequential顺序建立from keras.layers import Dense,Activation,Convolution2D,MaxPooling2D,Flattenfrom keras.optimizers import RMSprop,Adam 建立模型 123456789101112131415161718192021222324252627282930313233model = Sequential()## 第一层卷积model.add(Convolution2D(nb_filter=32, # 32个filter，即从32个特征提取 nb_row=5, # patch大小 nb_col=5, border_mode=&apos;same&apos;, dim_ordering=&apos;th&apos;, # theano使用th,TensorFlow使用tf input_shape=(1,28,28,) # 输入的大小，1表示输入的channel通道，由于是黑白图所以是1,若是rgb是3个通道 ))## 第一层激活层model.add(Activation(&apos;relu&apos;))## 第一层池化层model.add(MaxPooling2D( pool_size=(2,2), # 2x2的大小 strides=(2,2), # 步长为2，纵向和横向 border_mode=&apos;same&apos;))### 第二层卷积层model.add(Convolution2D(nb_filter=64, # 不需要指定输入的大小了 nb_row=5, nb_col=5, border_mode=&apos;same&apos; ))### 第二层激活层model.add(Activation(&apos;relu&apos;))### 第二层池化层model.add(MaxPooling2D(border_mode=&apos;same&apos;))#### 全连接层model.add(Flatten()) # 展开model.add(Dense(output_dim=1024)) # 输出维度为1024model.add(Activation(&apos;relu&apos;))model.add(Dense(output_dim=10)) # 最终输出为10类model.add(Activation(&apos;softmax&apos;)) 激活模型 1234adam = Adam()model.compile(optimizer=adam, # 使用adam的optimizer loss=&apos;categorical_crossentropy&apos;, metrics=[&apos;accuracy&apos;]) 训练模型 1model.fit(X_train, y_train) 测试集计算结果 1234&apos;&apos;&apos;测试集模型&apos;&apos;&apos;loss,accuracy = model.evaluate(X_test,y_test)print(&quot;loss&quot;,loss)print(&apos;accuracy&apos;,accuracy)","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"}]},{"title":"Theano学习","date":"2017-02-10T13:25:43.000Z","path":"2017/02/10/Theano学习/","text":"一、Theano概述1、介绍 Theano 是神经网络python机器学习的模块，和 Tensowflow 类似 可以在MacOS、Linux、Windows上运行 theano 可以使用 GPU 进行运算 网址：http://deeplearning.net/software/theano/ 2、安装 Windows上直接：pip install theano 可能提示个警告：WARNING (theano.configdefaults): g++ not detected ! Theano will be unable to execute optimized C-implementations (for both CPU and GPU) and will default to Python implementations. Performance will be severely degraded. To remove this warning, set Theano flags cxx to an empty string. 二、Theano基础1、基本用法 导入包 123import numpy as npimport theano.tensor as Tfrom theano import function 常量和方程定义 1234x = T.dscalar(&apos;x&apos;) # 建立 x 的容器y = T.dscalar(&apos;y&apos;) # 建立 y 的容器z = x + y # 建立方程f = function([x, y],z) # 使用function定义方程，将输入值 x, y 放在 [] 里, 输出值 z 放在后面 pretty print打印原始方程 导入包：from theano import pp 打印即可：print(pp(z)) 矩阵相乘1234567x = T.dmatrix(&apos;x&apos;) # float64的矩阵,fmatrix对应float32y = T.dmatrix(&apos;y&apos;)z = T.dot(x,y) # 相乘f = function([x,y],z) # 定义functionprint(f(np.arange(12).reshape(3,4), np.ones((4,3))))print(pp(z)) 输出：1234[[ 6. 6. 6.] [ 22. 22. 22.] [ 38. 38. 38.]](x \\dot y) 2、function用法 theano 当中的 function 就和 python 中的 function类似，但是在theano中由于涉及到GPU加速以及CPU的并行的运算，所以他的function会有不同。 多输入和多输出 12345678a,b = T.dmatrices(&apos;a&apos;,&apos;b&apos;) # 定义两个容器diff = a - babs_diff = abs(diff) # 绝对值diff_square = diff ** 2 f = function([a,b],[diff,abs_diff,diff_square]) # function同样前面指定输入，后面是输出x1,x2,x3 = f(np.ones((2,2)), np.arange(4).reshape(2,2))print(x1,x2,x3) 指定function默认值和名字name 123456789x,y,z = T.dscalars(&apos;x&apos;,&apos;y&apos;,&apos;z&apos;) # 定义三个scalar容器w = (x + y) * zf = function([x, theano.In(y,value=1), # 输入y,默认值为1 theano.In(z,value=2,name=&apos;weights&apos;)], # 输入z,默认值为2，同时指定名字为weights，后面可以通过名字复制 w)print(f(2)) # 使用默认值print(f(2,2,3)) # 指定值print(f(2,2,weights=3)) # 通过name赋值 3、Shared变量 Shared 变量，意思是这些变量可以在运算过程中，不停地进行交换和更新值。 在定义 weights 和 bias 的情况下，会需要用到这样的变量 定义shared变量1234567891011state = theano.shared(np.array(0,dtype=np.float64), name=&apos;state&apos;) # state初值为0，为float64increase = T.scalar(&apos;increase&apos;,dtype=state.dtype) # 定义一个容器，这里注意dtype为state.dtype,若是np.float64会报错accmulator = theano.function([increase], # 输入 state, # 输出 updates=[(state,state+increase)]) # 指定每次更新为累加print(state.get_value())# get_value()获取值accmulator(1)print(state.get_value())state.set_value(-1) # set_value()设置值accmulator(1)print(state.get_value()) 输出：1230.01.00.0 临时使用shared变量123456789state = theano.shared(np.array(0,dtype=np.float64), name=&apos;state&apos;) # state初值为0，为float64increase = T.scalar(&apos;increase&apos;,dtype=state.dtype) # 定义一个容器，这里注意dtype为state.dtype,若是np.float64会报错tmp_func = state *2 +increasea = T.scalar(dtype=state.dtype) # 定义标量a，后面用来带起stateskip_shared = theano.function([increase,a], tmp_func, givens=[(state,a)]) # 指定givens参数用a代替stateprint(skip_shared(2,3))print(state.get_value()) # 输出state还是0 4、Theano中的激励函数 sigmoid: theano.tensor.nnet.nnet.sigmoid(x) 还有relu,tanh,softmax,softplus等 在隐含层中常用relu,tanh,softplus等非线性激励函数 在输出层常用sigmoid，softmax求概率 三、搭建神经网络1、定义Layer类或者函数 以后想这样直接使用： 12l1 = Layer(inputs,1,10,T.nnet.relu)l2 = Layer(l1.outputs,10,1,None) 实现代码： 12345678910111213import theanoimport theano.tensor as Timport numpy as npclass Layer(object): def __init__(self,inputs,in_size,out_size,activation_function=None): self.W = theano.shared(np.random.normal(0,1,(in_size,out_size))) # 使用高斯函数初始化，大小为in_size*out_size self.b = theano.shared(np.zeros(out_size) + 0.1) # 指定偏置，大小为out_size，注意+0.1在shared内，否则使用会报错 self.Wx_plus_b = T.dot(inputs,self.W) + self.b self.activation_function = activation_function if activation_function is None: self.outpus = self.Wx_plus_b else: self.outputs = self.activation_function(self.Wx_plus_b) 指定构造函数的参数：inputs,in_size,out_size,activation_function 2、一个神经网络例子 制造数据 123456&apos;&apos;&apos;制造假数据，并显示&apos;&apos;&apos;x_data = np.linspace(-1,1,300)[:,np.newaxis] # [:,np.newaxis]是将(300,)转为(300,1),增加一个维度，将列表转化为矩阵noise = np.random.normal(0,0.05,x_data.shape)y_data = np.square(x_data) -0.5 + noiseplt.scatter(x_data,y_data)plt.show() 定义输入，相当于TensorFlow中的placeholder，后面传入真实数据 12x = T.dmatrix(&apos;x&apos;)y = T.dmatrix(&apos;y&apos;) 定义网络，使用上面定义的Layer 12l1 = Layer(x, 1, 10,T.nnet.relu)l2 = Layer(l1.outputs,10,1,None) 定义cost,并且计算其梯度 12cost = T.mean(T.square(l2.outputs-y))g_w1,g_b1,g_w2,g_b2 = T.grad(cost, [l1.W,l1.b,l2.W,l2.b]) 使用theano中的function进行梯度下降 123456789learning_rate = 0.05&apos;&apos;&apos;调用function，使用梯度下降求解&apos;&apos;&apos;train = theano.function(inputs=[x,y], outputs=cost, updates=[(l1.W, l1.W - learning_rate * g_w1), (l1.b, l1.b - learning_rate * g_b1), (l2.W, l2.W - learning_rate * g_w2), (l2.b, l2.b - learning_rate * g_b2)] ) 传入之前制造的数据训练 1234for i in range(1000): err = train(x_data,y_data) # 训练，传入真实数据 if i%50 == 0: print(err) 预测 12&apos;&apos;&apos;预测，输入为x，输出为layer2的输出&apos;&apos;&apos;prediction = theano.function([x],l2.outputs) 计算准确度函数 1234def compute_accuracy(y_target,y_predict): correct_prediction = np.equal(y_target,y_predict) accuracy = np.sum(correct_prediction)/len(correct_prediction) return accuracy 3、保存和提取模型 导入包：import pickle 保存模型–即学到的参数权重和偏置 12345678&apos;&apos;&apos;保存神经网络--保存学到的参数&apos;&apos;&apos;with open(&apos;model.pickle&apos;, mode=&apos;wb&apos;) as file: #model = [l1.W.get_value(),l1.b.get_value(), # l2.W.get_value(),l2.b.get_value()] model = &#123;&apos;layer1_w&apos;:l1.W.get_value(),&apos;layer1_b&apos;:l1.b.get_value(), &apos;layer2_w&apos;:l2.W.get_value(),&apos;layer2_b&apos;:l2.b.get_value()&#125; # 保存为字典形式，通过get_value()获取值 pickle.dump(model, file) print(model[&apos;layer1_w&apos;]) 提取模型 1234with open(&apos;model.pickle&apos;,&apos;rb&apos;) as file: model = pickle.load(file) l1.W.set_value(model[&apos;layer1.w&apos;]) # 通过set_value()将值设置进去 ...","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"}]},{"title":"论文记录-Batch-Normalization","date":"2017-01-09T13:37:38.000Z","path":"2017/01/09/论文记录-Batch-Normalization/","text":"参考论文：http://jmlr.org/proceedings/papers/v37/ioffe15.pdf 一、论文概述 2015年Google提出的Batch Normalization 训练深层的神经网络很复杂，因为训练时每一层输入的分布在变化，导致训练过程中的饱和，称这种现象为：internal covariate shift 需要降低学习率Learning Rate和注意参数的初始化 论文中提出的方法是对于每一个小的训练batch都进行标准化（正态化） 允许使用较大的学习率 不必太关心初始化的问题 同时一些例子中不需要使用Dropout方法避免过拟合 此方法在ImageNet classification比赛中获得4.82% top-5的测试错误率 二、BN思路1、问题 如果输入数据是白化的（whitened），网络会更快的收敛 白化目的是降低数据的冗余性和特征的相关性，例如通过线性变换使数据为0均值和单位方差 并非直接标准化每一层那么简单，如果不考虑归一化的影响，可能会降低梯度下降的影响 标准化与某个样本和所有样本都有关系 解决上面的问题，我们希望对于任何参数值，都要满足想要的分布；$$\\widehat x Norm(x,\\chi )$$ 对于反向传播，需要计算:${\\partial Norm(x,\\chi )} \\over {\\partial x}$和${\\partial Norm({x},\\chi )} \\over {\\partial \\chi }$ 这样做的计算代价是非常大的，因为需要计算x的协方差矩阵 然后白化操作：$${x - E[x]} \\over {\\sqrt {Cov[x]} }$$ 上面两种都不行或是不好，进而得到了BN的方法 既然白化每一层的输入代价非常大，我们可以进行简化 2、简化1 标准化特征的每一个维度而不是去标准化所有的特征，这样就不用求协方差矩阵了 例如d维的输入：$$x = ({x^{(1)}},{x^{(2)}}, \\cdots ,{x^{(d)}})$$ 标准化操作：$${\\widehat x^k} = {x^{(k) - E[x^{(k)}]} \\over {\\sqrt {Var[x^{(k)}]} }}$$ 需要注意的是标准化操作可能会降低数据的表达能力,例如我们之前提到的Sigmoid函数，标准化之后均值为0，方差为1，数据就会落在近似线性的函数区域内，这样激活函数的意义就不明显 所以对于每个标准化之后的$\\widehat x^{(k)}$，对应一对参数：${\\gamma ^{(k)}},{\\beta ^{(k)}}$ ，然后令：${y^{(k)}} = {\\gamma ^{(k)}}{\\widehat x^{(k)}} + {\\beta ^{(k)}}$ 从式子来看就是对标准化的数据进行缩放和平移，不至于使数据落在线性区域内，增加数据的表达能力（式子中如果：${\\gamma ^{(k)}} = \\sqrt {Var[x^{(k)}]}, {\\beta ^{(k)}} = E[x^{(k)}]$ ，就会使恢复到原来的值了） 但是这里还是使用的全部的数据集，但是如果使用随机梯度下降，可以选取一个batch进行训练 3、简化2 第二种简化就是使用mini-batch进行随机梯度下降 注意这里使用mini-batch也是标准化每一个维度上的特征，而不是所有的特征一起，因为若果mini-batch中的数据量小于特征的维度时，会产生奇异协方差矩阵， 对应的行列式的值为0，非满秩 假设mini-batch 大小为m的B $B = \\{ {x_{1 \\ldots m}}\\}$对应的变换操作为：$$B{N_{\\gamma ,\\beta }}:{x_{1 \\ldots m}} \\to {y_{1 \\ldots m}}$$ 作者给出的批标准化的算法如下： 算法中的ε是一个很小的常量，为了保证数值的稳定性（就是防止除数为0） 4、反向传播求梯度： 因为：$$y^{(k)} = \\gamma ^{(k)}\\widehat x^{(k)} + \\beta ^{(k)}$$ 所以：$${\\partial l \\over \\partial \\widehat x_i} = {\\partial l \\over \\partial y_i}\\gamma $$ 因为：$$\\widehat x_i = {x_i - \\mu _B \\over {\\sqrt {\\sigma _B^2 + \\varepsilon } }}$$ 所以：$${\\partial l \\over \\partial \\sigma _B^2} = \\sum\\limits_{i=1}^m {\\partial l \\over \\partial \\widehat x_i} (x_i- \\mu_B) {-1 \\over 2}(\\sigma_B^2 + \\varepsilon)^{-{3\\over2}}$$$${\\partial l \\over \\partial u_B} = \\sum\\limits_{i = 1}^m {\\partial l \\over \\partial \\widehat x_i} { - 1 \\over \\sqrt {\\sigma _B^2 + \\varepsilon }}$$ 因为：${\\mu _B} = {1 \\over m}\\sum\\limits_{i = 1}^m $和$\\sigma _B^2 = {1 \\over m}\\sum\\limits_{i = 1}^m {({x_i}} - {\\mu _B}{)^2}$ 所以：$${\\partial l \\over \\partial x_i} = {\\partial l \\over \\partial \\widehat x_i}{1 \\over \\sqrt {\\sigma _B^2 + \\varepsilon } } + {\\partial l \\over \\partial \\sigma _B^2}{2(x_i - \\mu _B) \\over m} + {\\partial l \\over \\partial u_B}{1 \\over m}$$ 所以：$${\\partial l \\over \\partial \\gamma } = \\sum\\limits_{i = 1}^m {\\partial l \\over \\partial y_i} {\\widehat x_i}$$$${\\partial l \\over \\partial \\beta } = \\sum\\limits_{i = 1}^m {\\partial l \\over \\partial y_i} $$ 对于BN变换是可微分的，随着网络的训练，网络层可以持续学到输入的分布。 三、BN网络的训练和推断（预测）1、预测的问题 按照BN方法，输入数据x会经过变化得到BN（x），然后可以通过随机梯度下降进行训练，标准化是在mini-batch上所以是非常高效的。 但是对于推断我们希望输出只取决于输入，而对于输入只有一个实例数据，无法得到mini-batch的其他实例，就无法求对应的均值和方差了。 2、解决方法 可以通过从所有训练实例中获得的统计量来代替mini-batch中m个训练实例获得统计量均值和方差 比如我们机器学习算法，在训练集上进行了标准化，在测试集上的标准化操作时利用的训练集上的数据(Standarscaler中的mean和variance) 我们对每个mini-batch做标准化，可以对记住每个mini-batch的B，然后得到全局统计量 $$E[x] \\leftarrow E_B[{\\mu _B}]$$ $$Var[x] \\leftarrow {m \\over {m - 1}}E_B[\\sigma _B^2]$$（这里方差采用的是无偏方差估计，所以是m-1） 所以推断采用BN的方式为：$$\\eqalign{&amp; y = \\gamma {x - E(x) \\over \\sqrt {Var[x] + \\varepsilon }} + \\beta \\cr&amp; \\quad= {\\gamma \\over \\sqrt {Var[x] + \\varepsilon }}x + (\\beta - {\\gamma E[x] \\over \\sqrt {Var[x] + \\varepsilon }})} $$3、完整算法 作者给出的完整算法： 四、实验 最后给出的实验可以看出使用BN的方式训练精准度很高而且很稳定。","comments":false,"tags":[{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"Paper阅读记录","slug":"Paper阅读记录","permalink":"http://lawlite.me/tags/Paper阅读记录/"}]},{"title":"论文记录-Relu激励函数权重初始化","date":"2017-01-09T07:20:00.000Z","path":"2017/01/09/论文记录-Relu激励函数权重初始化/","text":"参考论文：点击这里查看 上一篇博客谈到了关于Sigmoid，tanh激励函数的权重初始化方法，以及深度神经网络为什么难训练 这篇博客主要推导关于Relu类激励函数的权重初始化方法 一、ReLu/PReLu激励函数 目前ReLu激活函数使用比较多，而上一篇论文博客中没有讨论，如果还是使用同样初始化权重的方法（Xavier初始化）会有问题 PReLu函数定义如下： 等价于：$$f(y_i) = \\max (0,y_i) + a_i\\min (0,y_i)$$ ReLu（左）和PReLu（右）激活函数图像 二、前向传播推导1、符号说明$\\varepsilon$……………………………………目标函数$\\mu$……………………………………动量$\\alpha$……………………………………学习率$f()$…………………………………激励函数$l$……………………………………当前层layer$L$……………………………………神经网络总层数$b$…………………………..…………偏置向量 2、推导过程 可以得到：$$y_l = W_l x_l + b_l……………………………………..(1)$$$$x_l= f(y_{l - 1})$$ 根据式(1)得：$$Var[y_l] = n_lVar[w_lx_l]………………………………….(2)$$ 因为初始化权重w均值为0，所以 期望：$$E(w_l) = 0$$ 方差：$$Var[w_l] = E(w_l^2) - E^2(w_l) = E(w_l^2)$$ 根据 公式(2) 继续推导： $Var[y_l] = n_l Var[w_l x_l]\\\\\\quad \\quad\\quad = n_l[E(w_l^2 x_l^2) - E^2(w_l x_l)]\\\\\\quad \\quad\\quad = n_l[E(w_l^2) - E^2(w_l)]E(x_l^2)\\\\\\quad \\quad\\quad = n_lVar[w_l]E(x_l^2)……………………………………..(3)$ 对于x来说：$Var[x_l] \\ne E[x_l^2]$，除非x的均值也是0, 对于ReLu函数来说：$x_l = \\max (0,y_{l - 1})$，所以不可能均值为0 w满足对称区间的分布，并且偏置${b_{l - 1}} = 0$，所以${y_{l - 1}}$也满足对称区间的分布，所以： $E(x_l^2) = E[max(0, y_{l-1})^2]\\\\\\quad \\quad\\quad= {1\\over 2} [E(y_{l-1}^2)]\\\\\\quad \\quad\\quad= {1 \\over 2} [E(y_{l-1}^2) - E^2(y_{l-1})]……………………………………(4)$ 将上式(4)代入(3)中得：$$Var[y_l] = {1 \\over 2}{n_l}Var[w_l]Var[y_{l - 1}]……………………………………….(5)$$ 所以对于L层:$$Var[y_L] = Var[y_1]\\prod\\limits_{l = 2}^L {1 \\over 2}n_lVar[w_l] …………………………………..(6)$$ 从上式可以看出，因为累乘的存在，若是$${1 \\over 2}n_lVar[w_l] &lt; 1$$，每次累乘都会使方差缩小，若是大于1，每次会使方差当大。 所以我们希望：$${1 \\over 2}n_lVar[w_l] = 1$$ 所以初始化方法为：是w满足均值为0，标准差为$\\sqrt {2 \\over n_l}$的高斯分布，同时偏置初始化为0 三、反向传播推导 $\\Delta x_l = \\widehat W_l\\Delta y_l…………………………………………….(7)$ 假设$\\widehat W_l$和$\\Delta y_l$相互独立 当$\\widehat W_l$初始化为对称区间的分布时，可以得到：$\\Delta x_l$的均值为0 △x,△y都表示梯度，即：$$\\Delta x = {\\partial \\varepsilon \\over \\partial x}$$，$$\\Delta y = {\\partial \\varepsilon \\over \\partial y}$$ 根据反向传播：$$\\Delta {y_l} = f^{‘}(y_l)\\Delta x_{l + 1}$$ 对于ReLu函数，f的导数为0或1，且概率是相等的，假设$f^{‘}(y_l)$和$\\Delta x_{l + 1}$是相互独立的， 所以：$$E[\\Delta y_l] = E[\\Delta x_{l + 1}]/2 = 0$$ 所以：$$E[(\\Delta y_l)^2] = Var[\\Delta y_l] = {1 \\over 2}Var[\\Delta x_{l + 1}]……………………………………………(8)$$ 根据(7)可以得到： $Var[\\Delta x_l] = \\widehat n_l Var[w_l] Var[\\Delta y_l] \\\\\\quad\\quad\\quad\\quad= {1\\over2} {\\widehat n_l Var[w_l]Var[\\Delta x_{l+1}]}$ 将L层展开得：$$Var[\\Delta x_2] = Var[\\Delta x_{L + 1}]\\prod\\limits_{l = 2}^L {1 \\over 2}\\widehat n_lVar[w_l]…………………………………………………..(9)$$ 同样令：$${1 \\over 2}\\widehat n_lVar[w_l] = 1$$ 注意这里：$\\widehat n_l = k_l^2d_l$，而$n_l = k_l^2c_l = k_l^2d_{l - 1}$ 所以$w_l$应满足均值为0，标准差为$\\sqrt {2 \\over \\widehat n_l}$的的分布 四、正向和反向传播讨论、实验和PReLu函数1、正向和方向传播 对于正向和反向两种初始化权重的方式都是可以的，论文中的模型都能够收敛 比如利用反向传播得到的初始化得到：$$\\prod\\limits_{l = 2}^L {1 \\over 2}\\widehat n_lVar[{w_l}] = 1$$ 对应到正向传播中得到： $\\prod\\limits_{l=2}^L{1\\over2} {n_lVar[w_l]} = \\prod\\limits_{l=2}^L {n_l \\over \\widehat n_l}\\\\\\quad\\quad\\quad\\quad\\quad\\quad= {k_2^2 c_2 \\over k_2^2 d_2} \\cdot {k_3^2 d_2 \\over k_3^2d_3} \\cdot {k_L^2d_L \\over K_L^2 d_L} \\\\\\quad\\quad\\quad\\quad\\quad\\quad= {c_2 \\over d_L}$ 所以也不是逐渐缩小的 实验给出了与第一篇论文的比较，如下图所示，当神经网络有30层时，Xavier初始化权重的方法（第一篇论文中的方法）已经不能收敛。 2、PRelu对应方差 对于PReLu激励函数可以得到：$${1 \\over 2}(1 + a^2)n_lVar[w_l] = 1$$ 当a=0时就是对应的ReLu激励函数 当a=1是就是对应线性函数","comments":false,"tags":[{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"Paper阅读记录","slug":"Paper阅读记录","permalink":"http://lawlite.me/tags/Paper阅读记录/"}]},{"title":"Python机器学习","date":"2017-01-08T15:01:58.000Z","path":"2017/01/08/Python机器学习/","text":"机器学习算法Python实现说明 github地址：https://github.com/lawlite19/MachineLearning_Python 因为里面的公式加载出现问题，这里只给出了目录，可以去github中查看目录 机器学习算法Python实现 一、线性回归 1、代价函数 2、梯度下降算法 3、均值归一化 4、最终运行结果 5、使用scikit-learn库中的线性模型实现 二、逻辑回归 1、代价函数 2、梯度 3、正则化 4、S型函数（即） 5、映射为多项式 6、使用的优化方法 7、运行结果 8、使用scikit-learn库中的逻辑回归模型实现 逻辑回归_手写数字识别_OneVsAll 1、随机显示100个数字 2、OneVsAll 3、手写数字识别 4、预测 5、运行结果 6、使用scikit-learn库中的逻辑回归模型实现 三、BP神经网络 1、神经网络model 2、代价函数 3、正则化 4、反向传播BP 5、BP可以求梯度的原因 6、梯度检查 7、权重的随机初始化 8、预测 9、输出结果 四、SVM支持向量机 1、代价函数 2、Large Margin 3、SVM Kernel（核函数） 4、使用中的模型代码 5、运行结果 五、K-Means聚类算法 1、聚类过程 2、目标函数 3、聚类中心的选择 4、聚类个数K的选择 5、应用——图片压缩 6、使用scikit-learn库中的线性模型实现聚类 7、运行结果 六、PCA主成分分析（降维） 1、用处 2、2D–&gt;1D，nD–&gt;kD 3、主成分分析PCA与线性回归的区别 4、PCA降维过程 5、数据恢复 6、主成分个数的选择（即要降的维度） 7、使用建议 8、运行结果 9、使用scikit-learn库中的PCA实现降维 七、异常检测 Anomaly Detection 1、高斯分布（正态分布） 2、异常检测算法 3、评价的好坏，以及的选取 4、选择使用什么样的feature（单元高斯分布） 5、多元高斯分布 6、单元和多元高斯分布特点 7、程序运行结果","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://lawlite.me/tags/机器学习/"}]},{"title":"论文记录-UnderstandingTheDifficultyOfTrainingDeepFeedforwardNeuralNetworks","date":"2016-12-20T11:03:24.000Z","path":"2016/12/20/论文记录-UnderstandingTheDifficultyOfTrainingDeepFeedforwardNeuralNetworks/","text":"1、说明 2010年的一篇论文，说明深度神经网络为什么难以训练，当时只讨论了Sigmoid，tanh和Softsign激活函数 提出了一种初始化权重weights的方法，能够解决训练中梯度消失的问题 但是使用现在的ReLu激活函数，同样使用此初始化方法就会出现问题。 2、Sigmoid激励函数实验 说明 论文首先通过实验观察激活函数的影响，指出Sigmoid函数是不适合作为深度神经网络激活函数的 因为它的均值总是大于0的，如下图，导致后面的隐藏层hidden layer趋于饱和，并且发现饱和的神经元可以自发移出饱和趋于，但是非常慢。接着发现一个新的非线性的激活函数是非常有益的。 最后观察每一层激活值和梯度的变化，给出了一种新的初始化权重的方法。 实验部分 初始化偏置biases为0，权重w服从均匀分布，即：$${{W_{ij}} \\sim U[ - {1 \\over {\\sqrt n }},{1 \\over {\\sqrt n }}]}$$ 其中n为前一层的神经元个数。然后构建了一个含有4个隐含层的神经网络，激活函数使用的是Sigmoid 观察每一层的激活值的均值和标准差随着训练次数的变化，layer1表示第一个隐含层的输出，以此类推。如图所示：实线表示均值mean value，垂直的条表示标准差。 实验的直观理解 最后我们使用 ${Softmax(b+Wh)}$ 作为输出预测的，刚开始训练的时候不能够很好的预测y的值，因此误差梯度会迫使Wh趋于0，所以会是h的值趋于0，h就是上一层的输出，所以激活值很快为0。 但是对于tanh函数是关于原点对称的，图像如下，值趋于0是好的，因为梯度能够反向传播回去，但是对于sigmoid函数来说就趋于饱和的位置了，梯度很难反向传回去，也就学习不到东西了。 3、梯度计算和公式推导1) 代价函数 代价函数使用的是交叉熵代价函数，相比对于二次代价函数会更好 二次代价函数较为平坦，所以使用梯度下降会比较慢。2) 公式推导 符号说明${z^i}$………………………………第i层的激活值向量${s^i}$………………………………第i+1层的输入$X$………………………………输入${n_i}$………………………………第i层神经元个数$W$………………………………权重 可以得到：$${s^i = {z^i}{W^i} + {b^i}}$$$${z^{i + 1} = f({s^i})}$$ 所以分别对上面两式求偏导可以得到：$${{\\partial Cost \\over \\partial s_k^i}=f^{'}W_{k,\\bullet}^{i+1}}{ \\partial Cost \\over \\partial s^{i+1}}…………………………….(1)$$ $${{\\partial Cost \\over \\partial w_{l,k}^i} = z_l^i}{\\partial Cost \\over \\partial s_k^i}........................................(2)$$ 推导如下 ![BP推导][5] - 上面公式推导说明 - 其中 $${{\\partial Cost \\over \\partial s^{i-1}}={\\delta ^{i-1}}}$$ 这里W从1开始，上面给出的最终公式是从0开始。 对权重的偏导（梯度）再乘以输入 ${z^i}$ 即可。 因为我们使用均匀分布进行初始化，所以方差是一样的，对于tanh函数的导数，$${[\\tanh (x)]^{‘}} = 1 - {[\\tanh (x)]^2}$$ 所以：$${f^,}(s_k^i) \\approx 1$$ 实际这里作者假设了这个区间内激活函数是线性的，第二篇论文中也有提到。（下面会给出） 根据方差的公式： $$Var(x) = E({x^2}) - {E^2}(x)$$ 可以得到: $${Var[z^i] = Var[x] \\prod\\limits_{j=0}^{i-1}n_j Var[W^j]}…………………………(3)$$ 推导如下： ${Var(s) = Var(\\sum\\limits_i^n w_i x_i)}=\\sum\\limits_i^n Var(w_ix_i)$ ${Var(wx) = E(w^2x^2) - E^2(wx)} \\\\\\quad\\quad\\quad\\quad=E(w^2)E(x^2) - E^2(w)E^2(x) \\\\\\quad\\quad\\quad\\quad=[E(w^2)-E^2(w)][E(x^2)-E^2(x)] + E^2(w)[E(x^2)-E^2(x)] + E^2(x)[E(w^2)-E^2(w)] \\\\\\quad\\quad\\quad\\quad=Var(w)Var(x)+E^2Var(x)+E^2Var(w)$ 因为输入的均值为0，所以$${E(w) = E(x) = 0}$$ 所以：$${Var(wx) = Var(w)Var(x)}$$ 又因为${f^{‘}(s_k^i) \\approx 1}$成立，然后代入上面的式子即可 根据公式（1），所以对${S^i}$偏导数的方差为：$${Var[{\\partial Cost \\over \\partial s^i}]} = {Var[{\\partial Cost \\over \\partial s^n}]}{\\prod\\limits_{j=i}^n}{n_{j+1}Var[W^j]}$$ 根据公式（2），代入到对权重w偏导（即为梯度）的方差为: $${Var[{\\partial Cost \\over \\partial w^i}]} = {\\prod \\limits_{j=0}^{i-1} n_j Var[W^j]}{\\prod \\limits_{j=i}^{n-1} n_{j+1}Var[W^j] \\ast Var[x] Var[{\\partial Cost \\over \\partial s^n}]}$$ 对于正向传播，希望：$$\\forall (i,j),Var[{z^i}] = Var[{z^j}]$$ 从反向传播的角度同样可以有：$${\\forall (i,j), Var[{\\partial Cost \\over \\partial s^i}]} = Var[{\\partial Cost \\over \\partial s^j}]$$ 就可以转化为：$$\\left\\{ {\\matrix{{n_iVar[w^i]}=1 \\cr{n_{i+1}Var[w^i]}=1 \\cr} }…………………………(4) \\right.$$ 比如第一种(公式（3）)： $${Var[z^i] = Var[x] \\prod\\limits_{j=0}^{i-1}n_j Var[W^j]}$$ $$Var(z^i) = Var(x)$$ 所以${n_i}Var[{w^i}] = 1$ ，第二种情况同理 所以将 （4） 中的两式相加可得：$${Var[{W^i}]}={2 \\over {n_i + n_{i+1}}}$$ 如果所有层的神经元个数一样时：$$\\left\\{ {\\matrix{{Var[{\\partial Cost \\over \\partial s^i}] = [nVar[W]]^{d-i}Var[x]} \\cr{Var[{\\partial Cost \\over \\partial w^i}] = [nVar[w]]^{d}Var[x]Var[{\\partial Cost \\over \\partial w^n}]} \\cr}} \\right.$$ 可以看到，所有层的梯度的方差都是一样的。但是对于很深层的神经网络还是有可能导致梯度消失。 4、初始化权重方法 最后提出了一个归一化的初始化方法，因为W服从均匀分布，根据均匀分布的方差公式可以得到：$${[c-(-c)]^2 \\over 12} = {c^2 \\over 3}$$ 所以得到：$${2 \\over {n_i + n_{i+1}} =}{ c^2 \\over 3}$$ 求出: $$c={\\sqrt 6 \\over \\sqrt {n_i + n_{i+1}}}$$ 所以最终给出初始化权重的方法为：$${W \\sim U[-{{\\sqrt 6}\\over {\\sqrt n_i+n_{i+1}}},{\\sqrt 6 \\over \\sqrt {n_i + n_{i+1}}}]}$$ 5、总结 论文讨论了Sigmoid，tanh激励函数权重初始化的问题，并给出了初始化的方法，- 但是针对ReLu这种激励函数是不适用的，第二篇会提到。 并且推导过程中假设了激励函数在初始化对应区间上是线性的，即假设导数恒为1我感觉也是存在问题的。 作者给出的实验部分网络的深度还是很有限的，随着网络的不断加深，对应的初始化权重的分布范围还是会不断减小的。可以通过控制学习率参数等方式来进行对应处理。 Reference http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf","comments":false,"tags":[{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"Paper阅读记录","slug":"Paper阅读记录","permalink":"http://lawlite.me/tags/Paper阅读记录/"}]},{"title":"Tensorflow学习","date":"2016-12-08T08:07:33.000Z","path":"2016/12/08/Tensorflow学习/","text":"github地址：https://github.com/lawlite19/MachineLearning_TensorFlow 一、TensorFlow介绍 1、什么是TensorFlow 官网：https://www.tensorflow.org/ TensorFlow是Google开发的一款神经网络的Python外部的结构包, 也是一个采用数据流图来进行数值计算的开源软件库. 先绘制计算结构图, 也可以称是一系列可人机交互的计算操作, 然后把编辑好的Python文件 转换成 更高效的C++, 并在后端进行计算. 2、TensorFlow强大之处 擅长的任务就是训练深度神经网络 快速的入门神经网络,大大降低了深度学习（也就是深度神经网络）的开发成本和开发难度 TensorFlow 的开源性, 让所有人都能使用并且维护 3、安装TensorFlow 暂不支持Windows下安装TensorFlow,可以在虚拟机里使用或者安装Docker安装 这里在CentOS6.5下进行安装 安装Python2.7，默认CentOS中安装的是Python2.6 先安装zlib的依赖，下面安装easy_install时会用到 12yum install zlibyum install zlib-devel 在安装openssl的依赖，下面安装pip时会用到 12yum install opensslyum install openssl-devel 下载安装包，我传到github上的安装包，https协议后面加上--no-check-certificate，： 1wget https://raw.githubusercontent.com/lawlite19/LinuxSoftware/master/python/Python-2.7.12.tgz --no-check-certificate 解压缩：tar -zxvf xxx 进入，配置：./configure --prefix=/usr/local/python2.7 编译并安装：make &amp;&amp; make install 创建链接来使系统默认python变为python2.7,ln -fs /usr/local/python2.7/bin/python2.7 /usr/bin/python 修改一下yum，因为yum的执行文件还是需要原来的python2.6,vim /usr/bin/yum1#!/usr/bin/python 修改为系统原有的python版本地址 1#!/usr/bin/python2.6 安装easy_install 下载：wget https://raw.githubusercontent.com/lawlite19/LinuxSoftware/blob/master/python/setuptools-26.1.1.tar.gz --no-check-certificate 解压缩：tar -zxvf xxx python setup.py build #注意这里python是新的python2.7 python setup.py install 到/usr/local/python2.7/bin目录下查看就会看到easy_install了 创建一个软连接：ln -s /usr/local/python2.7/bin/easy_install /usr/local/bin/easy_install 就可以使用easy_install 包名 进行安装 安装pip 下载: 解压缩：tar -zxvf xxx 安装：python setup.py install 到/usr/local/python2.7/bin目录下查看就会看到pip了 同样创建软连接：ln -s /usr/local/python2.7/bin/pip /usr/local/bin/pip 就可以使用pip install 包名进行安装包了 安装wingIDE 默认安装到/usr/local/lib下，进入，执行./wing命令即可执行 创建软连接：ln -s /usr/local/lib/wingide5.1/wing /usr/local/bin/wing 破解： [另]安装VMwareTools，可以在windows和Linux之间复制粘贴 启动CentOS 选择VMware中的虚拟机–&gt;安装VMware Tools 会自动弹出VMware Tools的文件夹 拷贝一份到root目录下 cp VMwareTools-9.9.3-2759765.tar.gz /root 解压缩 tar -zxvf VMwareTools-9.9.3-2759765.tar.gz 进入目录执行，vmware-install.pl，一路回车下去即可 重启CentOS即可 安装numpy 直接安装没有出错 安装scipy 安装依赖：yum install bzip2-devel pcre-devel ncurses-devel readline-devel tk-devel gcc-c++ lapack-devel 安装即可：pip install scipy 安装matplotlib 安装依赖：yum install libpng-devel 安装即可：pip install matplotlib 运行可能有以下的错误：1ImportError: No module named _tkinter 安装：tcl8.5.9-src.tar.gz 进入安装即可,./confgiure make make install安装：tk8.5.9-src.tar.gz 进入安装即可。 [注意]要重新安装一下Pyhton2.7才能链接到tkinter 安装scikit-learn 直接安装没有出错，但是缺少包bz2 将系统中python2.6的bz2复制到python2.7对应文件夹下1cp /usr/lib/python2.6/lib-dynload/bz2.so /usr/local/python2.7/lib/python2.7/lib-dynload 安装TensorFlow 官网点击 选择对应的版本 1234567891011121314151617181920212223242526272829303132 # Ubuntu/Linux 64-bit, CPU only, Python 2.7$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp27-none-linux_x86_64.whl# Ubuntu/Linux 64-bit, GPU enabled, Python 2.7# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see &quot;Installing from sources&quot; below.$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.0rc0-cp27-none-linux_x86_64.whl# Mac OS X, CPU only, Python 2.7:$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0rc0-py2-none-any.whl# Mac OS X, GPU enabled, Python 2.7:$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/gpu/tensorflow_gpu-0.12.0rc0-py2-none-any.whl# Ubuntu/Linux 64-bit, CPU only, Python 3.4$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp34-cp34m-linux_x86_64.whl# Ubuntu/Linux 64-bit, GPU enabled, Python 3.4# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see &quot;Installing from sources&quot; below.$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.0rc0-cp34-cp34m-linux_x86_64.whl# Ubuntu/Linux 64-bit, CPU only, Python 3.5$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp35-cp35m-linux_x86_64.whl# Ubuntu/Linux 64-bit, GPU enabled, Python 3.5# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see &quot;Installing from sources&quot; below.$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.0rc0-cp35-cp35m-linux_x86_64.whl# Mac OS X, CPU only, Python 3.4 or 3.5:$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0rc0-py3-none-any.whl# Mac OS X, GPU enabled, Python 3.4 or 3.5:$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/gpu/tensorflow_gpu-0.12.0rc0-py3-none-any.whl 对应python版本 12345 # Python 2$ sudo pip install --upgrade $TF_BINARY_URL# Python 3$ sudo pip3 install --upgrade $TF_BINARY_URL 可能缺少依赖glibc,看对应提示的版本， 还有可能报错1ImportError: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.19&apos; not found (required by /usr/local/python2.7/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow.so) 安装对应版本的glibc 查看现有版本的glibc, strings /lib64/libc.so.6 |grep GLIBC 下载对应版本：wget http://ftp.gnu.org/gnu/glibc/glibc-2.17.tar.gz 解压缩：tar -zxvf glibc-2.17 进入文件夹创建build文件夹cd glibc-2.17 &amp;&amp; mkdir build 配置： 123456../configure \\ --prefix=/usr \\ --disable-profile \\ --enable-add-ons \\ --enable-kernel=2.6.25 \\ --libexecdir=/usr/lib/glibc 编译安装：make &amp;&amp; make install 可以再用命令：strings /lib64/libc.so.6 |grep GLIBC查看 添加GLIBCXX_3.4.19的支持 下载：wget https://raw.githubusercontent.com/lawlite19/LinuxSoftware/master/python2.7_tensorflow/libstdc++.so.6.0.20 复制到/usr/lib64文件夹下：cp libstdc++.so.6.0.20 /usr/lib64/ 添加执行权限：chmod +x /usr/lib64/libstdc++.so.6.0.20 删除原来的：rm -rf /usr/lib64/libstdc++.so.6 创建软连接：ln -s /usr/lib64/libstdc++.so.6.0.20 /usr/lib64/libstdc++.so.6 可以查看是否有个版本：strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX 运行还可能报错编码的问题，这里安装0.10.0版本:pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl 安装pandas pip install pandas没有问题 二、TensorFlow基础架构1、处理结构 Tensorflow 首先要定义神经网络的结构,然后再把数据放入结构当中去运算和 training TensorFlow是采用数据流图（data flow graphs）来计算 首先我们得创建一个数据流流图 然后再将我们的数据（数据以张量(tensor)的形式存在）放在数据流图中计算 张量（tensor): 张量有多种. 零阶张量为 纯量或标量 (scalar) 也就是一个数值. 比如 1 一阶张量为 向量 (vector), 比如 一维的 [1, 2, 3] 二阶张量为 矩阵 (matrix), 比如 二维的 [[1, 2, 3],[4, 5, 6],[7, 8, 9]] 以此类推, 还有 三阶 三维的 … 2、一个例子 求y=1*x+3中的权重1和偏置3 定义这个函数 12x_data = np.random.rand(100).astype(np.float32)y_data = x_data*1.0+3.0 创建TensorFlow结构 1234567Weights = tf.Variable(tf.random_uniform([1], -1.0, 1.0)) # 创建变量Weight是，范围是 -1.0~1.0biases = tf.Variable(tf.zeros([1])) # 创建偏置，初始值为0y = Weights*x_data+biases # 定义方程loss = tf.reduce_mean(tf.square(y-y_data)) # 定义损失，为真实值减去我们每一步计算的值optimizer = tf.train.GradientDescentOptimizer(0.5) # 0.5 是学习率train = optimizer.minimize(loss) # 使用梯度下降优化init = tf.initialize_all_variables() # 初始化所有变量 定义Session 12sess = tf.Session()sess.run(init) 输出结果 1234for i in range(201): sess.run(train) if i%20 == 0: print i,sess.run(Weights),sess.run(biases) 结果为： 1234567891011 0 [ 1.60895896] [ 3.67376709]20 [ 1.04673827] [ 2.97489643]40 [ 1.011392] [ 2.99388123]60 [ 1.00277638] [ 2.99850869]80 [ 1.00067675] [ 2.99963641]100 [ 1.00016499] [ 2.99991131]120 [ 1.00004005] [ 2.99997854]140 [ 1.00000978] [ 2.99999475]160 [ 1.0000025] [ 2.99999857]180 [ 1.00000119] [ 2.99999928]200 [ 1.00000119] [ 2.99999928] 3、Session会话控制 运行 session.run() 可以获得你要得知的运算结果, 或者是你所要运算的部分 定义常量矩阵：tf.constant([[3,3]]) 矩阵乘法 ：tf.matmul(matrix1,matrix2) 运行Session的两种方法： 手动关闭 123sess = tf.Session()print sess.run(product)sess.close() 使用with，执行完会自动关闭 12with tf.Session() as sess:print sess.run(product) 4、Variable变量 定义变量：tf.Variable() 初始化所有变量：init = tf.initialize_all_variables() 需要再在 sess 里, sess.run(init) , 激活变量 输出时，一定要把 sess 的指针指向变量再进行 print 才能得到想要的结果 5、Placeholder传入值 首先定义Placeholder，然后在Session.run()的时候输入值 placeholder 与 feed_dict={} 是绑定在一起出现的1234567input1 = tf.placeholder(tf.float32) #在 Tensorflow 中需要定义 placeholder 的 type ，一般为 float32 形式input2 = tf.placeholder(tf.float32)output = tf.mul(input1,input2) # 乘法运算with tf.Session() as sess: print sess.run(output,feed_dict=&#123;input1:7.,input2:2.&#125;) # placeholder 与 feed_dict=&#123;&#125; 是绑定在一起出现的 三、定义一个神经网络1、添加层函数add_layer()12345678910&apos;&apos;&apos;参数：输入数据，前一层size，当前层size，激活函数&apos;&apos;&apos;def add_layer(inputs,in_size,out_size,activation_function=None): Weights = tf.Variable(tf.random_normal([in_size,out_size])) #随机初始化权重 biases = tf.Variable(tf.zeros([1,out_size]) + 0.1) # 初始化偏置，+0.1 Ws_plus_b = tf.matmul(inputs,Weights) + biases # 未使用激活函数的值 if activation_function is None: outputs = Ws_plus_b else: outputs = activation_function(Ws_plus_b) # 使用激活函数激活 return outputs 2、构建神经网络 定义二次函数 123x_data = np.linspace(-1,1,300,dtype=np.float32)[:,np.newaxis]noise = np.random.normal(0,0.05,x_data.shape).astype(np.float32)y_data = np.square(x_data)-0.5+noise 定义Placeholder,用于后期输入数据 12xs = tf.placeholder(tf.float32,[None,1]) # None代表无论输入有多少都可以,只有一个特征，所以这里是1ys = tf.placeholder(tf.float32,[None,1]) 定义神经层layer 1layer1 = add_layer(xs, 1, 10, activation_function=tf.nn.relu) # 第一层，输入层为1，隐含层为10个神经元，Tensorflow 自带的激励函数tf.nn.relu 定义输出层 1prediction = add_layer(layer1, 10, 1) # 利用上一层作为输入 计算loss损失 1loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[1])) # 对二者差的平方求和再取平均 梯度下降最小化损失 1train = tf.train.GradientDescentOptimizer(0.1).minimize(loss) 初始化所有变量 1init = tf.initialize_all_variables() 定义Session 12sess = tf.Session()sess.run(init) 输出 1234for i in range(1000): sess.run(train,feed_dict=&#123;xs:x_data,ys:y_data&#125;) if i%50==0: print sess.run(loss,feed_dict=&#123;xs:x_data,ys:y_data&#125;) 结果：12345678910111213141516171819200.454020.01453640.007213180.00642150.006144930.005993070.005875780.005770390.005671720.005580080.005495460.005415950.005340590.005261390.005188730.005114030.005040630.00496130.00488740.004819 3、可视化结果 显示数据12345fig = plt.figure()ax = fig.add_subplot(111)ax.scatter(x_data,y_data)plt.ion() # 绘画之后不暂停plt.show() 动态绘画123456789101112131415 try: ax.lines.remove(lines[0]) # 每次绘画需要移除上次绘画的结果，放在try catch里因为第一次执行没有，所以直接pass except Exception: pass prediction_value = sess.run(prediction, feed_dict=&#123;xs: x_data&#125;) # plot the prediction lines = ax.plot(x_data, prediction_value, &apos;r-&apos;, lw=3) # 绘画 plt.pause(0.1) # 停0.1s``` ![enter description here][3]## 四、TensorFlow可视化### 1、TensorFlow的可视化工具`tensorboard`，可视化神经网路额结构- 输入`input` with tf.name_scope(‘input’): xs = tf.placeholder(tf.float32,[None,1],name=’x_in’) # ys = tf.placeholder(tf.float32,[None,1],name=’y_in’)123![enter description here][4]- `layer`层 def add_layer(inputs,in_size,out_size,activation_function=None): with tf.name_scope(‘layer’): with tf.name_scope(‘Weights’): Weights = tf.Variable(tf.random_normal([in_size,out_size]),name=’W’) with tf.name_scope(‘biases’): biases = tf.Variable(tf.zeros([1,out_size]) + 0.1,name=’b’) with tf.name_scope(‘Ws_plus_b’): Ws_plus_b = tf.matmul(inputs,Weights) + biases if activation_function is None: outputs = Ws_plus_b else: outputs = activation_function(Ws_plus_b) return outputs123![enter description here][5]- `loss`和`train` with tf.name_scope(‘loss’): loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=1)) with tf.name_scope(‘train’): train = tf.train.GradientDescentOptimizer(0.1).minimize(loss)123![enter description here][6]- 写入文件中 writer = tf.train.SummaryWriter(“logs/“, sess.graph)12345678- 浏览器中查看（chrome浏览器） - 在终端输入：`tensorboard --logdir=&apos;logs/&apos;`，它会给出访问地址 - 浏览器中查看即可。 - `tensorboard`命令在安装**python**目录的**bin**目录下，可以创建一个软连接### 2、可视化训练过程- 可视化Weights权重和biases偏置 - 每一层起个名字 layer_name = ‘layer%s’%n_layer 1- tf.histogram_summary(name,value) def add_layer(inputs,in_size,out_size,n_layer,activation_function=None): layer_name = ‘layer%s’%n_layer with tf.name_scope(layer_name): with tf.name_scope(‘Weights’): Weights = tf.Variable(tf.random_normal([in_size,out_size]),name=’W’) tf.histogram_summary(layer_name+’/weights’, Weights) with tf.name_scope(‘biases’): biases = tf.Variable(tf.zeros([1,out_size]) + 0.1,name=’b’) tf.histogram_summary(layer_name+’/biases’,biases) with tf.name_scope(‘Ws_plus_b’): Ws_plus_b = tf.matmul(inputs,Weights) + biases if activation_function is None: outputs = Ws_plus_b else: outputs = activation_function(Ws_plus_b) tf.histogram_summary(layer_name+&apos;/outputs&apos;,outputs) return outputs 1- merge所有的summary merged =tf.merge_all_summaries() 1- 写入文件中 writer = tf.train.SummaryWriter(“logs/“, sess.graph) 1- 训练1000次，每50步显示一次： for i in range(1000): sess.run(train,feed_dict={xs:x_data,ys:y_data}) if i%50==0: summary = sess.run(merged, feed_dict={xs: x_data, ys:y_data}) writer.add_summary(summary, i) 12345678910111213141516 - 同样适用`tensorboard`查看 ![enter description here][7] - 可视化损失函数（代价函数） - 添加：`tf.scalar_summary(&apos;loss&apos;,loss)` ![enter description here][8]## 五、手写数字识别_1### 1、说明- [全部代码](https://github.com/lawlite19/MachineLearning_TensorFlow/blob/master/Mnist_01/mnist.py)：`https://github.com/lawlite19/MachineLearning_TensorFlow/blob/master/Mnist_02/mnist.py`- 自己的数据集，没有使用tensorflow中mnist数据集，- 之前在机器学习中用Python实现过，地址：`https://github.com/lawlite19/MachineLearning_Python`,这里使用`tensorflow`实现- 神经网络只有两层### 2、代码实现- 添加一层 ‘’’添加一层神经网络’’’def add_layer(inputs,in_size,out_size,activation_function=None): Weights = tf.Variable(tf.random_normal([in_size,out_size])) # 权重，in*out biases = tf.Variable(tf.zeros([1,out_size]) + 0.1) Ws_plus_b = tf.matmul(inputs,Weights) + biases # 计算权重和偏置之后的值 if activation_function is None: outputs = Ws_plus_b else: outputs = activation_function(Ws_plus_b) # 调用激励函数运算 return outputs1- 运行函数 ‘’’运行函数’’’def NeuralNetwork(): data_digits = spio.loadmat(‘data_digits.mat’) X = data_digits[‘X’] y = data_digits[‘y’] m,n = X.shape class_y = np.zeros((m,10)) # y是0,1,2,3…9,需要映射0/1形式 for i in range(10): class_y[:,i] = np.float32(y==i).reshape(1,-1) xs = tf.placeholder(tf.float32, shape=[None,400]) # 像素是20x20=400，所以有400个feature ys = tf.placeholder(tf.float32, shape=[None,10]) # 输出有10个 prediction = add_layer(xs, 400, 10, activation_function=tf.nn.softmax) # 两层神经网络，400x10 #prediction = add_layer(layer1, 25, 10, activation_function=tf.nn.softmax) #loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[1])) loss = tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1])) # 定义损失函数（代价函数）， train = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss) # 使用梯度下降最小化损失 init = tf.initialize_all_variables() # 初始化所有变量 sess = tf.Session() # 创建Session sess.run(init) for i in range(4000): # 迭代训练4000次 sess.run(train, feed_dict={xs:X,ys:class_y}) # 训练train，填入数据 if i%50==0: # 每50次输出当前的准确度 print(compute_accuracy(xs,ys,X,class_y,sess,prediction)) 12- 计算准确度 ‘’’计算预测准确度’’’def compute_accuracy(xs,ys,X,y,sess,prediction): y_pre = sess.run(prediction,feed_dict={xs:X}) correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(y,1)) #tf.argmax 给出某个tensor对象在某一维上的其数据最大值所在的索引值,即为对应的数字，tf.equal 来检测我们的预测是否真实标签匹配 accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32)) # 平均值即为准确度 result = sess.run(accuracy,feed_dict={xs:X,ys:y}) return result1234567891011- 输出每一次预测的结果准确度 ![enter description here][9]## 六、手写数字识别_2### 1、说明- [全部代码](https://github.com/lawlite19/MachineLearning_TensorFlow/blob/master/Mnist_02/mnist.py)：`https://github.com/lawlite19/MachineLearning_TensorFlow/blob/master/Mnist_02/mnist.py`- 采用TensorFlow中的mnist数据集（可以取网站下载它的数据集，http://yann.lecun.com/exdb/mnist/）- 实现代码与上面类似，它有专门的测试集### 2、代码- 随机梯度下降`SGD`,每次选出`100`个数据进行训练 for i in range(2000): batch_xs, batch_ys = minist.train.next_batch(100) sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys}) if i%50==0: print(compute_accuracy(xs,ys,minist.test.images, minist.test.labels,sess,prediction)) 1234567891011121314- 输出每一次预测的结果准确度 ![enter description here][10]## 七、手写数字识别_3_CNN卷积神经网络### 1、说明- 关于**卷积神经网络CNN**可以查看[我的博客](http://blog.csdn.net/u013082989/article/details/53673602)：http://blog.csdn.net/u013082989/article/details/53673602 - 或者[github](https://github.com/lawlite19/DeepLearning_Python)：https://github.com/lawlite19/DeepLearning_Python- [全部代码](https://github.com/lawlite19/MachineLearning_TensorFlow/blob/master/Mnist_03_CNN/mnist_cnn.py)：`https://github.com/lawlite19/MachineLearning_TensorFlow/blob/master/Mnist_03_CNN/mnist_cnn.py`- 采用TensorFlow中的mnist数据集（可以取网站下载它的数据集，http://yann.lecun.com/exdb/mnist/）### 2、代码实现- 权重和偏置初始化函数 - 权重使用的`truncated_normal`进行初始化,`stddev`标准差定义为0.1 - 偏置初始化为常量0.1 ‘’’权重初始化函数’’’def weight_variable(shape): inital = tf.truncated_normal(shape, stddev=0.1) # 使用truncated_normal进行初始化 return tf.Variable(inital) ‘’’偏置初始化函数’’’def bias_variable(shape): inital = tf.constant(0.1,shape=shape) # 偏置定义为常量 return tf.Variable(inital)1234- 卷积函数 - `strides[0]`和`strides[3]`的两个1是默认值，中间两个1代表padding时在x方向运动1步，y方向运动1步 - `padding=&apos;SAME&apos;`代表经过卷积之后的输出图像和原图像大小一样 ‘’’卷积函数’’’def conv2d(x,W):#x是图片的所有参数，W是此卷积层的权重 return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding=’SAME’)#strides[0]和strides3的两个1是默认值，中间两个1代表padding时在x方向运动1步，y方向运动1步12345- 池化函数 - `ksize`指定池化核函数的大小 - 根据池化核函数的大小定义`strides`的大小 ‘’’池化函数’’’def max_pool_2x2(x): return tf.nn.max_pool(x,ksize=[1,2,2,1], strides=[1,2,2,1], padding=’SAME’)#池化的核函数大小为2x2，因此ksize=[1,2,2,1]，步长为2，因此strides=[1,2,2,1]1234- 加载`mnist`数据和定义`placeholder` - 输入数据`x_image`最后一个`1`代表`channel`的数量,若是`RGB`3个颜色通道就定义为3 - `keep_prob` 用于**dropout**防止过拟合 mnist = input_data.read_data_sets(&apos;MNIST_data&apos;, one_hot=True) # 下载数据 xs = tf.placeholder(tf.float32,[None,784]) # 输入图片的大小，28x28=784 ys = tf.placeholder(tf.float32,[None,10]) # 输出0-9共10个数字 keep_prob = tf.placeholder(tf.float32) # 用于接收dropout操作的值，dropout为了防止过拟合 x_image = tf.reshape(xs,[-1,28,28,1]) #-1代表先不考虑输入的图片例子多少这个维度，后面的1是channel的数量，因为我们输入的图片是黑白的，因此channel是1，例如如果是RGB图像，那么channel就是3 123- 第一层卷积和池化 - 使用**ReLu**激活函数 &apos;&apos;&apos;第一层卷积，池化&apos;&apos;&apos; W_conv1 = weight_variable([5,5,1,32]) # 卷积核定义为5x5,1是输入的通道数目，32是输出的通道数目 b_conv1 = bias_variable([32]) # 每个输出通道对应一个偏置 h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1) # 卷积运算，并使用ReLu激活函数激活 h_pool1 = max_pool_2x2(h_conv1) # pooling操作 123- 第二层卷积和池化 &apos;&apos;&apos;第二层卷积，池化&apos;&apos;&apos; W_conv2 = weight_variable([5,5,32,64]) # 卷积核还是5x5,32个输入通道，64个输出通道 b_conv2 = bias_variable([64]) # 与输出通道一致 h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2)+b_conv2) h_pool2 = max_pool_2x2(h_conv2) 123- 全连接第一层 &apos;&apos;&apos;全连接层&apos;&apos;&apos; h_pool2_flat = tf.reshape(h_pool2, [-1,7*7*64]) # 将最后操作的数据展开 W_fc1 = weight_variable([7*7*64,1024]) # 下面就是定义一般神经网络的操作了，继续扩大为1024 b_fc1 = bias_variable([1024]) # 对应的偏置 h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1)+b_fc1) # 运算、激活（这里不是卷积运算了，就是对应相乘） 123- `dropout`防止过拟合 &apos;&apos;&apos;dropout&apos;&apos;&apos; h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob) # dropout操作 1234- 最后一层全连接预测,使用梯度下降优化**交叉熵损失函数** - 使用**softmax**分类器分类 &apos;&apos;&apos;最后一层全连接&apos;&apos;&apos; W_fc2 = weight_variable([1024,10]) # 最后一层权重初始化 b_fc2 = bias_variable([10]) # 对应偏置 prediction = tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2)+b_fc2) # 使用softmax分类器 cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1])) # 交叉熵损失函数来定义cost function train_step = tf.train.AdamOptimizer(1e-3).minimize(cross_entropy) # 调用梯度下降 123- 定义Session，使用`SGD`训练 &apos;&apos;&apos;下面就是tf的一般操作，定义Session，初始化所有变量，placeholder传入值训练&apos;&apos;&apos; sess = tf.Session() sess.run(tf.initialize_all_variables()) for i in range(1000): batch_xs, batch_ys = mnist.train.next_batch(100) # 使用SGD，每次选取100个数据训练 sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.5}) # dropout值定义为0.5 if i % 50 == 0: print compute_accuracy(xs,ys,mnist.test.images, mnist.test.labels,keep_prob,sess,prediction) # 每50次输出一下准确度 12- 计算准确度函数 - 和上面的两个计算准确度的函数一致，就是多了个**dropout**的参数`keep_prob` ‘’’计算准确度函数’’’def compute_accuracy(xs,ys,X,y,keep_prob,sess,prediction): y_pre = sess.run(prediction,feed_dict={xs:X,keep_prob:1.0}) # 预测，这里的keep_prob是dropout时用的，防止过拟合 correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(y,1)) #tf.argmax 给出某个tensor对象在某一维上的其数据最大值所在的索引值,即为对应的数字，tf.equal 来检测我们的预测是否真实标签匹配 accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32)) # 平均值即为准确度 result = sess.run(accuracy,feed_dict={xs:X,ys:y,keep_prob:1.0}) return result12345678910111213### 3、运行结果- 测试集上准确度 ![enter description here][11] - 使用`top`命令查看占用的CPU和内存，还是很消耗CPU和内存的，所以上面只输出了四次我就终止了![enter description here][12] - 由于我在虚拟机里运行的`TensorFlow`程序，分配了`5G`的内存，若是内存不够会报一个错误。-------------------------------------------------------------## 八、保存和提取神经网络### 1、保存- 定义要保存的数据 W = tf.Variable(initial_value=[[1,2,3],[3,4,5]], name=’weights’, dtype=tf.float32) # 注意需要指定name和dtypeb = tf.Variable(initial_value=[1,2,3], name=’biases’, dtype=tf.float32)init = tf.initialize_all_variables()1- 保存 saver = tf.train.Saver()with tf.Session() as sess: sess.run(init) save_path = saver.save(sess, ‘my_network/save_net.ckpt’) # 保存目录，注意要在当前项目下建立my_network的目录 print (‘保存到 :’,save_path)12### 2、提取- 定义数据 W = tf.Variable(np.arange(6).reshape((2,3)), name=’weights’, dtype=tf.float32) # 注意与之前保存的一致b = tf.Variable(np.arange((3)), name=’biases’, dtype=tf.float32)1- `restore`提取 saver = tf.train.Saver()with tf.Session() as sess: saver.restore(sess,’my_network/save_net.ckpt’) print(‘weights:’,sess.run(W)) # 输出一下结果 print(‘biases:’,sess.run(b))12345678910111213141516171819202122-------------------------------------------------- 以下来自`tensorflow-turorial`，使用`python3.5`## 九、线性模型Linear Model- [全部代码][13]- 使用`MNIST`数据集### 1、加载MNIST数据集，并输出信息``` stylus&apos;&apos;&apos;Load MNIST data and print some information&apos;&apos;&apos;data = input_data.read_data_sets(&quot;MNIST_data&quot;, one_hot = True)print(&quot;Size of:&quot;)print(&quot;\\t training-set:\\t\\t&#123;&#125;&quot;.format(len(data.train.labels)))print(&quot;\\t test-set:\\t\\t\\t&#123;&#125;&quot;.format(len(data.test.labels)))print(&quot;\\t validation-set:\\t&#123;&#125;&quot;.format(len(data.validation.labels)))print(data.test.labels[0:5])data.test.cls = np.array([label.argmax() for label in data.test.labels]) # get the actual valueprint(data.test.cls[0:5]) 2、绘制9张图像 实现函数 1234567891011121314151617181920'''define a funciton to plot 9 images'''def plot_images(images, cls_true, cls_pred = None): ''' @parameter images: the images info @parameter cls_true: the true value of image @parameter cls_pred: the prediction value, default is None ''' assert len(images) == len(cls_true) == 9 # only show 9 images fig, axes = plt.subplots(nrows=3, ncols=3) for i, ax in enumerate(axes.flat): ax.imshow(images[i].reshape(img_shape), cmap=\"binary\") # binary means black_white image # show the true and pred values if cls_pred is None: xlabel = \"True: &#123;0&#125;\".format(cls_true[i]) else: xlabel = \"True: &#123;0&#125;,Pred: &#123;1&#125;\".format(cls_true[i],cls_pred[i]) ax.set_xlabel(xlabel) ax.set_xticks([]) # remove the ticks ax.set_yticks([]) plt.show() 选择测试集中的9张图显示 1234567891011121314'''show 9 images'''images = data.test.images[0:9]cls_true = data.test.cls[0:9]plot_images(images, cls_true)``` ![enter description here][14]### 3、定义要训练的模型- 定义`placeholder```` stylus'''define the placeholder'''X = tf.placeholder(tf.float32, [None, img_size_flat]) # None means the arbitrary number of labels, the features size is img_size_flat y_true = tf.placeholder(tf.float32, [None, num_classes]) # output size is num_classesy_true_cls = tf.placeholder(tf.int64, [None]) 定义weights和biases 123'''define weights and biases'''weights = tf.Variable(tf.zeros([img_size_flat, num_classes])) # img_size_flat*num_classesbiases = tf.Variable(tf.zeros([num_classes])) 定义模型 123456789'''define the model'''logits = tf.matmul(X,weights) + biases y_pred = tf.nn.softmax(logits)y_pred_cls = tf.argmax(y_pred, dimension=1)cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_true, logits=logits)cost = tf.reduce_mean(cross_entropy)'''define the optimizer'''optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(cost) 定义求准确度 123'''define the accuracy'''correct_prediction = tf.equal(y_pred_cls, y_true_cls)accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) 定义session 1234'''run the datagraph and use batch gradient descent'''session = tf.Session()session.run(tf.global_variables_initializer())batch_size = 100 4、定义函数optimize进行bgd训练123456789'''define a function to run the optimizer'''def optimize(num_iterations): ''' @parameter num_iterations: the traning times ''' for i in range(num_iterations): x_batch, y_true_batch = data.train.next_batch(batch_size) feed_dict_train = &#123;X: x_batch,y_true: y_true_batch&#125; session.run(optimizer, feed_dict=feed_dict_train) 5、定义输出准确度的函数 代码 1234567feed_dict_test = &#123;X: data.test.images, y_true: data.test.labels, y_true_cls: data.test.cls&#125; '''define a function to print the accuracy''' def print_accuracy(): acc = session.run(accuracy, feed_dict=feed_dict_test) print(\"Accuracy on test-set:&#123;0:.1%&#125;\".format(acc)) 输出：Accuracy on test-set:89.4% 6、定义绘制错误预测的图片函数 代码 12345678'''define a function to plot the error prediciton''' def plot_example_errors(): correct, cls_pred = session.run([correct_prediction, y_pred_cls], feed_dict=feed_dict_test) incorrect = (correct == False) images = data.test.images[incorrect] # get the prediction error images cls_pred = cls_pred[incorrect] # get prediction value cls_true = data.test.cls[incorrect] # get true value plot_images(images[0:9], cls_true[0:9], cls_pred[0:9]) 输出： 7、定义可视化权重的函数 代码 123456789101112131415'''define a fucntion to plot weights'''def plot_weights(): w = session.run(weights) w_min = np.min(w) w_max = np.max(w) fig, axes = plt.subplots(3, 4) fig.subplots_adjust(0.3, 0.3) for i, ax in enumerate(axes.flat): if i&lt;10: image = w[:,i].reshape(img_shape) ax.set_xlabel(\"Weights: &#123;0&#125;\".format(i)) ax.imshow(image, vmin=w_min,vmax=w_max,cmap=\"seismic\") ax.set_xticks([]) ax.set_yticks([]) plt.show() 输出： 8、定义输出confusion_matrix的函数 代码： 12345678910111213141516'''define a function to printand plot the confusion matrix using scikit-learn.''' def print_confusion_martix(): cls_true = data.test.cls # test set actual value cls_pred = session.run(y_pred_cls, feed_dict=feed_dict_test) # test set predict value cm = confusion_matrix(y_true=cls_true,y_pred=cls_pred) # use sklearn confusion_matrix print(cm) plt.imshow(cm, interpolation='nearest',cmap=plt.cm.Blues) # Plot the confusion matrix as an image. plt.tight_layout() plt.colorbar() tick_marks = np.arange(num_classes) tick_marks = np.arange(num_classes) plt.xticks(tick_marks, range(num_classes)) plt.yticks(tick_marks, range(num_classes)) plt.xlabel('Predicted') plt.ylabel('True') plt.show() 输出： 十：CNN 全部代码 使用MNIST数据集 加载数据，绘制9张图等函数与上面一致，readme中不再写出 1、定义CNN所需要的变量123456'''define cnn description'''filter_size1 = 5 # the first conv filter size is 5x5 num_filters1 = 32 # there are 32 filtersfilter_size2 = 5 # the second conv filter sizenum_filters2 = 64 # there are 64 filtersfc_size = 1024 # fully-connected layer 2、初始化weights和biases的函数123456789101112'''define a function to intialize weights'''def initialize_weights(shape): ''' @param shape：the shape of weights ''' return tf.Variable(tf.truncated_normal(shape=shape, stddev=0.1))'''define a function to intialize biases'''def initialize_biases(length): ''' @param length: the length of biases, which is a vector ''' return tf.Variable(tf.constant(0.1,shape=[length])) 3、定义卷积操作和池化（如果使用的话）的函数12345678910111213141516171819202122232425'''define a function to do conv and pooling if used'''def conv_layer(input, num_input_channels, filter_size, num_output_filters, use_pooling=True): ''' @param input: the input of previous layer's output @param num_input_channels: input channels @param filter_size: the weights filter size @param num_output_filters: the output number channels @param use_pooling: if use pooling operation ''' shape = [filter_size, filter_size, num_input_channels, num_output_filters] weights = initialize_weights(shape=shape) biases = initialize_biases(length=num_output_filters) # one for each filter layer = tf.nn.conv2d(input=input, filter=weights, strides=[1,1,1,1], padding='SAME') layer += biases if use_pooling: layer = tf.nn.max_pool(value=layer, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\") # the kernel function size is 2x2,so the ksize=[1,2,2,1] layer = tf.nn.relu(layer) return layer, weights 4、定义将卷积层展开的函数123456789'''define a function to flat conv layer'''def flatten_layer(layer): ''' @param layer: the conv layer ''' layer_shape = layer.get_shape() # get the shape of the layer(layer_shape == [num_images, img_height, img_width, num_channels]) num_features = layer_shape[1:4].num_elements() # [1:4] means the last three demension, namely the flatten size layer_flat = tf.reshape(layer, [-1, num_features]) # reshape to flat,-1 means don't care about the number of images return layer_flat, num_features 5、定义全连接层的函数1234567891011121314'''define a function to do fully-connected'''def fc_layer(input, num_inputs, num_outputs, use_relu=True): ''' @param input: the input @param num_inputs: the input size @param num_outputs: the output size @param use_relu: if use relu activation function ''' weights = initialize_weights(shape=[num_inputs, num_outputs]) biases = initialize_biases(num_outputs) layer = tf.matmul(input, weights) + biases if use_relu: layer = tf.nn.relu(layer) return layer 6、定义模型 定义placeholder 123456'''define the placeholder'''X = tf.placeholder(tf.float32, shape=[None, img_flat_size], name=\"X\")X_image = tf.reshape(X, shape=[-1, img_size, img_size, num_channels]) # reshape to the image shapey_true = tf.placeholder(tf.float32, [None, num_classes], name=\"y_true\")y_true_cls = tf.argmax(y_true, axis=1)keep_prob = tf.placeholder(tf.float32) # drop out placeholder 定义卷积、dropout、和全连接 123456789101112131415161718192021222324'''define the cnn model'''layer_conv1, weights_conv1 = conv_layer(input=X_image, num_input_channels=num_channels, filter_size=filter_size1, num_output_filters=num_filters1, use_pooling=True)print(\"conv1:\",layer_conv1)layer_conv2, weights_conv2 = conv_layer(input=layer_conv1, num_input_channels=num_filters1, filter_size=filter_size2, num_output_filters=num_filters2, use_pooling=True)print(\"conv2:\",layer_conv2)layer_flat, num_features = flatten_layer(layer_conv2) # the num_feature is 7x7x36=1764print(\"flatten layer:\", layer_flat) layer_fc1 = fc_layer(layer_flat, num_features, fc_size, use_relu=True)print(\"fully-connected layer1:\", layer_fc1)layer_drop_out = tf.nn.dropout(layer_fc1, keep_prob) # dropout operationlayer_fc2 = fc_layer(layer_drop_out, fc_size, num_classes,use_relu=False)print(\"fully-connected layer2:\", layer_fc2)y_pred = tf.nn.softmax(layer_fc2)y_pred_cls = tf.argmax(y_pred, axis=1)cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_true, logits=layer_fc2)cost = tf.reduce_mean(cross_entropy)optimizer = tf.train.AdamOptimizer(learning_rate=1e-3).minimize(cost) # use AdamOptimizer优化 定义求准确度 123'''define accuracy'''correct_prediction = tf.equal(y_true_cls, y_pred_cls)accuracy = tf.reduce_mean(tf.cast(correct_prediction,dtype=tf.float32)) 7、定义训练的函数optimize，使用bgd 代码： 1234567891011121314151617181920'''define a function to run train the model with bgd'''total_iterations = 0 # record the total iterationsdef optimize(num_iterations): ''' @param num_iterations: the total interations of train batch_size operation ''' global total_iterations start_time = time.time() for i in range(total_iterations,total_iterations + num_iterations): x_batch, y_batch = data.train.next_batch(batch_size) feed_dict = &#123;X: x_batch, y_true: y_batch, keep_prob: 0.5&#125; session.run(optimizer, feed_dict=feed_dict) if i % 10 == 0: acc = session.run(accuracy, feed_dict=feed_dict) msg = \"Optimization Iteration: &#123;0:&gt;6&#125;, Training Accuracy: &#123;1:&gt;6.1%&#125;\" # &#123;:&gt;6&#125;means the fixed width,&#123;1:&gt;6.1%&#125;means the fixed width is 6 and keep 1 decimal place print(msg.format(i + 1, acc)) total_iterations += num_iterations end_time = time.time() time_dif = end_time-start_time print(\"time usage:\"+str(timedelta(seconds=int(round(time_dif))))) 输出： 123456789101112131415161718192021222324252627282930313233343536Optimization Iteration: 651, Training Accuracy: 99.0%Optimization Iteration: 661, Training Accuracy: 99.0%Optimization Iteration: 671, Training Accuracy: 99.0%Optimization Iteration: 681, Training Accuracy: 99.0%Optimization Iteration: 691, Training Accuracy: 99.0%Optimization Iteration: 701, Training Accuracy: 99.0%Optimization Iteration: 711, Training Accuracy: 99.0%Optimization Iteration: 721, Training Accuracy: 99.0%Optimization Iteration: 731, Training Accuracy: 99.0%Optimization Iteration: 741, Training Accuracy: 100.0%Optimization Iteration: 751, Training Accuracy: 99.0%Optimization Iteration: 761, Training Accuracy: 99.0%Optimization Iteration: 771, Training Accuracy: 97.0%Optimization Iteration: 781, Training Accuracy: 96.0%Optimization Iteration: 791, Training Accuracy: 98.0%Optimization Iteration: 801, Training Accuracy: 100.0%Optimization Iteration: 811, Training Accuracy: 100.0%Optimization Iteration: 821, Training Accuracy: 97.0%Optimization Iteration: 831, Training Accuracy: 98.0%Optimization Iteration: 841, Training Accuracy: 99.0%Optimization Iteration: 851, Training Accuracy: 99.0%Optimization Iteration: 861, Training Accuracy: 99.0%Optimization Iteration: 871, Training Accuracy: 96.0%Optimization Iteration: 881, Training Accuracy: 99.0%Optimization Iteration: 891, Training Accuracy: 99.0%Optimization Iteration: 901, Training Accuracy: 98.0%Optimization Iteration: 911, Training Accuracy: 99.0%Optimization Iteration: 921, Training Accuracy: 99.0%Optimization Iteration: 931, Training Accuracy: 99.0%Optimization Iteration: 941, Training Accuracy: 98.0%Optimization Iteration: 951, Training Accuracy: 100.0%Optimization Iteration: 961, Training Accuracy: 99.0%Optimization Iteration: 971, Training Accuracy: 98.0%Optimization Iteration: 981, Training Accuracy: 99.0%Optimization Iteration: 991, Training Accuracy: 100.0%time usage:0:07:07 8、定义批量预测的函数，方便输出训练错的图像123456789101112131415161718192021222324252627batch_size_test = 256def print_test_accuracy(print_error=False,print_confusion_matrix=False): ''' @param print_error: whether plot the error images @param print_confusion_matrix: whether plot the confusion_matrix ''' num_test = len(data.test.images) cls_pred = np.zeros(shape=num_test, dtype=np.int) # declare the cls_pred i = 0 #predict the test set using batch_size while i &lt; num_test: j = min(i + batch_size_test, num_test) images = data.test.images[i:j,:] labels = data.test.labels[i:j,:] feed_dict = &#123;X:images,y_true:labels,keep_prob:0.5&#125; cls_pred[i:j] = session.run(y_pred_cls,feed_dict=feed_dict) i = j cls_true = data.test.cls correct = (cls_true == cls_pred) correct_sum = correct.sum() # correct predictions acc = float(correct_sum)/num_test msg = \"Accuracy on Test-Set: &#123;0:.1%&#125; (&#123;1&#125; / &#123;2&#125;)\" print(msg.format(acc, correct_sum, num_test)) if print_error: plot_error_pred(cls_pred,correct) if print_confusion_matrix: plot_confusin_martrix(cls_pred) 9、定义可视化卷积核权重的函数 代码： 12345678910111213141516171819'''define a function to plot conv weights'''def plot_conv_weights(weights,input_channel=0): ''' @param weights: the conv filter weights, for example: the weights_conv1 and weights_conv2, which are 4 dimension [filter_size, filter_size, num_input_channels, num_output_filters] @param input_channel: the input_channels ''' w = session.run(weights) w_min = np.min(w) w_max = np.max(w) num_filters = w.shape[3] # get the number of filters num_grids = math.ceil(math.sqrt(num_filters)) fig, axes = plt.subplots(num_grids, num_grids) for i, ax in enumerate(axes.flat): if i &lt; num_filters: img = w[:,:,input_channel,i] # the ith weight ax.imshow(img,vmin=w_min,vmax=w_max,interpolation=\"nearest\",cmap='seismic') ax.set_xticks([]) ax.set_yticks([]) plt.show() 输出： 第一层： 第二层：10、定义可视化卷积层输出的函数 代码： 123456789101112131415161718'''define a function to plot conv output layer'''def plot_conv_layer(layer, image): ''' @param layer: the conv layer, which is also a image after conv @param image: the image info ''' feed_dict = &#123;X:[image]&#125; values = session.run(layer, feed_dict=feed_dict) num_filters = values.shape[3] # get the number of filters num_grids = math.ceil(math.sqrt(num_filters)) fig, axes = plt.subplots(num_grids,num_grids) for i, ax in enumerate(axes.flat): if i &lt; num_filters: img = values[0,:,:,i] ax.imshow(img, interpolation=\"nearest\",cmap=\"binary\") ax.set_xticks([]) ax.set_yticks([]) plt.show() 输出： 第一层： 第二层： 十一：使用prettytensor实现CNNModel 全部代码 使用MNIST数据集 加载数据，绘制9张图等函数与九一致，readme中不再写出1、定义模型 定义placeholder,与之前的一致 12345'''declare the placeholder'''X = tf.placeholder(tf.float32, [None, img_flat_size], name=\"X\")X_img = tf.reshape(X, shape=[-1,img_size,img_size, num_channels])y_true = tf.placeholder(tf.float32, shape=[None, num_classes], name=\"y_true\")y_true_cls = tf.argmax(y_true,1) 使用prettytensor实现CNN模型 1234567891011'''define the cnn model with prettytensor'''x_pretty = pt.wrap(X_img)with pt.defaults_scope(): # or pt.defaults_scope(activation_fn=tf.nn.relu) if just use one activation function y_pred, loss = x_pretty.\\ conv2d(kernel=5, depth=16, activation_fn=tf.nn.relu, name=\"conv_layer1\").\\ max_pool(kernel=2, stride=2).\\ conv2d(kernel=5, depth=36, activation_fn=tf.nn.relu, name=\"conv_layer2\").\\ max_pool(kernel=2, stride=2).\\ flatten().\\ fully_connected(size=128, activation_fn=tf.nn.relu, name=\"fc_layer1\").\\ softmax_classifier(num_classes=num_classes, labels=y_true) 获取卷积核的权重(后续可视化) 1234567'''define a function to get weights'''def get_weights_variable(layer_name): with tf.variable_scope(layer_name, reuse=True): variable = tf.get_variable(\"weights\") return variableconv1_weights = get_weights_variable(\"conv_layer1\")conv2_weights = get_weights_variable(\"conv_layer2\") 定义optimizer训练，和之前的一样了 1234567'''define optimizer to train'''optimizer = tf.train.AdamOptimizer().minimize(loss)y_pred_cls = tf.argmax(y_pred,1)correct_prediction = tf.equal(y_pred_cls, y_true_cls)accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))session = tf.Session()session.run(tf.global_variables_initializer()) 十二：CNN,保存和加载模型，使用Early Stopping 全部代码 使用MNIST数据集 加载数据，绘制9张图等函数与九一致，readme中不再写出 CNN模型的定义和十一中的一致，readme中不再写出1、保存模型 创建saver,和保存的目录 123456'''define a Saver to save the network'''saver = tf.train.Saver()save_dir = \"checkpoints/\"if not os.path.exists(save_dir): os.makedirs(save_dir)save_path = os.path.join(save_dir, 'best_validation') 保存session,对应到下面2中的Early Stopping，将最好的模型保存 1saver.save(sess=session, save_path=save_path) 2、Early Stopping123456789101112131415161718192021222324252627282930313233343536'''declear the train info'''train_batch_size = 64best_validation_accuracy = 0.0last_improvement = 0require_improvement_iterations = 1000total_iterations = 0'''define a function to optimize the optimizer'''def optimize(num_iterations): global total_iterations global best_validation_accuracy global last_improvement start_time = time.time() for i in range(num_iterations): total_iterations += 1 X_batch, y_true_batch = data.train.next_batch(train_batch_size) feed_dict_train = &#123;X: X_batch, y_true: y_true_batch&#125; session.run(optimizer, feed_dict=feed_dict_train) if (total_iterations%100 == 0) or (i == num_iterations-1): acc_train = session.run(accuracy, feed_dict=feed_dict_train) acc_validation, _ = validation_accuracy() if acc_validation &gt; best_validation_accuracy: best_validation_accuracy = acc_validation last_improvement = total_iterations saver.save(sess=session, save_path=save_path) improved_str = \"*\" else: improved_str = \"\" msg = \"Iter: &#123;0:&gt;6&#125;, Train_batch accuracy:&#123;1:&gt;6.1%&#125;, validation acc:&#123;2:&gt;6.1%&#125; &#123;3&#125;\" print(msg.format(i+1, acc_train, acc_validation, improved_str)) if total_iterations-last_improvement &gt; require_improvement_iterations: print('No improvement found in a while, stop running') break end_time = time.time() time_diff = end_time-start_time print(\"Time usage:\" + str(timedelta(seconds=int(round(time_diff))))) 调用optimize(10000)输出信息 12345678910111213141516171819Iter: 5100, Train_batch accuracy:100.0%, validation acc: 98.8% *Iter: 5200, Train_batch accuracy:100.0%, validation acc: 98.3% Iter: 5300, Train_batch accuracy:100.0%, validation acc: 98.7% Iter: 5400, Train_batch accuracy: 98.4%, validation acc: 98.6% Iter: 5500, Train_batch accuracy: 98.4%, validation acc: 98.6% Iter: 5600, Train_batch accuracy:100.0%, validation acc: 98.7% Iter: 5700, Train_batch accuracy: 96.9%, validation acc: 98.9% *Iter: 5800, Train_batch accuracy:100.0%, validation acc: 98.6% Iter: 5900, Train_batch accuracy:100.0%, validation acc: 98.6% Iter: 6000, Train_batch accuracy: 98.4%, validation acc: 98.7% Iter: 6100, Train_batch accuracy:100.0%, validation acc: 98.7% Iter: 6200, Train_batch accuracy:100.0%, validation acc: 98.7% Iter: 6300, Train_batch accuracy: 98.4%, validation acc: 98.8% Iter: 6400, Train_batch accuracy: 98.4%, validation acc: 98.8% Iter: 6500, Train_batch accuracy:100.0%, validation acc: 98.7% Iter: 6600, Train_batch accuracy:100.0%, validation acc: 98.7% Iter: 6700, Train_batch accuracy:100.0%, validation acc: 98.8% No improvement found in a while, stop runningTime usage:0:18:43 可以看到最后10次输出（每100次输出一次）在验证集上准确度都没有提高，停止执行 3、 小批量预测并计算准确率 因为需要预测测试集和验证集，这里参数指定需要的images 1234567891011121314'''define a function to predict using batch'''batch_size_predict = 256def predict_cls(images, labels, cls_true): num_images = len(images) cls_pred = np.zeros(shape=num_images, dtype=np.int) i = 0 while i &lt; num_images: j = min(i+batch_size_predict, num_images) feed_dict = &#123;X: images[i:j,:], y_true: labels[i:j,:]&#125; cls_pred[i:j] = session.run(y_pred_cls, feed_dict=feed_dict) i = j correct = (cls_true==cls_pred) return correct, cls_pred 测试集和验证集直接调用即可 12345def predict_cls_test(): return predict_cls(data.test.images, data.test.labels, data.test.cls)def predict_cls_validation(): return predict_cls(data.validation.images, data.validation.labels, data.validation.cls) 计算验证集准确率（上面optimize函数中需要用到） 123456789'''calculate the acc'''def cls_accuracy(correct): correct_sum = correct.sum() acc = float(correct_sum)/len(correct) return acc, correct_sum'''define a function to calculate the validation acc'''def validation_accuracy(): correct, _ = predict_cls_validation() return cls_accuracy(correct) 计算测试集准确率，并且输出错误的预测和confusion matrix 123456789101112131415161718'''define a function to calculate test acc'''def print_test_accuracy(show_example_errors=False, show_confusion_matrix=False): correct, cls_pred = predict_cls_test() acc, num_correct = cls_accuracy(correct) num_images = len(correct) msg = \"Accuracy on Test-Set: &#123;0:.1%&#125; (&#123;1&#125; / &#123;2&#125;)\" print(msg.format(acc, num_correct, num_images)) # Plot some examples of mis-classifications, if desired. if show_example_errors: print(\"Example errors:\") plot_example_errors(cls_pred=cls_pred, correct=correct) # Plot the confusion matrix, if desired. if show_confusion_matrix: print(\"Confusion Matrix:\") plot_confusion_matrix(cls_pred=cls_pred) 十二：模型融合 全部代码 使用MNIST数据集 一些方法和之前的一致，不在给出 其中训练了多个CNN 模型，然后取预测的平均值作为最后的预测结果1、将测试集和验证集合并后，并重新划分 主要是希望训练时数据集有些变换，否则都是一样的数据去训练了，最后再融合意义不大12345678910111213141516171819'''将training set和validation set合并，并重新划分'''combine_images = np.concatenate([data.train.images, data.validation.images], axis=0)combine_labels = np.concatenate([data.train.labels, data.validation.labels], axis=0)print(\"合并后图片：\", combine_images.shape)print(\"合并后label：\", combine_labels.shape)combined_size = combine_labels.shape[0]train_size = int(0.8*combined_size)validation_size = combined_size - train_size'''函数：将合并后的重新随机划分'''def random_training_set(): idx = np.random.permutation(combined_size) # 将0-combined_size数字随机排列 idx_train = idx[0:train_size] idx_validation = idx[train_size:] x_train = combine_images[idx_train, :] y_train = combine_labels[idx_train, :] x_validation = combine_images[idx_validation, :] y_validation = combine_images[idx_validation, :] return x_train, y_train, x_validation, y_validation 2、融合模型 加载训练好的模型，并输出每个模型在测试集的预测结果等 1234567891011121314151617def ensemble_predictions(): pred_labels = [] test_accuracies = [] validation_accuracies = [] for i in range(num_networks): saver.restore(sess=session, save_path=get_save_path(i)) test_acc = test_accuracy() test_accuracies.append(test_acc) validation_acc = validation_accuracy() validation_accuracies.append(validation_acc) msg = \"网络：&#123;0&#125;，验证集：&#123;1:.4f&#125;，测试集&#123;2:.4f&#125;\" print(msg.format(i, validation_acc, test_acc)) pred = predict_labels(data.test.images) pred_labels.append(pred) return np.array(pred_labels),\\ np.array(test_accuracies),\\ np.array(validation_accuracies) 调用pred_labels, test_accuracies, val_accuracies = ensemble_predictions() 取均值：ensemble_pred_labels = np.mean(pred_labels, axis=0) 融合后的真实结果：ensemble_cls_pred = np.argmax(ensemble_pred_labels, axis=1) 其他一些信息： 12345678910111213141516ensemble_correct = (ensemble_cls_pred == data.test.cls)ensemble_incorrect = np.logical_not(ensemble_correct)print(test_accuracies)best_net = np.argmax(test_accuracies)print(best_net)print(test_accuracies[best_net])best_net_pred_labels = pred_labels[best_net, :, :]best_net_cls_pred = np.argmax(best_net_pred_labels, axis=1)best_net_correct = (best_net_cls_pred == data.test.cls)best_net_incorrect = np.logical_not(best_net_correct)print(\"融合后预测对的：\", np.sum(ensemble_correct))print(\"单个最好模型预测对的\", np.sum(best_net_correct))ensemble_better = np.logical_and(best_net_incorrect, ensemble_correct) # 融合之后好于单个的个数print(ensemble_better.sum())best_net_better = np.logical_and(best_net_correct, ensemble_incorrect) # 单个好于融合之后的个数print(best_net_better.sum()) 十二：Cifar-10数据集，使用variable_scope重复使用变量 全部代码 使用CIFAR-10数据集 创建了两个网络，一个用于训练，一个用于测试，测试使用的是训练好的权重参数，所以用到参数重用 网络结构 1、数据集 导入包： 这是别人实现好的下载和处理cifar-10数据集的diamante12import cifar10from cifar10 import img_size, num_channels, num_classes 输出一些数据集信息 123456789101112'''下载cifar10数据集, 大概163M'''cifar10.maybe_download_and_extract()'''加载数据集'''images_train, cls_train, labels_train = cifar10.load_training_data()images_test, cls_test, labels_test = cifar10.load_test_data()'''打印一些信息'''class_names = cifar10.load_class_names()print(class_names)print(\"Size of:\")print(\"training set:\\t\\t&#123;&#125;\".format(len(images_train)))print(\"test set:\\t\\t\\t&#123;&#125;\".format(len(images_test))) 显示9张图片函数 相比之前的，加入了smooth 123456789101112131415161718192021'''显示9张图片函数'''def plot_images(images, cls_true, cls_pred=None, smooth=True): # smooth是否平滑显示 assert len(images) == len(cls_true) == 9 fig, axes = plt.subplots(3,3) for i, ax in enumerate(axes.flat): if smooth: interpolation = 'spline16' else: interpolation = 'nearest' ax.imshow(images[i, :, :, :], interpolation=interpolation) cls_true_name = class_names[cls_true[i]] if cls_pred is None: xlabel = \"True:&#123;0&#125;\".format(cls_true_name) else: cls_pred_name = class_names[cls_pred[i]] xlabel = \"True:&#123;0&#125;, Pred:&#123;1&#125;\".format(cls_true_name, cls_pred_name) ax.set_xlabel(xlabel) ax.set_xticks([]) ax.set_yticks([]) plt.show() 2、定义placeholder123X = tf.placeholder(tf.float32, shape=[None, img_size, img_size, num_channels], name=\"X\")y_true = tf.placeholder(tf.float32, shape=[None, num_classes], name=\"y\")y_true_cls = tf.argmax(y_true, axis=1) 3、图片处理 单张图片处理 原图是32*32像素的，裁剪成24*24像素的 如果是训练集进行一些裁剪，翻转，饱和度等处理 如果是测试集，只进行简单的裁剪处理 这也是为什么使用variable_scope定义两个网络123456789101112131415'''单个图片预处理, 测试集只需要裁剪就行了'''def pre_process_image(image, training): if training: image = tf.random_crop(image, size=[img_size_cropped, img_size_cropped, num_channels]) # 裁剪 image = tf.image.random_flip_left_right(image) # 左右翻转 image = tf.image.random_hue(image, max_delta=0.05) # 色调调整 image = tf.image.random_brightness(image, max_delta=0.2) # 曝光 image = tf.image.random_saturation(image, lower=0.0, upper=2.0) # 饱和度 '''上面的调整可能pixel值超过[0, 1], 所以约束一下''' image = tf.minimum(image, 1.0) image = tf.maximum(image, 0.0) else: image = tf.image.resize_image_with_crop_or_pad(image, target_height=img_size_cropped, target_width=img_size_cropped) return image 多张图片处理 因为训练和测试是都是使用batch的方式 调用上面处理单张图片的函数 tf.map_fn(fn, elems)函数，前面一般是lambda函数，后面是所有的数据1234'''调用上面的函数，处理多个图片images'''def pre_process(images, training): images = tf.map_fn(lambda image: pre_process_image(image, training), images) # tf.map_fn()使用lambda函数 return images 4、定义tensorflow计算图 定义主网络图 使用prettytensor 分为training和test两个阶段 123456789101112131415161718'''定义主网络函数'''def main_network(images, training): x_pretty = pt.wrap(images) if training: phase = pt.Phase.train else: phase = pt.Phase.infer with pt.defaults_scope(activation_fn=tf.nn.relu, phase=phase): y_pred, loss = x_pretty.\\ conv2d(kernel=5, depth=64, name=\"layer_conv1\", batch_normalize=True).\\ max_pool(kernel=2, stride=2).\\ conv2d(kernel=5, depth=64, name=\"layer_conv2\").\\ max_pool(kernel=2, stride=2).\\ flatten().\\ fully_connected(size=256, name=\"layer_fc1\").\\ fully_connected(size=128, name=\"layer_fc2\").\\ softmax_classifier(num_classes, labels=y_true) return y_pred, loss 创建所有网络，包含预处理图片和主网络 需要使用variable_scope, 测试阶段需要reuse训练阶段的参数12345678'''创建所有网络, 包含预处理和主网络，'''def create_network(training): # 使用variable_scope可以重复使用定义的变量，训练时创建新的，测试时重复使用 with tf.variable_scope(\"network\", reuse=not training): images = X images = pre_process(images=images, training=training) y_pred, loss = main_network(images=images, training=training) return y_pred, loss 创建训练阶段网络 定义一个global_step记录训练的次数，下面会将其保存到checkpoint,trainable为False就不会训练改变123456'''训练阶段网络创建'''global_step = tf.Variable(initial_value=0, name=\"global_step\", trainable=False) # trainable 在训练阶段不会改变_, loss = create_network(training=True)optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(loss, global_step) 定义测试阶段网络 同时定义准确率 12345'''测试阶段网络创建'''y_pred, _ = create_network(training=False)y_pred_cls = tf.argmax(y_pred, dimension=1)correct_prediction = tf.equal(y_pred_cls, y_true_cls)accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) 5、获取权重和每层的输出值信息 获取权重变量 123456def get_weights_variable(layer_name): with tf.variable_scope(\"network/\" + layer_name, reuse=True): variable = tf.get_variable(\"weights\") return variable weights_conv1 = get_weights_variable(\"layer_conv1\")weights_conv2 = get_weights_variable(\"layer_conv2\") 获取每层的输出变量 123456def get_layer_output(layer_name): tensor_name = \"network/\" + layer_name + \"/Relu:0\" tensor = tf.get_default_graph().get_tensor_by_name(tensor_name) return tensoroutput_conv1 = get_layer_output(\"layer_conv1\")output_conv2 = get_layer_output(\"layer_conv2\") 6、保存和加载计算图参数 因为第一次不会加载，所以放到try中判断 12345678910111213141516'''执行tensorflow graph'''session = tf.Session()save_dir = \"checkpoints/\"if not os.path.exists(save_dir): os.makedirs(save_dir)save_path = os.path.join(save_dir, 'cifat10_cnn')'''尝试存储最新的checkpoint, 可能会失败，比如第一次运行checkpoint不存在等'''try: print(\"开始存储最新的存储...\") last_chk_path = tf.train.latest_checkpoint(save_dir) saver.restore(session, save_path=last_chk_path) print(\"存储点来自：\", last_chk_path)except: print(\"存储错误, 初始化变量\") session.run(tf.global_variables_initializer()) 7、训练 获取batch 12345678'''SGD'''train_batch_size = 64def random_batch(): num_images = len(images_train) idx = np.random.choice(num_images, size=train_batch_size, replace=False) x_batch = images_train[idx, :, :, :] y_batch = labels_train[idx, :] return x_batch, y_batch 训练网络 每1000次保存一下checkpoint 因为上面会restored已经保存训练的网络，同时也保存了训练的次数，所以可以接着训练1234567891011121314151617def optimize(num_iterations): start_time = time.time() for i in range(num_iterations): x_batch, y_batch = random_batch() feed_dict_train = &#123;X: x_batch, y_true: y_batch&#125; i_global, _ = session.run([global_step, optimizer], feed_dict=feed_dict_train) if (i_global%100==0) or (i == num_iterations-1): batch_acc = session.run(accuracy, feed_dict=feed_dict_train) msg = \"global step: &#123;0:&gt;6&#125;, training batch accuracy: &#123;1:&gt;6.1%&#125;\" print(msg.format(i_global, batch_acc)) if(i_global%1000==0) or (i==num_iterations-1): saver.save(session, save_path=save_path, global_step=global_step) print(\"保存checkpoint\") end_time = time.time() time_diff = end_time-start_time print(\"耗时：\", str(timedelta(seconds=int(round(time_diff))))) 十三、Inception model (GoogleNet) 全部代码 使用训练好的inception model,因为模型很复杂，一般的电脑运行不起来的。 网络结构 1、下载和加载inception model 因为是预训练好的模型，所以无需我们定义结构了 导入包 这里 inception是别人实现好的下载的代码12345import numpy as npimport tensorflow as tffrom matplotlib import pyplot as pltimport inception # 第三方类加载inception modelimport os 下载和加载模型 123'''下载和加载inception model'''inception.maybe_download()model = inception.Inception() 预测和显示图片函数 123456'''预测和显示图片'''def classify(image_path): plt.imshow(plt.imread(image_path)) plt.show() pred = model.classify(image_path=image_path) model.print_scores(pred=pred, k=10, only_first_name=True) 显示调整后的图片 因为 inception model要求输入图片为 299*299 像素的，所以它会resize成这个大小然后作为输入 123456'''显示处理后图片的样式'''def plot_resized_image(image_path): resized_image = model.get_resized_image(image_path) plt.imshow(resized_image, interpolation='nearest') plt.show()plot_resized_image(image_path) 十四、迁移学习 Transfer Learning 全部代码 网络结构还是使用上一节的inception model, 去掉最后的全连接层，然后重新构建全连接层进行训练 因为inception model 是训练好的，前面的卷积层用于捕捉特征, 而后面的全连接层可用于分类，所以我们训练全连接层即可 因为要计算每张图片的transfer values,所以使用一个cache缓存transfer-values，第一次计算完成后，后面重新运行直接读取存储的结果，这样比较节省时间 transfer values是inception model在Softmax层前一层的值 cifar-10数据集, 我放在实验室电脑上运行了几个小时才得到transfer values，还是比较慢的 总之最后相当于训练下面的神经网络，对应的 transfer-values作为输入 1、准备工作 导入包 1234567891011import numpy as npimport tensorflow as tfimport prettytensor as ptfrom matplotlib import pyplot as pltimport timefrom datetime import timedeltaimport osimport inception # 第三方下载inception model的代码from inception import transfer_values_cache # cacheimport cifar10 # 也是第三方的库，下载cifar-10数据集from cifar10 import num_classes 下载cifar-10数据集 1234567'''下载cifar-10数据集'''cifar10.maybe_download_and_extract()class_names = cifar10.load_class_names()print(\"所有类别是：\",class_names)'''训练和测试集'''images_train, cls_train, labels_train = cifar10.load_training_data()images_test, cls_test, labels_test = cifar10.load_test_data() 下载和加载inception model 123'''下载inception model'''inception.maybe_download()model = inception.Inception() 计算cifar-10训练集和测试集在inception model上的transfer values 因为计算非常耗时，这里第一次运行存储到本地，以后再运行直接读取即可 transfer values的shape是(dataset size, 2048)，因为是softmax层的前一层12345678910111213141516'''训练和测试的cache的路径'''file_path_cache_train = os.path.join(cifar10.data_path, 'inception_cifar10_train.pkl')file_path_cache_test = os.path.join(cifar10.data_path, 'inception_cifar10_test.pkl')print('处理训练集上的transfer-values.......... ')image_scaled = images_train * 255.0 # cifar-10的pixel是0-1的, shape=(50000, 32, 32, 3)transfer_values_train = transfer_values_cache(cache_path=file_path_cache_train, images=image_scaled, model=model) # shape=(50000, 2048)print('处理测试集上的transfer-values.......... ')images_scaled = images_test * 255.0transfer_values_test = transfer_values_cache(cache_path=file_path_cache_test, model=model, images=images_scaled)print(\"transfer_values_train: \",transfer_values_train.shape)print(\"transfer_values_test: \",transfer_values_test.shape) 可视化一张图片对应的transfer values 1234567891011'''显示transfer values'''def plot_transfer_values(i): print(\"输入图片：\") plt.imshow(images_test[i], interpolation='nearest') plt.show() print('transfer values --&gt; 此图片在inception model上') img = transfer_values_test[i] img = img.reshape((32, 64)) plt.imshow(img, interpolation='nearest', cmap='Reds') plt.show()plot_transfer_values(16) 2、分析transfer values(1) 使用PCA主成分分析 将数据降到2维，可视化，因为transfer values是已经捕捉到的特征，所以可视化应该是可以隐约看到不同类别的数据是有区别的 取3000个数据观察（因为PCA也是比较耗时的） 12345678'''使用PCA分析transfer values'''from sklearn.decomposition import PCApca = PCA(n_components=2)transfer_values = transfer_values_train[0:3000] # 取3000个，大的话计算量太大cls = cls_train[0:3000]print(transfer_values.shape)transfer_values_reduced = pca.fit_transform(transfer_values)print(transfer_values_reduced.shape) 可视化降维后的数据 12345678910## 显示降维后的transfer valuesdef plot_scatter(values, cls): from matplotlib import cm as cm cmap = cm.rainbow(np.linspace(0.0, 1.0, num_classes)) colors = cmap[cls] x = values[:, 0] y = values[:, 1] plt.scatter(x, y, color=colors) plt.show()plot_scatter(transfer_values_reduced, cls) (2) 使用TSNE主成分分析 因为t-SNE运行非常慢，所以这里先用PCA将到50维 1234567from sklearn.manifold import TSNEpca = PCA(n_components=50)transfer_values_50d = pca.fit_transform(transfer_values)tsne = TSNE(n_components=2)transfer_values_reduced = tsne.fit_transform(transfer_values_50d)print(\"最终降维后：\", transfer_values_reduced.shape)plot_scatter(transfer_values_reduced, cls) 数据区分还是比较明显的 3、创建我们自己的网络 使用prettytensor创建一个全连接层，使用softmax作为分类 12345678910'''创建网络'''transfer_len = model.transfer_len # 获取transfer values的大小，这里是2048x = tf.placeholder(tf.float32, shape=[None, transfer_len], name=\"x\")y_true = tf.placeholder(tf.float32, shape=[None, num_classes], name=\"y\")y_true_cls = tf.argmax(y_true, axis=1)x_pretty = pt.wrap(x)with pt.defaults_scope(activation_fn=tf.nn.relu): y_pred, loss = x_pretty.\\ fully_connected(1024, name=\"layer_fc1\").\\ softmax_classifier(num_classes, labels=y_true) 优化器 123'''优化器'''global_step = tf.Variable(initial_value=0, name=\"global_step\", trainable=False)optimizer = tf.train.AdamOptimizer(0.0001).minimize(loss, global_step) 准确度 1234'''accuracy'''y_pred_cls = tf.argmax(y_pred, axis=1)correct_prediction = tf.equal(y_pred_cls, y_true_cls)accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) SGD训练 1234567891011121314151617181920212223242526'''SGD 训练'''session = tf.Session()session.run(tf.initialize_all_variables())train_batch_size = 64def random_batch(): num_images = len(images_train) idx = np.random.choice(num_images, size=train_batch_size, replace=False) x_batch = transfer_values_train[idx] y_batch = labels_train[idx] return x_batch, y_batchdef optimize(num_iterations): start_time = time.time() for i in range(num_iterations): x_batch, y_true_batch = random_batch() feed_dict_train = &#123;x: x_batch, y_true: y_true_batch&#125; i_global, _ = session.run([global_step, optimizer], feed_dict=feed_dict_train) if (i_global % 100 == 0) or (i==num_iterations-1): batch_acc = session.run(accuracy, feed_dict=feed_dict_train) msg = \"Global Step: &#123;0:&gt;6&#125;, Training Batch Accuracy: &#123;1:&gt;6.1%&#125;\" print(msg.format(i_global, batch_acc)) end_time = time.time() time_diff = end_time - start_time print(\"耗时：\", str(timedelta(seconds=int(round(time_diff))))) 使用batch size预测测试集数据 1234567891011121314'''batch 预测'''batch_size = 256def predict_cls(transfer_values, labels, cls_true): num_images = len(images_test) cls_pred = np.zeros(shape=num_images, dtype=np.int) i = 0 while i &lt; num_images: j = min(i + batch_size, num_images) feed_dict = &#123;x: transfer_values[i:j], y_true: labels[i:j]&#125; cls_pred[i:j] = session.run(y_pred_cls, feed_dict=feed_dict) i = j correct = (cls_true == cls_pred) return correct, cls_pred","comments":true,"tags":[{"name":"DeepLearning","slug":"DeepLearning","permalink":"http://lawlite.me/tags/DeepLearning/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"http://lawlite.me/tags/Tensorflow/"}]},{"title":"Python科学计算","date":"2016-11-09T14:25:43.000Z","path":"2016/11/09/Python科学计算/","text":"一、Numpy1、Numpy特征和导入 （1）用于多维数组的第三方Python包 （2）更接近于底层和硬件 (高效) （3）专注于科学计算 (方便) （4）导入包：import numpy as np 2、list转为数组 （1）a = np.array([0,1,2,3]) （2）输出为：[0 1 2 3] （3）数据类型：&lt;type &#39;numpy.ndarray&#39;&gt; 3、一维数组 （1）a = np.array([1,2,3,4])属性a.ndim–&gt;维度为1a.shape–&gt;形状，返回(4,)len(a)–&gt;长度，4 （2）访问数组a[1:5:2]下标1-5，下标关系+2 （3）逆序 a[::-1] 4、多维数组 （1）二维：a = np.array([[0,1,2,3],[1,2,3,4]])输出为： [[0 1 2 3] [1 2 3 4]]a.ndm –&gt;2a.shape –&gt;(2,4)–&gt;行数，列数len(a) –&gt;2–&gt;第一维大小 （2）三维：a = np.array([[[0],[1]],[[2],[4]]])a.shape–&gt;(2,2,1) 5、用函数创建数组 （1）np.arange() a = np.arange(0, 10)b = np.arange(10)c = np.arange(0,10,2)输出： [0 1 2 3 4 5 6 7 8 9][0 1 2 3 4 5 6 7 8 9][0 2 4 6 8] （2）np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)等距离产生num个数 （3）np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)以log函数取 6、常用数组 （1）a = np.ones((3,3))输出： [[ 1. 1. 1.][ 1. 1. 1.][ 1. 1. 1.]] （2）np.zeros((3,3)) （3）np.eye(2)单位矩阵 （4）np.diag([1,2,3],k=0)对角矩阵，k为对角线的偏移 7、随机数矩阵 （1）a = np.random.rand(4)输出：[ 0.99890402 0.41171695 0.40725671 0.42501804]范围在[0,1]之间 （2）a = np.random.randn(4) Gaussian函数， （3）生成100个0-m的随机数: [t for t in [np.random.randint(x-x, m) for x in range(100)]] 也可以12m_arr = np.arange(0,m) # 生成0-m-1np.random.shuffle(m_arr) # 打乱m_arr顺序 然后取前100个即可 8、查看数据类型 （1）a.dtype 9、数组复制 （1）共享内存123a = np.array([1,2,3,4,5])b = aprint np.may_share_memory(a,b) 输出：True说明使用的同一个存储区域，修改一个数组同时另外的也会修改 （2）不共享内存b = a.copy() 10、布尔型 （1）1234a = np.random.random_integers(0,20,5)print aprint a%3==0print a[a % 3 == 0] 输出： [14 3 6 15 4] [False True True True False] [ 3 6 15] 11、中间数、平均值 （1）中间数np.median(a) （2）平均值np.mean(a), 若是矩阵，不指定axis默认求所有元素的均值 axis=0,求列的均值 axis=1，求行的均值 12、矩阵操作 （1）乘积np.dot(a,b)123a = np.array([[1,2,3],[2,3,4]])b = np.array([[1,2],[2,3],[2,2]])print np.dot(a,b) 或者使用np.matrix()生成矩阵，相乘需要满足矩阵相乘的条件 （2）内积np.inner(a,b)行相乘 （3）逆矩阵np.linalg.inv(a) （4）列的最大值np.max(a[:,0])–&gt;返回第一列的最大值 （5）每列的和np.sum(a,0) （6）每行的平均数np.mean(a,1) （7）求交集p.intersect1d(a,b)，返回一维数组 （8）转置：np.transpose(a) （9）两个矩阵对应对应元素相乘（点乘）：a*b 13、文件操作 （1）保存：tofile()123a = np.arange(10)a.shape=2,5a.tofile(&quot;test.bin&quot;) 读取：（需要注意指定保存的数据类型）12a = np.fromfile(&quot;test.bin&quot;,dtype=np.int32)print a （2）保存：np.save(&quot;test&quot;,a)–&gt;会保存成test.npy文件读取：a = np.load(&quot;test&quot;) 14、组合两个数组 （1）垂直组合 1234a = np.array([1,2,3])b = np.array([[1,2,3],[4,5,6]])c = np.vstack((b,a)) （2）水平组合 1234a = np.array([[1,2],[3,4]])b = np.array([[1,2,3],[4,5,6]])c = np.hstack((a,b)) 15、读声音Wave文件 （1）wave 1234567891011121314151617181920212223242526272829import wavefrom matplotlib import pyplot as pltimport numpy as np# 打开WAV文档f = wave.open(r&quot;c:\\WINDOWS\\Media\\ding.wav&quot;, &quot;rb&quot;)# 读取格式信息# (nchannels, sampwidth, framerate, nframes, comptype, compname)params = f.getparams()nchannels, sampwidth, framerate, nframes = params[:4]# 读取波形数据str_data = f.readframes(nframes)f.close()#将波形数据转换为数组wave_data = np.fromstring(str_data, dtype=np.short)wave_data.shape = -1, 2wave_data = wave_data.Ttime = np.arange(0, nframes) * (1.0 / framerate)# 绘制波形plt.subplot(211) plt.plot(time, wave_data[0])plt.subplot(212) plt.plot(time, wave_data[1], c=&quot;g&quot;)plt.xlabel(&quot;time (seconds)&quot;)plt.show() 16、where （1）找到y数组中=1的位置：np.where(y==1) 17、np.ravel(y) 将二维的转化为一维的，eg:(5000,1)--&gt;(5000,) 18、ndarray.flat函数 将数据展开对应的数组，可以进行访问 应用：0/1映射123456def dense_to_one_hot(label_dense,num_classes): num_labels = label_dense.shape[0] index_offset = np.arange(num_labels)*num_classes labels_one_hot = numpy.zeros((num_labels, num_classes)) labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1 return labels_one_hot 19、数组访问 X = np.array([[1,2],[3,4]]) X[0:1]和X[0:1,:]等价，都是系那是第一行数据 20、np.c_() 按照第二维度，即列拼接数据 np.c_[np.array([[1,2,3]]), 0, 0, np.array([[4,5,6]])]输出：array([[1, 2, 3, 0, 0, 4, 5, 6]]) 两个列表list拼接，长度要一致 np.c_[[1,2,3],[2,3,4]] np.c_[range(1,5),range(2,6)] 二、Matplotlib1、关于pyplot （1）matplotlib的pyplot子库提供了和matlab类似的绘图API，方便用户快速绘制2D图表。 （2）导入包：from matplotlib import pyplot as plt 2、绘图基础 （1）sin和cos 1234567x = np.linspace(-np.pi, np.pi,256,endpoint=True)C,S = np.cos(x),np.sin(x)plt.plot(x,C)plt.plot(x,S)plt.xlabel(&quot;x&quot;)plt.ylabel(&quot;y&quot;)plt.show() （2）指定绘图的大小 plt.figure(figsize=(8,6), dpi=80) （3）指定线的颜色、粗细和类型 plt.plot(x,C,color=”blue”,linewidth=2.0,linestyle=”-“,label=”cos”) 蓝色、宽度、连续、label（使用legend会显示这个label） （4）指定x坐标轴范围 plt.xlim(-4.0,4.0) （5）设置y抽刻度间隔plt.yticks(np.linspace(-1, 1, 15, endpoint=True)) （6）显示图例 plt.legend(loc=”upper left”) 显示在左上方 （7）一个figure上画多个图subplot方式 plt.subplot(1, 2, 1) plt.subplot(1, 2, 2) 例如：plt.subplot(m, n, p) 代表图共有的m行，n列，第p个图 p是指第几个图，横向数 上面代表有一行，两个图 [更详细解释]：231,232,233表示第一行的1,2,3个位置，接着的223表示把整个矩形分成4分，所以第3个位置就是第二行的第一个位置，但是相比第一行占了1.5列（每次subplot划分都是整个图重新划分） （8）一个figure上画多个图，axes方式 plt.axes([.1, .1, .8, .8]) plt.axes([.2, .2, .3, .3]) （9）填充 plt.fill_between(x, y1, y2=0, where=None, interpolate=False, step=None, hold=None, data=None) eg: 12plt.fill_between(X, 1, C+1, C+1&gt;1,color=&quot;red&quot;)plt.fill_between(X, 1, C+1, C+1&lt;1,color=&quot;blue&quot;) 3、散点图 （1） plt.scatter(X,Y) 4、条形图 （1） plt.bar(X, Y, facecolor=&quot;red&quot;, edgecolor=&quot;blue&quot; ) 填充颜色为facecolor,边界颜色为edgecolor 5、等高线图 （1）只显示等高线contour （2）显示表面contourf （3）注意三维图要用到meshgrid转化为网格12345678910111213def f(x,y): return (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 -y**2)n = 256x = np.linspace(-3,3,n)y = np.linspace(-3,3,n)X,Y = np.meshgrid(x,y)plt.contourf(X,Y,f(X,Y),alpha=.5)C = plt.contour(X,Y,f(X, Y),colors=&quot;black&quot;,linewidth=.5)plt.clabel(C)plt.show() 6、显示图片imshow （1）123456789def f(x,y):return (1 - x / 2 + x ** 5 + y ** 3 ) * np.exp(-x ** 2 - y ** 2)n = 10x = np.linspace(-3, 3, 3.5 * n)y = np.linspace(-3, 3, 3.0 * n)X, Y = np.meshgrid(x, y)z = f(X,Y)plt.imshow(z)plt.show() 7、饼图pie （1）传入一个序列12345plt.figure(figsize=(8,8))n = 20Z = np.arange(10)plt.pie(Z)plt.show() 8、三维表面图* （1）需要导入包：from mpl_toolkits.mplot3d import Axes3D （2）1234567891011fig = plt.figure()ax = Axes3D(fig)X = np.arange(-4, 4, 0.25)Y = np.arange(-4, 4, 0.25)X, Y = np.meshgrid(X, Y)R = np.sqrt(X ** 2 + Y ** 2)Z = np.sin(R)ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.hot)ax.contourf(X, Y, Z, zdir=&apos;z&apos;, offset=-2, cmap=plt.cm.hot)ax.set_zlim(-2, 2)plt.show() 9、legend显示问题 （1）12345p1, = plt.plot(np.ravel(X[pos,0]),np.ravel(X[pos,1]),&apos;ro&apos;,markersize=8)p2, = plt.plot(np.ravel(X[neg,0]),np.ravel(X[neg,1]),&apos;g^&apos;,markersize=8)plt.xlabel(&quot;X1&quot;)plt.ylabel(&quot;X2&quot;)plt.legend([p1,p2],[&quot;y==1&quot;,&quot;y==0&quot;]) 注意 p1后要加上,逗号，里面的数据要是一维的，使用np.ravel()转化一下 10、显示网格 （1）plt.grid(True, linestyle = &quot;-.&quot;, color = &quot;b&quot;, linewidth = &quot;1&quot;) 11、显示正方形的坐标区域 （1）plt.axis(&#39;square&#39;) 三、Scipy1、 Scipy特征 （1）内置了图像处理， 优化，统计等等相关问题的子模块 （2）scipy 是Python科学计算环境的核心。 它被设计为利用 numpy 数组进行高效的运行。从这个角度来讲，scipy和numpy是密不可分的。 2、文件操作io （1）导包：from scipy import io as spio （2）保存mat格式文件 spio.savemat(&quot;test.mat&quot;, {&#39;a&#39;:a}) （3）加载mat文件 data = spio.loadmat(&quot;test.mat&quot;) 访问值：data[‘a’]–&gt;相当于map （4）读取图片文件导包：from scipy import misc读取：data = misc.imread(&quot;123.png&quot;)[注1]：与matplotlib中plt.imread(&#39;fname.png&#39;)类似[注2]：执行misc.imread时可能提醒不存在这个模块，那就安装pillow的包 3、线性代数操作linalg （1）求行列式det res = linalg.det(a) （2）求逆矩阵inv res = linalg.inv(a) 若是矩阵不可逆，则会抛异常LinAlgError: singular matrix （3）奇异值分解svd u,s,v = linalg.svd(a) [注1]：s为a的特征值（一维），降序排列， [注2]：a = u*s*v’（需要将s转换一下才能相乘）12t = np.diag(s)print u.dot(t).dot(v) 4、梯度下降优化算法 （1）fmin_bfgs 1234def f(x): return x**2-2*xinitial_x = 0optimize.fmin_bfgs(f,initial_x) [注]：initial_x为初始点（此方法可能会得到局部最小值） （2）fmin()、fmin_cg等等方法 5、拟合（最小二乘法） （1）curve_fit123456789101112131415161718#产生数据def f(x): return x**2 + 10*np.sin(x)xdata = np.linspace(-10, 10, num=20)ydata = f(xdata)+np.random.randn(xdata.size)plt.scatter(xdata, ydata, linewidths=3.0, edgecolors=&quot;red&quot;)#plt.show()#拟合def f2(x,a,b): return a*x**2 + b*np.sin(x)guess = [2,2]params, params_covariance = optimize.curve_fit(f2, xdata, ydata, guess)#画出拟合的曲线x1 = np.linspace(-10,10,256)y1 = f2(x1,params[0],params[1])plt.plot(x1,y1)plt.show() 6、统计检验 （1）T-检验stats.ttest_ind123a = np.random.normal(0, 1, size=10)b = np.random.normal(1, 1, size=10)print stats.ttest_ind(a, b) 输出：(-2.6694785119868358, 0.015631342180817954)后面的是概率p: 两个过程相同的概率。如果其值接近1，那么两个过程几乎可以确定是相同的，如果其值接近0，那么它们很可能拥有不同的均值。 7、插值 （1）导入包：from scipy.interpolate import interp1d12345678910111213141516#产生一些数据x = np.linspace(0, 1, 10)y = np.sin(2 * np.pi * x)computed_time = np.linspace(0, 1, 50)#线性插值linear_interp = interp1d(x, y)linear_results = linear_interp(computed_time)#三次方插值cubic_interp = interp1d(x, y, kind=&apos;cubic&apos;)cubic_results = cubic_interp(computed_time)#作图plt.plot(x, y, &apos;o&apos;, ms=6, label=&apos;y&apos;)plt.plot(computed_time, linear_results, label=&apos;linear interp&apos;)plt.plot(computed_time, cubic_results, label=&apos;cubic interp&apos;)plt.legend()plt.show() 8、求解非线性方程组 （1）optimize中的fsolve1234567from scipy.optimize import fsolvedef func(x): x0,x1,x2 = x.tolist() return [5*x1-25,5*x0*x0-x1*x2,x2*x0-27]initial_x = [1,1,1]result = fsolve(func, initial_x)print result 四、pandas1、pandas特征与导入 （1）包含高级的数据结构和精巧的工具 （2）pandas建造在NumPy之上 （3）导入：12from pandas import Series, DataFrameimport pandas as pd 2、pandas数据结构（1）Series 一维的类似的数组对象 包含一个数组的数据（任何NumPy的数据类型）和一个与数组关联的索引 不指定索引：a = Series([1,2,3]) ，输出为 1230 11 22 3 包含属性a.index,a.values，对应索引和值 指定索引：a = Series([1,2,3],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])可以通过索引访问a[&#39;b&#39;] 判断某个索引是否存在：&#39;b&#39; in a 通过字典建立Series12dict = &#123;&apos;china&apos;:10,&apos;america&apos;:30,&apos;indian&apos;:20&#125;print Series(dict) 输出：1234america 30china 10indian 20dtype: int64 判断哪个索引值缺失：1234dict = &#123;&apos;china&apos;:10,&apos;america&apos;:30,&apos;indian&apos;:20&#125;state = [&apos;china&apos;,&apos;america&apos;,&apos;test&apos;]a = Series(dict,state)print a.isnull() 输出：（test索引没有对应值）1234china Falseamerica Falsetest Truedtype: bool 在算术运算中它会自动对齐不同索引的数据123a = Series([10,20],[&apos;china&apos;,&apos;test&apos;])b = Series([10,20],[&apos;test&apos;,&apos;china&apos;])print a+b 输出：123china 30test 30dtype: int64 指定Series对象的name和index的name属性1234a = Series([10,20],[&apos;china&apos;,&apos;test&apos;])a.index.name = &apos;state&apos;a.name = &apos;number&apos;print a 输出：1234statechina 10test 20Name: number, dtype: int64 （2）DataFrame Datarame表示一个表格，类似电子表格的数据结构 包含一个经过排序的列表集（按列名排序） 每一个都可以有不同的类型值（数字，字符串，布尔等等） DataFrame在内部把数据存储为一个二维数组的格式，因此你可以采用分层索引以表格格式来表示高维的数据 创建： 通过字典12345data = &#123;&apos;state&apos;: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;d&apos;], &apos;year&apos;: [2000, 2001, 2002, 2001, 2002], &apos;pop&apos;: [1.5, 1.7, 3.6, 2.4, 2.9]&#125;frame = DataFrame(data)print frame 输出：(按照列名排好序的[若是手动分配列名，会按照你设定的]，并且索引会自动分配) 123456 pop state year0 1.5 a 20001 1.7 b 20012 3.6 c 20023 2.4 d 20014 2.9 d 2002 访问 列：与Series一样，通过列名访问：frame[&#39;state&#39;]或者frame.state 行：ix 索引成员（field），frame.ix[2]，返回每一列的第3行数据 赋值：frame2[&#39;debt&#39;] = np.arange(5.)，若没有debt列名，则会新增一列 删除某一列：del frame2[&#39;eastern&#39;] 像Series一样， values 属性返回一个包含在DataFrame中的数据的二维ndarray 返回所有的列信息：frame.columns 转置：frame2.T （3）索引对象 pandas的索引对象用来保存坐标轴标签和其它元数据（如坐标轴名或名称） 索引对象是不可变的，因此不能由用户改变 创建index = pd.Index([1,2,3]) 常用操作 append–&gt;链接额外的索引对象，产生一个新的索引 diff –&gt;计算索引的差集 intersection –&gt;计算交集 union –&gt;计算并集 isin –&gt;计算出一个布尔数组表示每一个值是否包含在所传递的集合里 delete –&gt;计算删除位置i的元素的索引 drop –&gt;计算删除所传递的值后的索引 insert –&gt;计算在位置i插入元素后的索引 is_monotonic –&gt;返回True，如果每一个元素都比它前面的元素大或相等 is_unique –&gt;返回True，如果索引没有重复的值 unique –&gt;计算索引的唯一值数组 3、重新索引reindex（1）Series （1）重新排列 123a = Series([2,3,1],index=[&apos;b&apos;,&apos;a&apos;,&apos;c&apos;])b = a.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])print b （2）重新排列，没有的索引补充为0,b=a.reindex([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;],fill_value=0) （3）重建索引时对值进行内插或填充123a = Series([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],index=[0,2,4])b = a.reindex(range(6),method=&apos;ffill&apos;)print b 输出：12345670 a1 a2 b3 b4 c5 cdata_linkdtype: object method的参数ffill或pad—-&gt;前向（或进位）填充bfill或backfill—-&gt;后向（或进位）填充 （3）DataFrame 与Series一样，reindex index 还可以reindex column列，frame.reindex(columns=[&#39;a&#39;,&#39;b&#39;]) 4、从一个坐标轴删除条目（1）Series a.drop([&#39;a&#39;,&#39;b&#39;]) 删除a，b索引项（2）DataFrame 索引项的删除与Series一样 删除column—&gt;a.drop([&#39;one&#39;], axis=1) 删除column名为one的一列 5、索引，挑选和过滤（1）Series 可以通过index值或者整数值来访问数据，eg：对于a = Series(np.arange(4.), index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])，a[&#39;b&#39;]和a[1]是一样的 使用标签来切片和正常的Python切片并不一样，它会把结束点也包括在内12a = Series(np.arange(4.), index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])print a[&apos;b&apos;:&apos;c&apos;] 输出包含c索引对应的值 （2）DataFrame 显示前两行：a[:2] 布尔值访问：a[a[&#39;two&#39;]&gt;5] 索引字段 ix 的使用 index为2，column为’one’和’two’—&gt;a.ix[[2],[&#39;one&#39;,&#39;two&#39;]] index为2的一行：a.ix[2] 6、DataFrame和Series运算 （1）DataFrame每一行都减去一个Series12345a = pd.DataFrame(np.arange(16).reshape(4,4),index=[0,1,2,3],columns=[&apos;one&apos;, &apos;two&apos;,&apos;three&apos;,&apos;four&apos;])print ab = Series([0,1,2,3],index=[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;,&apos;four&apos;])print bprint a-b 输出：123456789101112131415 one two three four0 0 1 2 31 4 5 6 72 8 9 10 113 12 13 14 15one 0two 1three 2four 3dtype: int64 one two three four0 0 0 0 01 4 4 4 42 8 8 8 83 12 12 12 12 7、读取文件 （1）csv文件pd.read_csv(r&quot;data/train.csv&quot;)，返回的数据类型是DataFrame类型 8、查看DataFrame的信息 （1）train_data.describe()eg:123456789 PassengerId Survived Pclass Age SibSp \\count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 9、定位到一列并替换 df.loc[df.Age.isnull(),&#39;Age&#39;] = 23 #&#39;Age&#39;列为空的内容补上数字23 10、将分类变量转化为指示变量get_dummies() 12s = pd.Series(list(&apos;abca&apos;))pd.get_dummies(s) 12345 a b c0 1 0 01 0 1 02 0 0 13 1 0 0 11、list和string互相转化 string转list 1234&gt;&gt;&gt; str = &apos;abcde&apos;&gt;&gt;&gt; list = list(str)&gt;&gt;&gt; list[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;] list转string 123&gt;&gt;&gt; str_convert = &apos;,&apos;.join(list)&gt;&gt;&gt; str_convert&apos;a,b,c,d,e&apos; 12、删除原来的索引，重新从0-n索引 x = x.reset_index(drop=True) 13、apply函数 DataFrame.apply(func, axis=0, broadcast=False, raw=False, reduce=None, ….. df.apply(numpy.sqrt) # returns DataFrame 等价==》df.apply(lambda x : numpy.sqrt(x))==&gt;使用更灵活 df.apply(numpy.sum, axis=0) # equiv to df.sum(0) df.apply(numpy.sum, axis=1) # equiv to df.sum(1) 13、re.search().group()函数 re.search(pattern, string, flags=0) group(num=0)函数返回匹配的字符，默认num=0,可以指定多个组号，例如group(0,1) 14、pandas.cut()函数 pandas.cut(x, bins, right=True, labels=None, retbins=False, precision=3, include_lowest=False) x为以为数组 bins可以是int值或者序列 若是int值就根据x分为bins个数的区间 若是序列就是自己指定的区间 right包含最右边的区间，默认为True labels 数组或者一个布尔值 若是数组，需要与对应bins的结果一致 若是布尔值False，返回bin中的一个值 eg:pd.cut(full[“FamilySize”], bins=[0,1,4,20], labels=[0,1,2]) 15、添加一行数据 定义空的dataframe: data_process = pd.DataFrame(columns=[&#39;route&#39;,&#39;date&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;10&#39;,&#39;11&#39;,&#39;12&#39;]) 定义一行新的数据，new = pd.DataFrame(columns=[&#39;route&#39;,&#39;date&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;10&#39;,&#39;11&#39;,&#39;12&#39;],index=[j]) 这里index可以随意设置，若是想指定就指定 添加：data_process = data_process.append(new, ignore_index=True)， 注意这里是data_process = data_process....... 五、scikit-learn1、手写数字识别（SVM）1234567891011121314151617181920212223242526272829from sklearn import datasetsfrom sklearn import svmimport numpy as npfrom matplotlib import pyplot as plt&apos;&apos;&apos;使用sciki-learn中的数据集，一般有data,target,DESCR等属性属性&apos;&apos;&apos;digits = datasets.load_digits() #加载scikit-learn中的数据集clf = svm.SVC(gamma=0.001,C=100) #使用支持向量机进行分类，gamma为核函数的系数clf.fit(digits.data[:-4],digits.target[:-4]) #将除最后4组的数据输入进行训练predict = clf.predict(digits.data[-4:]) #预测最后4组的数据，[-4:]表示最后4行所有数据，而[-4,:]表示倒数第4行数据print &quot;预测值为：&quot;,predictprint &quot;真实值：&quot;,digits.target[-4:]#显示最后四个图像plt.subplot(2,2,1)plt.imshow(digits.data[-4,:].reshape(8,8))plt.subplot(2,2,2)plt.imshow(digits.data[-3,:].reshape(8,8))plt.subplot(2,2,3)plt.imshow(digits.data[-2,:].reshape(8,8))plt.subplot(2,2,4)plt.imshow(digits.data[-1,:].reshape(8,8))plt.show() svm的参数参数解释： （1）C: 目标函数的惩罚系数C，用来平衡分类间隔margin和错分样本的，default C = 1.0； （2）kernel：参数选择有RBF, Linear, Poly, Sigmoid, 默认的是”RBF”; （3）degree：if you choose ‘Poly’ in param 2, this is effective, degree决定了多项式的最高次幂； （4）gamma：核函数的系数(‘Poly’, ‘RBF’ and ‘Sigmoid’), 默认是gamma = 1 / n_features; （5）coef0：核函数中的独立项，’RBF’ and ‘Poly’有效； （6）probablity: 可能性估计是否使用(true or false)； （7）shrinking：是否进行启发式； （8）tol（default = 1e - 3）: svm结束标准的精度; （9）cache_size: 制定训练所需要的内存（以MB为单位）； （10）class_weight:每个类所占据的权重，不同的类设置不同的惩罚参数C,缺省的话自适应； （11）verbose: 跟多线程有关，不大明白啥意思具体； （12）max_iter: 最大迭代次数，default = 1000， if max_iter = -1, no limited; （13）decision_function_shape ： ‘ovo’ 一对一, ‘ovr’ 多对多 or None 无, default=None （14）random_state ：用于概率估计的数据重排时的伪随机数生成器的种子。 2、保存训练过的模型 from sklearn.externals import joblib joblib.dump(clf, &quot;digits.pkl&quot;) #将训练的模型保存成digits.pkl文件 加载模型：clf = joblib.load(&quot;digits.pkl&quot;)其余操作数据即可，预测 3、鸢尾花分类（svm，分离出测试集）1234567891011121314151617181920from sklearn import datasetsfrom sklearn.cross_validation import train_test_splitfrom sklearn.svm import SVCimport numpy as np&apos;&apos;&apos;加载scikit-learn中的鸢尾花数据集&apos;&apos;&apos;#加载鸢尾花数据集iris = datasets.load_iris()iris_data = iris.data; #相当于Xiris_target = iris.target; #对应的label种类，相当于yx_train,x_test,y_train,y_test = train_test_split(iris_data,iris_target,test_size=0.2) #将数据分成训练集x_train和测试集x_test，测试集占总数据的0.2model = SVC().fit(x_train,y_train); #使用svm在训练集上拟合predict = model.predict(x_test) #在测试集上预测right = sum(predict == y_test) #求预测正确的个数print (&apos;测试集准确率：%f%%&apos;%(right*100.0/predict.shape[0])) #求在测试集上预测的正确率，shape[0]返回第一维的长度，即数据个数 [另：留一验证法]：–&gt;每次取一条数据作为测试集，其余作为训练集123456789101112131415161718192021222324from sklearn import datasetsfrom sklearn.svm import SVCimport numpy as npdef data_svc_test(data,target,index): x_train = np.vstack((data[0:index],data[index+1:-1]))#除第index号之外的 数据为训练集 x_test = data[index].reshape(1,-1) #第index号数据为测试集，reshape(1,-1)的作用是只有一条数据时，使用reshap e(1,-1)，否则有个过时方法的警告 y_train = np.hstack((target[0:index],target[index+1:-1])) y_test = target[index] model = SVC().fit(x_train,y_train) #建立SVC模型 predict = model.predict(x_test) return predict == y_test #返回结果是否预测正确#读取数据iris = datasets.load_iris()iris_data = iris.datairis_target = iris.targetm = iris_target.shape[0]right = 0;for i in range(0,m): right += data_svc_test(iris_data,iris_target,i)print (&quot;%f%%&quot;%(right*100.0/m)) 4、房价预测(SVR–&gt;支持向量回归)1234567891011121314151617181920212223from sklearn import datasetsfrom sklearn.svm import SVR #引入支持向量回归所需的SVR模型from sklearn.cross_validation import train_test_splitfrom sklearn.preprocessing import StandardScalerimport numpy as np#加载数据house_dataset = datasets.load_boston()house_data = house_dataset.datahouse_price = house_dataset.target#数据预处理--&gt;归一化x_train,x_test,y_train,y_test = train_test_split(house_data,house_price,test_size=0.2) scaler = StandardScaler()scaler.fit(x_train)x_train = scaler.transform(x_train) #训练集x_test = scaler.transform(x_test) #测试集#回归，预测model = SVR().fit(x_train,y_train) #使用SVR回归拟合predict = model.predict(x_test) #预测result = np.hstack((y_test.reshape(-1,1),predict.reshape(-1,1))) #reshape(-1,1)所有行转为1列向量print(result) 六、sk-learn模型总结0、数据处理（1）均值归一化：from sklearn.preprocessing import StandardScaler scaler = StandardScaler() scaler.fit(X_train) X_train = scaler.transform(X_train) （2）分割数据：from sklearn.cross_validation import train_test_split x_train,x_test,y_train,y_test = train_test_split(iris_data,iris_target,test_size=0.2) 1、线性模型from sklearn import linear_model（1）逻辑回归模型 linear_model.LogisticRegression() 重要参数 C：正则化作用，默认值1.0，值越小，正则化作用越强 max_iter：最大梯度下降执行次数，默认值100 tol：停止执行的容忍度，默认值1e-4 重要返回值 coef_：对应feature的系数 2、svm模型from sklearn import svm（1）分类模型 svm.SVC() 重要参数 kernel：使用的核函数，默认是rbf径向基函数，还有linear，poly，sigmoid ，precomputed核函数 C：正则化作用，默认值1.0，值越大，margin越大 tol：停止执行的容忍度，默认值1e-4 gamma：为核函数的系数，值越大拟合的越好，默认是1/feature的个数 degree：对应poly核函数 重要返回值","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://lawlite.me/tags/机器学习/"}]},{"title":"搭建自己的VPN","date":"2016-11-05T09:33:50.000Z","path":"2016/11/05/搭建自己的VPN/","text":"一、首先租一个服务器 1、租一个香港的服务器，这里我选的按量付费，如果不使用了释放就可以了，按小时收费的，不过要求你账户上要多于100块钱。 2、操作系统选择的64位CentOS6.5，CentOS7以上下面的命令会有所不同。 3、创建成功后管理控制台会有公网和私网两个ip地址 二、配置VPN 1、安装ppp和pptpd: 1yum install ppp pptpd 2、配置DNS/etc/ppp/options.pptpd文件中的ms-dns配置为： 12ms-dns 8.8.8.8ms-dns 8.8.4.4 3、配置IP/etc/pptpd.conf文件中最后加入： 12localip 192.168.0.1remoteip 192.168.0.2-254 4、配置VPN用户名和密码/etc/ppp/chap-secrets文件中加入： 1userName pptpd password * 就是userName位置写上你的用户名，password位置写上你的密码 5、配置IP转发/etc/sysctl.conf文件中net.ipv4.ip_forward = 0改为1net.ipv4.ip_forward = 1 然后执行：sysctl -p使其生效 三、配置防火墙 1、加入防火墙规则 123iptables -A INPUT -p TCP -i eth1 --dport 1723 --sport 1024:65534 -j ACCEPTiptables -t nat -A POSTROUTING -o eth1 -s 192.168.0.0/24 -j MASQUERADEiptables -I FORWARD -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1356 注意这里指定的网卡是eth1，其对应外网的网卡，否则能够连上VPN，但是是访问不了外网的。 VPN默认的端口是1723 2、保存防火墙配置，启动pptpd，让其开机自启动 1234service iptables saveservice iptables restartservice pptpd start chkconfig pptpd on 四、测试1、window或手机等连接 对应外网IP，设置的用户名和密码 速度是可以的， 我也测试了一下国外的服务器，速度非常慢，还不如免费的VPN软件， 五、shell脚本 1、我写了一个简单的shell脚本放在了github上，github地址：https://github.com/lawlite19/Script 2、运行步骤如下： 下载脚本：wget https://raw.githubusercontent.com/lawlite19/Script/master/shell/vpn_setup.sh 添加执行权限：chmod +x vpn_setup.sh 执行即可：./vpn_setup.sh3、完整代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#!/bin/bash# Author: Wang Yongzhi(bob)# Date: 2016.11.16echo -e &quot;-----------------------------------------------&quot;echo -e &quot;| Setup VPN... |&quot;echo -e &quot;-----------------------------------------------\\n&quot;# Step 1:install ppp and pptpdyum install -y pppyum install -y pptpdif [ $? -eq 0 ]then echo -e &quot;install ppp and pptpd Success!\\n&quot;else echo -e &quot;Sorry! install ppp and pptpd Failed!\\n&quot; exit 0fi# Step 2:configure pptpd DNSsed -i -e &apos;/#ms-dns 10.0.0.1/a\\ms-dns 8.8.8.8&apos; /etc/ppp/options.pptpdsed -i -e &apos;/#ms-dns 10.0.0.2/a\\ms-dns 8.8.4.4&apos; /etc/ppp/options.pptpdif [ $? -eq 0 ]then echo -e &quot;Configure DNS Success!\\n&quot;else echo -e &quot;Configure DNS Failed!\\n&quot; exit 0fi# Step 3:configure pptpd IPecho localip 192.168.0.1 &gt;&gt; /etc/pptpd.confecho remoteip 192.168.0.2-254 &gt;&gt; /etc/pptpd.confif [ $? -eq 0 ]then echo -e &quot;Configure pptpd IP Success!\\n&quot;else echo -e &quot;Configure pptpd IP Failed!\\n&quot; exit 0fi# Step 4: configure VPN userName and passwordwhile truedo read -p &quot;Please input userName:&quot; userName read -p &quot;Please input passwd: &quot; Passwd echo $userName pptpd $Passwd \\* &gt;&gt; /etc/ppp/chap-secrets read -p &quot;continue?y/N: &quot; flag if [ $flag = &quot;n&quot; -o $flag = &quot;N&quot; ] then break fidone# Step 5: configure forwardingsed -i &apos;s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g&apos; /etc/sysctl.confif [ $? -eq 0 ]then echo -e &quot;Configure forwarding Success!\\n&quot;else echo -e &quot;Configure forwarding Failed\\n&quot; exit 0fisysctl -p# Step 6: configure iptables#EXTIF=$(ifconfig | head -n 1 | grep -v lo | cut -d &apos; &apos; -f 1)iptables -A INPUT -p TCP -i eth1 --dport 1723 --sport 1024:65534 -j ACCEPTiptables -t nat -A POSTROUTING -o eth1 -s 192.168.0.0/24 -j MASQUERADEiptables -I FORWARD -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1356# Step 7: configure when start server to start pptpd and iptablesservice iptables saveservice iptables restartservice pptpd start chkconfig pptpd onecho -e &quot;Complete! Now you can connect the VPN throuth your computer or phone!\\n&quot;echo &quot; ***** *****&quot;echo &quot; ********* *********&quot;echo &quot; ************* *************&quot;echo &quot; *****************************&quot;echo &quot; *****************************&quot;echo &quot; *****************************&quot;echo &quot; ***************************&quot;echo &quot; ***********************&quot;echo &quot; *******************&quot;echo &quot; ***************&quot;echo &quot; ***********&quot;echo &quot; *******&quot;echo &quot; ***&quot;echo &quot; *&quot; 六、总结 最初是在租了一个国外的服务器测试的，没有问题，但是后来租用香港的服务器就出现的了错误，同样的系统、同样的配置，后来查看内网绑定的是网卡eth0,外网绑定的是网卡eth1，而我防火墙里设置的是内网的网卡eth0。而国外的那个服务器只要一个网卡，所以没有问题。另外练练shell脚本。","comments":true,"tags":[{"name":"翻墙","slug":"翻墙","permalink":"http://lawlite.me/tags/翻墙/"}]},{"title":"Scrapy爬虫框架模板","date":"2016-10-09T05:42:56.000Z","path":"2016/10/09/Python爬虫-Scrapy/","text":"说明 github地址：https://github.com/lawlite19/PythonCrawler-Scrapy-Mysql-File-Template 使用scrapy爬虫框架将数据保存Mysql数据库和文件中 settings.py 修改Mysql的配置信息 1234567#Mysql数据库的配置信息MYSQL_HOST = '127.0.0.1'MYSQL_DBNAME = 'testdb' #数据库名字，请修改MYSQL_USER = 'root' #数据库账号，请修改 MYSQL_PASSWD = '123456' #数据库密码，请修改MYSQL_PORT = 3306 #数据库端口，在dbhelper中使用 指定pipelines 1234ITEM_PIPELINES = &#123; 'webCrawler_scrapy.pipelines.WebcrawlerScrapyPipeline': 300,#保存到mysql数据库 'webCrawler_scrapy.pipelines.JsonWithEncodingPipeline': 300,#保存到文件中&#125; items.py 声明需要格式化处理的字段 123456class WebcrawlerScrapyItem(scrapy.Item): '''定义需要格式化的内容（或是需要保存到数据库的字段）''' # define the fields for your item here like: # name = scrapy.Field() name = scrapy.Field() #修改你所需要的字段 url = scrapy.Field() pipelines.py一、保存到数据库的类WebcrawlerScrapyPipeline（在settings中声明） 定义一个类方法from_settings，得到settings中的Mysql数据库配置信息，得到数据库连接池dbpool 12345678910111213141516@classmethoddef from_settings(cls,settings): '''1、@classmethod声明一个类方法，而对于平常我们见到的则叫做实例方法。 2、类方法的第一个参数cls（class的缩写，指这个类本身），而实例方法的第一个参数是self，表示该类的一个实例 3、可以通过类来调用，就像C.f()，相当于java中的静态方法''' dbparams=dict( host=settings['MYSQL_HOST'],#读取settings中的配置 db=settings['MYSQL_DBNAME'], user=settings['MYSQL_USER'], passwd=settings['MYSQL_PASSWD'], charset='utf8',#编码要加上，否则可能出现中文乱码问题 cursorclass=MySQLdb.cursors.DictCursor, use_unicode=False, ) dbpool=adbapi.ConnectionPool('MySQLdb',**dbparams)#**表示将字典扩展为关键字参数,相当于host=xxx,db=yyy.... return cls(dbpool)#相当于dbpool付给了这个类，self中可以得到 __init__中会得到连接池dbpool 12def __init__(self,dbpool): self.dbpool=dbpool process_item方法是pipeline默认调用的，进行数据库操作 12345#pipeline默认调用def process_item(self, item, spider): query=self.dbpool.runInteraction(self._conditional_insert,item)#调用插入的方法 query.addErrback(self._handle_error,item,spider)#调用异常处理方法 return item 插入数据库方法_conditional_insert 123456#写入数据库中def _conditional_insert(self,tx,item): #print item['name'] sql=\"insert into testpictures(name,url) values(%s,%s)\" params=(item[\"name\"],item[\"url\"]) tx.execute(sql,params) 错误处理方法_handle_error 123#错误处理方法def _handle_error(self, failue, item, spider): print failue 二、保存到文件中的类JsonWithEncodingPipeline（在settings中声明） 保存为json格式的文件，比较简单，代码如下 123456789101112class JsonWithEncodingPipeline(object): '''保存到文件中对应的class 1、在settings.py文件中配置 2、在自己实现的爬虫类中yield item,会自动执行''' def __init__(self): self.file = codecs.open('info.json', 'w', encoding='utf-8')#保存为json文件 def process_item(self, item, spider): line = json.dumps(dict(item)) + \"\\n\"#转为json的 self.file.write(line)#写入文件中 return item def spider_closed(self, spider):#爬虫结束时关闭文件 self.file.close() dbhelper.py 自己实现的操作Mysql数据库的类 init方法，获取settings配置文件中的信息 12345678def __init__(self): self.settings=get_project_settings() #获取settings配置，设置需要的信息 self.host=self.settings['MYSQL_HOST'] self.port=self.settings['MYSQL_PORT'] self.user=self.settings['MYSQL_USER'] self.passwd=self.settings['MYSQL_PASSWD'] self.db=self.settings['MYSQL_DBNAME'] 连接到Mysql 123456789#连接到mysql，不是连接到具体的数据库def connectMysql(self): conn=MySQLdb.connect(host=self.host, port=self.port, user=self.user, passwd=self.passwd, #db=self.db,不指定数据库名 charset='utf8') #要指定编码，否则中文可能乱码 return conn 连接到settings配置文件中的数据库名（MYSQL_DBNAME） 123456789#连接到具体的数据库（settings中设置的MYSQL_DBNAME）def connectDatabase(self): conn=MySQLdb.connect(host=self.host, port=self.port, user=self.user, passwd=self.passwd, db=self.db, charset='utf8') #要指定编码，否则中文可能乱码 return conn 创建数据库（settings文件中配置的数据库名） 12345678910#创建数据库def createDatabase(self): '''因为创建数据库直接修改settings中的配置MYSQL_DBNAME即可，所以就不要传sql语句了''' conn=self.connectMysql()#连接数据库 sql=\"create database if not exists \"+self.db cur=conn.cursor() cur.execute(sql)#执行sql语句 cur.close() conn.close() 还有一些数据库操作方法传入sql语句和参数即可（具体看代码） 实现具体的爬虫.py（即模板中的pictureSpider_demo.py文件） 继承scrapy.spiders.Spider 类 声明三个属性 12345name=\"webCrawler_scrapy\" #定义爬虫名，要和settings中的BOT_NAME属性对应的值一致allowed_domains=[\"desk.zol.com.cn\"] #搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页start_urls=[\"http://desk.zol.com.cn/fengjing/1920x1080/1.html\"] #开始爬取的地址 实现parse方法，该函数名不能改变，因为Scrapy源码中默认callback函数的函数名就是parse 1def parse(self, response): 返回item 123456item=WebcrawlerScrapyItem() #实例item（具体定义的item类）,将要保存的值放到事先声明的item属性中item['name']=file_name item['url']=realUrlprint item[\"name\"],item[\"url\"] yield item #返回item,这时会自定解析item 测试 测试DBHelper创建testdb数据库和testtable表 测试爬虫 在D盘建立文件夹pics; 图片自动保存到该文件夹中。 scrapy crawl webCrawler_scrapy运行爬虫后会将爬取得图片保存到本地，并且将name和url保存到数据库中","comments":true,"tags":[{"name":"Python","slug":"Python","permalink":"http://lawlite.me/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://lawlite.me/tags/爬虫/"}]},{"title":"算法练习","date":"2016-09-09T05:35:45.000Z","path":"2016/09/09/算法练习/","text":"说明 github地址：https://github.com/lawlite19/AlgorithmExercises一、 排序算法1. 交换排序 冒泡排序 冒泡排序改进1 冒泡排序改进2 冒泡排序改进3 快速排序 2. 插入排序 直接插入排序 直接插入排序递归版 希尔排序 3. 选择排序 简单选择排序 二元选择排序 堆排序 4. 归并排序 二路归并排序递归版 二路归并排序非递归版 二、 字符串1. 字符串旋转 字符串旋转_暴力法 字符串旋转_三步翻转法 2. 字符串包含 字符串包含判断_遍历 字符串包含判断_排序 字符串包含判断_素数乘积 字符串包含判断_哈希 ★★★ 3. 回文 回文判断 4. 最长回文子串长度 最长回文子串长度_一般解法 最长回文子串长度_Manacher ★★★ 算法说明 5. 全排列 全排列_递归 全排列_字典序排列 字典序全排列 6. 变形词 变形词判断 7. 字符串中数字串之和 字符串中数字串之和 ★ 8. 去除字符串中连续K个0串 去除字符串中连续K个0串 9. 整数字符串转整数值 整数字符串转整数值 ★★ 10. 字符串匹配问题 字符串匹配_KMP ★★★★★ 算法说明 三、 数组和矩阵1. 二维数组查找 二维数组查找 2. 矩阵相关操作 转圈打印矩阵 3. 最小的k个元素 最小的k个元素_堆 最小的k个元素_BFPRT ★★★★★ 算法说明 4.中间数 中间数_辅助数组 ★ 5.非负数组和为K的最长子数组 非负数组和为K的最长子数组_双指针 ★★★ 8.次数出现大于N/K的数 次数出现大于N/2的数 ★ 次数出现大于N/K的数 ★★★ 9.逆序对 逆序对数_分治归并★ 10.两个有序数组的中位数 两个有序数组的中位数_分治★★★★ 算法说明 四、 递归和动态规划1. 斐波那契问题 矩形覆盖_递归 矩形覆盖_dp ★ 矩阵覆盖_矩阵转化_class实现 ★★★ 矩阵覆盖_矩阵转化_vector实现 ★★★ 算法说明 爬楼梯_递归 爬楼梯_dp ★ 变态跳台阶_递归 变态跳台阶_直接计算 ★ 2. 最大子数组和相关问题 最大子数组和_dp ★ 两个不相容子数组最大和_辅助数组 ★★ 3. 最长递增子序列相关问题 最长递增子序列_一般dp 最长递增子序列_dp优化 ★★ 摞数组问题(俄国沙皇问题)_纯代码实现 ★★★★ 摞数组问题（俄国沙皇问题）_借助stl ★★★★ 五、 栈和队列1. getMin功能栈 getMin功能栈_方案1 getMin功能栈_方案2 2. 两个栈实现队列功能 两个栈实现队列 七、二叉树1. 遍历 先、中、后序遍历_递归 先、中、后序遍历_非递归 ★★ 八、位运算 出现奇数次的数","comments":true,"tags":[{"name":"算法","slug":"算法","permalink":"http://lawlite.me/tags/算法/"}]}]